<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cloud world</title>
  
  <subtitle>To be A geek</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://cloudsjhan.github.io/"/>
  <updated>2018-09-14T07:20:18.523Z</updated>
  <id>https://cloudsjhan.github.io/</id>
  
  <author>
    <name>cloud sjhan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Test</title>
    <link href="https://cloudsjhan.github.io/2018/09/14/Test/"/>
    <id>https://cloudsjhan.github.io/2018/09/14/Test/</id>
    <published>2018-09-14T07:20:18.000Z</published>
    <updated>2018-09-14T07:20:18.523Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><p><img src="https://" alt="" style="width:100%"></p><a id="more"></a><p>##</p><p>##</p><p>##</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://&quot; alt=&quot;&quot; style=&quot;width:100%&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CentOS7-安装docker-compose时由于pip10包管理导致的错误</title>
    <link href="https://cloudsjhan.github.io/2018/09/13/CentOS7-%E5%AE%89%E8%A3%85docker-compose%E6%97%B6%E7%94%B1%E4%BA%8Epip10%E5%8C%85%E7%AE%A1%E7%90%86%E5%AF%BC%E8%87%B4%E7%9A%84%E9%94%99%E8%AF%AF/"/>
    <id>https://cloudsjhan.github.io/2018/09/13/CentOS7-安装docker-compose时由于pip10包管理导致的错误/</id>
    <published>2018-09-13T02:11:49.000Z</published>
    <updated>2018-09-13T02:15:53.522Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><p><img src="https://" alt="" style="width:100%"></p><a id="more"></a><ul><li>今天在CentOS下安装docker-compose，遇到了Cannot uninstall ‘requests’. It is a distutils installed project and thus we cannot accurately determine which files belong to it which would lead to only a partial uninstall.<br>错误的原因是requests默认版本为2.6.0，但是docker-compose要2.9以上才支持，但是无法正常卸载2.9版本，是pip10对包的管理存在变化。</li><li>解决方案：<ul><li>pip install -l requests==2.9</li></ul></li></ul><hr>]]></content>
    
    <summary type="html">
    
      CentOS下安装Docker-compose时出现了 Cannot uninstall &#39;requests&#39;. It is a distutils installed project and thus we cannot accurately determine which files belong to it which would lead to only a partial uninstall.
    
    </summary>
    
      <category term="Docker" scheme="https://cloudsjhan.github.io/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://cloudsjhan.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>技术周刊之解析Python中的赋值、浅拷贝、深拷贝</title>
    <link href="https://cloudsjhan.github.io/2018/09/09/%E6%8A%80%E6%9C%AF%E5%91%A8%E5%88%8A%E4%B9%8B%E8%A7%A3%E6%9E%90Python%E4%B8%AD%E7%9A%84%E8%B5%8B%E5%80%BC%E3%80%81%E6%B5%85%E6%8B%B7%E8%B4%9D%E3%80%81%E6%B7%B1%E6%8B%B7%E8%B4%9D/"/>
    <id>https://cloudsjhan.github.io/2018/09/09/技术周刊之解析Python中的赋值、浅拷贝、深拷贝/</id>
    <published>2018-09-09T06:39:05.000Z</published>
    <updated>2018-09-09T08:03:48.727Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><p><img src="https://" alt="" style="width:100%"></p><a id="more"></a><h2 id="事情的起因"><a href="#事情的起因" class="headerlink" title="事情的起因"></a>事情的起因</h2><ul><li><p>本周我们分享的主题是Python中关于浅拷贝和深拷贝的特性，想要深入研究Python中的浅拷贝和深拷贝的起因在于，我想生成一个json字符串，该字符串未dumps之前是一个Python的数据结构，里面包含字典，以及List，在遍历生成dictionary时候，出现一个bug，就是每次遍历生成的dictionary都是上一次的值，现象可以看以下代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里我们定义一个函数get_data()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_data</span><span class="params">()</span>:</span></span><br><span class="line">   ...:     appid_dict = &#123;&#125;</span><br><span class="line">   ...:     appid_all_dict = &#123;&#125;</span><br><span class="line">   ...:     <span class="keyword">import</span> pdb;pdb.set_trace()</span><br><span class="line">   ...:     <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">   ...:         appid_dict[<span class="string">'a'</span>] = i</span><br><span class="line">   ...:         appid_all_dict[i] = appid_dict</span><br><span class="line"><span class="comment"># 我们的初衷是想要得到</span></span><br><span class="line"><span class="comment"># &#123;0: &#123;'a': 0&#125;, 1: &#123;'a': 1&#125;, 2: &#123;'a': 2&#125;, 3: &#123;'a': 3&#125;&#125;....这样的一个dict</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 但是在调试过程中，发现得到的结果是这样的：</span></span><br><span class="line"><span class="comment"># (Pdb) appid_all_dict</span></span><br><span class="line"><span class="comment"># &#123;0: &#123;'a': 2&#125;, 1: &#123;'a': 2&#125;, 2: &#123;'a': 2&#125;&#125;</span></span><br><span class="line"><span class="comment"># (Pdb) </span></span><br><span class="line"><span class="comment"># 即，后面的appid_dict都会把前面的覆盖掉，这是什么原因呢？</span></span><br><span class="line"><span class="comment"># 我们这里先把原因说一下：因为Python中对dict的操作默认是浅拷贝，即同样的字典，使用多次的话，每次使用都是指向同一片内存地址(引用)，所以在上面的程序中后面对appid_dict的赋值，都将前面的给覆盖掉了，导致每一个appid_dict指向同一片内存，读取的当然就是最后一次的appid_dict的值，即上面程序的执行结果：</span></span><br><span class="line">&#123;<span class="number">0</span>: &#123;<span class="string">'a'</span>: <span class="number">9</span>&#125;, <span class="number">1</span>: &#123;<span class="string">'a'</span>: <span class="number">9</span>&#125;, <span class="number">2</span>: &#123;<span class="string">'a'</span>: <span class="number">9</span>&#125;, <span class="number">3</span>: &#123;<span class="string">'a'</span>: <span class="number">9</span>&#125;, <span class="number">4</span>: &#123;<span class="string">'a'</span>: <span class="number">9</span>&#125;, <span class="number">5</span>: &#123;<span class="string">'a'</span>: <span class="number">9</span>&#125;, <span class="number">6</span>: &#123;<span class="string">'a'</span>: <span class="number">9</span>&#125;, <span class="number">7</span>: &#123;<span class="string">'a'</span>: <span class="number">9</span>&#125;, <span class="number">8</span>: &#123;<span class="string">'a'</span>: <span class="number">9</span>&#125;, <span class="number">9</span>: &#123;<span class="string">'a'</span>: <span class="number">9</span>&#125;&#125;</span><br></pre></td></tr></table></figure><ul><li><p>那么如何修改这个bug，让程序输出我们想要得到的结果：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;0: &#123;'a': 0&#125;, 1: &#123;'a': 1&#125;, 2: &#123;'a': 2&#125;, 3: &#123;'a': 3&#125;, 4: &#123;'a': 4&#125;, 5: &#123;'a': 5&#125;, 6: &#123;'a': 6&#125;, 7: &#123;'a': 7&#125;, 8: &#123;'a': 8&#125;, 9: &#123;'a': 9&#125;&#125;</span><br></pre></td></tr></table></figure></li><li><p>看完下面对于Python赋值、浅拷贝、深拷贝的解析，相信你就可以自己解决这个问题了</p></li></ul><h4 id="Python中的赋值操作"><a href="#Python中的赋值操作" class="headerlink" title="Python中的赋值操作"></a>Python中的赋值操作</h4><ul><li>赋值：就是对象的引用</li><li>举例： a = b: 赋值引用，a和b都指向同一个对象，如图所示<img src="https://ws4.sinaimg.cn/large/006tNbRwly1fv3bo527hfj30y80lwq7i.jpg" alt=""></li></ul><h2 id="Python中浅拷贝"><a href="#Python中浅拷贝" class="headerlink" title="Python中浅拷贝"></a>Python中浅拷贝</h2><ul><li>a = b.copy(): a 是b的浅拷贝，a和b是一个独立的对象，但是它们的子对象还是指向同一片引用。<img src="https://ws4.sinaimg.cn/large/006tNbRwly1fv3btp4y4ij30zs0neq9f.jpg" alt=""></li><li>Python中对字典的默认赋值操作就是浅拷贝，所以导致了文章开头所出现的情况。</li></ul><h2 id="Python中的深拷贝"><a href="#Python中的深拷贝" class="headerlink" title="Python中的深拷贝"></a>Python中的深拷贝</h2><ul><li>首先import copy,导入copy模块（Python中自带），b = copy.deepcopy(a), 我们就说b是a的深拷贝，b拷贝了a所有的资源对象，并新开辟了一块地址空间，两者互不干涉。<img src="https://ws1.sinaimg.cn/large/006tNbRwly1fv3bymsju4j311w0oi100.jpg" alt=""></li></ul><h2 id="实际的例子来进一步说明"><a href="#实际的例子来进一步说明" class="headerlink" title="实际的例子来进一步说明"></a>实际的例子来进一步说明</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">13</span>]: <span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line">In [<span class="number">14</span>]: <span class="function"><span class="keyword">def</span> <span class="title">temp</span><span class="params">()</span>:</span></span><br><span class="line">    ...:     a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>]]</span><br><span class="line">    ...:     b = a <span class="comment"># 赋值操作，直接传所有对象的引用</span></span><br><span class="line">    ...:     c = copy.copy(a) <span class="comment"># 浅拷贝，子对象指向同一引用</span></span><br><span class="line">    ...:     d = copy.deepcopy(a) <span class="comment"># 深拷贝，互不干涉</span></span><br><span class="line">    ...:     a.append(<span class="number">5</span>) <span class="comment"># 修改对象a</span></span><br><span class="line">    ...:     a[<span class="number">4</span>].append(<span class="string">'c'</span>) <span class="comment"># 修改a中的数组</span></span><br><span class="line">    ...:     print( <span class="string">'a = '</span>, a )</span><br><span class="line">    ...:     print( <span class="string">'b = '</span>, b )</span><br><span class="line">    ...:     print( <span class="string">'c = '</span>, c )</span><br><span class="line">    ...:     print( <span class="string">'d = '</span>, d ) </span><br><span class="line">    ...:     </span><br><span class="line"></span><br><span class="line">In [<span class="number">15</span>]: </span><br><span class="line"></span><br><span class="line">In [<span class="number">15</span>]: temp()</span><br><span class="line">a =  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>], <span class="number">5</span>]</span><br><span class="line">b =  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>], <span class="number">5</span>]</span><br><span class="line">c =  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]]</span><br><span class="line">d =  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>]]</span><br></pre></td></tr></table></figure></li></ul><h2 id="解决最初的问题"><a href="#解决最初的问题" class="headerlink" title="解决最初的问题"></a>解决最初的问题</h2><ul><li><p>看到这里，我们再回头看文章最初的那个问题，就可以很easy地解决了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_data</span><span class="params">()</span>:</span></span><br><span class="line">   ...:     appid_dict = &#123;&#125;</span><br><span class="line">   ...:     appid_all_dict = &#123;&#125;</span><br><span class="line">   ...:     <span class="keyword">import</span> pdb;pdb.set_trace()</span><br><span class="line">   ...:     <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        appid_dict = copy.deepcopy(appid_dict)<span class="comment"># 只需要加上这一行，使其成为深拷贝，问题解决！</span></span><br><span class="line">   ...:         appid_dict[<span class="string">'a'</span>] = i</span><br><span class="line">   ...:         appid_all_dict[i] = appid_dict</span><br></pre></td></tr></table></figure></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>要对Python的dictionary进行迭代分析，一定要注意其中的深拷贝问题，出现问题后，也要多往这方面考虑。</p><p>本期技术周刊到此结束。</p><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1536489838162&amp;di=52a5d7c56631ad266740914505a80a32&amp;imgtype=0&amp;src=http%3A%2F%2Ffile.elecfans.com%2Fweb1%2FM00%2F57%2FB6%2Fo4YBAFtMadCAL43RAAHzi5GNn9o475.png" alt=""></p><hr>]]></content>
    
    <summary type="html">
    
      这周让我们来看一下Python中关于赋值、浅拷贝、深拷贝的特性
    
    </summary>
    
      <category term="技术周刊" scheme="https://cloudsjhan.github.io/categories/%E6%8A%80%E6%9C%AF%E5%91%A8%E5%88%8A/"/>
    
    
      <category term="Python" scheme="https://cloudsjhan.github.io/tags/Python/"/>
    
      <category term="技术周刊" scheme="https://cloudsjhan.github.io/tags/%E6%8A%80%E6%9C%AF%E5%91%A8%E5%88%8A/"/>
    
  </entry>
  
  <entry>
    <title>golang 编译针对不同平台的可执行程序</title>
    <link href="https://cloudsjhan.github.io/2018/09/07/golang-%E7%BC%96%E8%AF%91%E9%92%88%E5%AF%B9%E4%B8%8D%E5%90%8C%E5%B9%B3%E5%8F%B0%E7%9A%84%E5%8F%AF%E6%89%A7%E8%A1%8C%E7%A8%8B%E5%BA%8F/"/>
    <id>https://cloudsjhan.github.io/2018/09/07/golang-编译针对不同平台的可执行程序/</id>
    <published>2018-09-07T07:46:32.000Z</published>
    <updated>2018-09-07T07:48:43.584Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><p><img src="https://" alt="" style="width:100%"></p><a id="more"></a><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">Golang 支持在一个平台下生成另一个平台可执行程序的交叉编译功能。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Mac下编译Linux, Windows平台的64位可执行程序：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build test.go</span><br><span class="line">CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build test.go</span><br><span class="line">Linux下编译Mac, Windows平台的64位可执行程序：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build test.go</span><br><span class="line">CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build test.go</span><br><span class="line">Windows下编译Mac, Linux平台的64位可执行程序：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SET CGO_ENABLED=0</span><br><span class="line">SET GOOS=darwin3</span><br><span class="line">SET GOARCH=amd64</span><br><span class="line">go build test.go</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SET CGO_ENABLED=0</span><br><span class="line">SET GOOS=linux</span><br><span class="line">SET GOARCH=amd64</span><br><span class="line">go build test.go</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">GOOS：目标可执行程序运行操作系统，支持 darwin，freebsd，linux，windows</span><br><span class="line">GOARCH：目标可执行程序操作系统构架，包括 386，amd64，arm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Golang version 1.5以前版本在首次交叉编译时还需要配置交叉编译环境：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CGO_ENABLED=0 GOOS=linux GOARCH=amd64 ./make.bash</span><br><span class="line">CGO_ENABLED=0 GOOS=windows GOARCH=amd64 ./make.bash</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      使用go build 编译同一套代码，在不同的平台运行
    
    </summary>
    
      <category term="golang" scheme="https://cloudsjhan.github.io/categories/golang/"/>
    
    
      <category term="golang" scheme="https://cloudsjhan.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>常用的Python小模块</title>
    <link href="https://cloudsjhan.github.io/2018/09/06/%E5%B8%B8%E7%94%A8%E7%9A%84Python%E5%B0%8F%E6%A8%A1%E5%9D%97/"/>
    <id>https://cloudsjhan.github.io/2018/09/06/常用的Python小模块/</id>
    <published>2018-09-06T08:24:41.000Z</published>
    <updated>2018-09-09T08:03:38.998Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><p><img src="https://" alt="" style="width:100%"></p><a id="more"></a><ul><li>工作或者生活中总会遇到一些常用的Python模块，为了避免重复的工作，将这些自己写过的Python模块记录下来，方便使用的时候查找。</li></ul><h3 id="Python写CSV文件，并防止中文乱码"><a href="#Python写CSV文件，并防止中文乱码" class="headerlink" title="Python写CSV文件，并防止中文乱码"></a>Python写CSV文件，并防止中文乱码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_csv</span><span class="params">(a_list,b_list)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'vm_data.csv'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(codecs.BOM_UTF8.decode())</span><br><span class="line">        writer1 = csv.writer(f,  dialect=<span class="string">'excel'</span>)</span><br><span class="line">        <span class="comment">#写CVS的标题</span></span><br><span class="line">        writer1.writerow([<span class="string">'a'</span>, <span class="string">'b'</span>])</span><br><span class="line">        <span class="comment">#将数据写入CSV文件</span></span><br><span class="line">        writer1.writerows(zip(a_list, b_list))</span><br></pre></td></tr></table></figure><h3 id="Python将数据结构转为json-并优化json字符串的结构，处理中文乱码"><a href="#Python将数据结构转为json-并优化json字符串的结构，处理中文乱码" class="headerlink" title="Python将数据结构转为json,并优化json字符串的结构，处理中文乱码"></a>Python将数据结构转为json,并优化json字符串的结构，处理中文乱码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">"appid.json"</span>, <span class="string">'w'</span>, encoding=<span class="string">'utf8'</span>, ) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(json.dumps(final, sort_keys=<span class="keyword">True</span>, indent=<span class="number">2</span>, ensure_ascii=<span class="keyword">False</span>))</span><br><span class="line"><span class="comment"># sort_keys = True: 将字典的key按照字母排序</span></span><br><span class="line"><span class="comment"># ident = 2: 优化json字符串结构，看起来更美观</span></span><br><span class="line"><span class="comment"># ensure_ascii=False: 防止json字符串中的中文乱码</span></span><br></pre></td></tr></table></figure><h3 id="使用requests包进行网络请求（以post为例）"><a href="#使用requests包进行网络请求（以post为例）" class="headerlink" title="使用requests包进行网络请求（以post为例）"></a>使用requests包进行网络请求（以post为例）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def  get_data(url):</span><br><span class="line">    final = &#123;&#125;</span><br><span class="line">    url = &quot;http://xxxx.com&quot;</span><br><span class="line">    request_body = &#123;</span><br><span class="line">        &apos;access_token&apos;: access_token,</span><br><span class="line">        &apos;request_body&apos;: &#123;&quot;params1&quot;: param1, &apos;params2&apos;: param2&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    headers = &#123;</span><br><span class="line">        &apos;Content-type&apos;: &apos;application/json&apos;</span><br><span class="line">    &#125;</span><br><span class="line">    data = requests.post(url, headers=headers, data=json.dumps(request_body))</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      常用的Python模块，即查即用
    
    </summary>
    
      <category term="python" scheme="https://cloudsjhan.github.io/categories/python/"/>
    
    
      <category term="Python" scheme="https://cloudsjhan.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Mysql无法连接[MySql Host is blocked because of many connection errors]</title>
    <link href="https://cloudsjhan.github.io/2018/09/01/Mysql%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5/"/>
    <id>https://cloudsjhan.github.io/2018/09/01/Mysql无法连接/</id>
    <published>2018-09-01T05:20:54.000Z</published>
    <updated>2018-09-01T05:38:58.657Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><a id="more"></a><ul><li><p>测试环境，发现数据库（MySQL数据库）无法登录，报错如下：</p><p>Host is blocked because of many connection errors; unblock with ‘mysqladmin flush-hosts’</p></li><li><p>解决方案：使用mysqladmin flush-hosts 命令清理一下hosts文件（不知道mysqladmin在哪个目录下可以使用命令查找：whereis mysqladmin）；</p></li><li><p>登录到MySQL数据库中，mysql -uroot -h host -p</p></li><li><p>执行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqladmin <span class="keyword">flush</span>-<span class="keyword">hosts</span></span><br></pre></td></tr></table></figure><p>问题解决。</p></li></ul><hr>]]></content>
    
    <summary type="html">
    
      mysql 出现[MySql Host is blocked because of many connection errors]的错误
    
    </summary>
    
      <category term="MySQL" scheme="https://cloudsjhan.github.io/categories/MySQL/"/>
    
    
      <category term="mysql" scheme="https://cloudsjhan.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>mysql 开启远程连接</title>
    <link href="https://cloudsjhan.github.io/2018/08/29/mysql-%E5%BC%80%E5%90%AF%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/"/>
    <id>https://cloudsjhan.github.io/2018/08/29/mysql-开启远程连接/</id>
    <published>2018-08-29T03:17:20.000Z</published>
    <updated>2018-09-01T05:35:43.913Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><a id="more"></a><ul><li>背景： 建站的时候会出现数据库和网站是不同的ip，就需要开启MySQL的远程连接服务，但是MySQL由于安全原因，默认设置是不允许远程只能本地连接，要开启远程连接就需要修改某些配置文件。</li></ul><h3 id="按照下面的步骤，开启MySQL的远程连接"><a href="#按照下面的步骤，开启MySQL的远程连接" class="headerlink" title="按照下面的步骤，开启MySQL的远程连接"></a>按照下面的步骤，开启MySQL的远程连接</h3><ul><li><p>进入数据库cmd</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -h host -p</span><br><span class="line">Enter password:***</span><br></pre></td></tr></table></figure></li><li><p>连接到默认mysql数据库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">show databases;</span><br><span class="line"></span><br><span class="line">use mysql;</span><br></pre></td></tr></table></figure></li><li><p>配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Grant all privileges on *.* to 'root'@'host' identified by 'password' with grant option;</span><br></pre></td></tr></table></figure><p>host表示你远程连接数据库设备的ip地址（如果你想让所有机器都能远程连接，host改为‘%’，<strong>不推荐这样使用</strong>），password表示MySQL的root用户密码</p></li><li><p>刷新or重启MySQL</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> flush privileges;</span></span><br></pre></td></tr></table></figure></li><li><p>最后非常重要的一点</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/vim /etc/mysql/my.cnf</span><br><span class="line">屏蔽bing-server 127.0.0.0</span><br><span class="line"><span class="meta">#</span><span class="bash">bing-server 127.0.0.0</span></span><br></pre></td></tr></table></figure></li><li><p>完成，可以远程连接你的数据库了</p></li></ul><hr>]]></content>
    
    <summary type="html">
    
      不管是在测试还是开发中，MySQL经常需要开启远程连接功能
    
    </summary>
    
      <category term="MySQL" scheme="https://cloudsjhan.github.io/categories/MySQL/"/>
    
    
      <category term="mysql" scheme="https://cloudsjhan.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>golang factory design 引发的一系列思考</title>
    <link href="https://cloudsjhan.github.io/2018/08/29/golang-factory-design-%E5%BC%95%E5%8F%91%E7%9A%84%E4%B8%80%E7%B3%BB%E5%88%97%E6%80%9D%E8%80%83/"/>
    <id>https://cloudsjhan.github.io/2018/08/29/golang-factory-design-引发的一系列思考/</id>
    <published>2018-08-29T02:21:56.000Z</published>
    <updated>2018-09-01T07:18:05.039Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><a id="more"></a><ul><li>写在前面，突然萌生一个念头，做一个技术周刊系列，将每周工作或者生活当中遇到的比较有趣的问题记录下来，一来时总结一下，二来是为了以后退役了，可以回顾自己的技术生涯。</li><li>没有什么意外的话，我会每周六晚更新。</li><li>最近在整合三家公有云（AWS，ali, ucloud）的接口，考虑到代码复用的问题，于是开始考虑使用一种设计模式，这种场景下，最合适的便是工厂模式，将三家厂商的公有接口放入工厂方法中，然后对每一家new一个实例即可，以后再有新的厂商加入，改动的代码也不会太多。但是设计模式这种东西天然适合于java，对于golang这种比较新的语言来说，实现起来相对没有那么容易，对于刚接触golang的我来说，对一些golang的特性上并不是很熟悉，所以在此期间遇到一些不解的问题，写出来分享一下。</li></ul><h3 id="首先，什么是工厂模式"><a href="#首先，什么是工厂模式" class="headerlink" title="首先，什么是工厂模式"></a>首先，什么是工厂模式</h3><ul><li>简单工厂模式就是通过传递不同的参数，生成不同的实例，工厂方法为每一个product提供一个工程类，通过不同的工厂创建不同的实例。</li></ul><h3 id="典型工厂模式的实现方式（即典型oop实现方式）"><a href="#典型工厂模式的实现方式（即典型oop实现方式）" class="headerlink" title="典型工厂模式的实现方式（即典型oop实现方式）"></a>典型工厂模式的实现方式（即典型oop实现方式）</h3><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProviderModel</span>&#123;</span></span><br><span class="line">    provider <span class="built_in">string</span></span><br><span class="line">        <span class="function">func <span class="title">factory</span><span class="params">(providerName <span class="built_in">string</span>, test <span class="built_in">string</span>)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> providerName == <span class="string">"AWS"</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> AWS(test)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> providerName == <span class="string">"Ali"</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Ali(test)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class AWS extends ProviderModel &#123;</span><br><span class="line">    func construct(test <span class="built_in">string</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.test = test</span><br><span class="line">    &#125;</span><br><span class="line">    func doRequest()&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">awsmodel := ProviderModel::factory(<span class="string">"AWS"</span>)</span><br><span class="line">awsmodel.doRequest()</span><br><span class="line"></span><br><span class="line">alimodel := ProviderModel ::factory(<span class="string">"Ali"</span>)  </span><br><span class="line">alimodel.doRequest()</span><br></pre></td></tr></table></figure></li></ul><h3 id="golang实现工厂模式存在的问题"><a href="#golang实现工厂模式存在的问题" class="headerlink" title="golang实现工厂模式存在的问题"></a>golang实现工厂模式存在的问题</h3><ul><li><p>golang的特性中并没有像java一样的继承和重载，所以我们要利用golang存在的特性，透过工厂模式的表面透析其本质。</p></li><li><p>我们看一下工厂模式就知道，所谓工厂其实就是定义了一些需要去实现的方法，golang的interface正是可以做到。于是先到Google上搜了一段golang实现的工厂模式的代码。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Operater <span class="keyword">interface</span> &#123;</span><br><span class="line">    Operate(<span class="keyword">int</span>, <span class="keyword">int</span>) <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> AddOperate <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *AddOperate)</span> <span class="title">Operate</span><span class="params">(rhs <span class="keyword">int</span>, lhs <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> rhs + lhs</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MultipleOperate <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MultipleOperate)</span> <span class="title">Operate</span><span class="params">(rhs <span class="keyword">int</span>, lhs <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> rhs * lhs</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> OperateFactory <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewOperateFactory</span><span class="params">()</span> *<span class="title">OperateFactory</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;OperateFactory&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *OperateFactory)</span> <span class="title">CreateOperate</span><span class="params">(operatename <span class="keyword">string</span>)</span> <span class="title">Operater</span></span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> operatename &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"+"</span>:</span><br><span class="line">        <span class="keyword">return</span> &amp;AddOperate&#123;&#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"*"</span>:</span><br><span class="line">        <span class="keyword">return</span> &amp;MultipleOperate&#123;&#125;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">panic</span>(<span class="string">"无效运算符号"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    Operator := NewOperateFactory().CreateOperate(<span class="string">"+"</span>)</span><br><span class="line">    fmt.Printf(<span class="string">"add result is %d\n"</span>, Operator.Operate(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码看起来没什么问题，后来又看到一种实现方式，<a href="https://www.jianshu.com/p/9de2cd9bf8f0" target="_blank" rel="noopener">来自这篇博客</a>，代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> site <span class="keyword">interface</span> &#123;</span><br><span class="line">    fetch()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> siteModel <span class="keyword">struct</span> &#123;</span><br><span class="line">    URL <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> site1 <span class="keyword">struct</span> &#123;</span><br><span class="line">    siteModel</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s site1)</span> <span class="title">fetch</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"site1 fetch data"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">factory</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">site</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> s == <span class="string">"site"</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> site1&#123;</span><br><span class="line">            siteModel&#123;URL: <span class="string">"http://www.xxxx.com"</span>&#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    s := factory(<span class="string">"site"</span>)</span><br><span class="line">    s.fetch()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码初看上去跟第一个实现没什么不一样，但是当我详细阅读代码时，下面的这句代码着实把我弄晕了</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">factory</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">site</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> s == <span class="string">"site"</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> site1&#123;</span><br><span class="line">            siteModel&#123;URL: <span class="string">"http://www.xxxx.com"</span>&#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>factory函数的返回值定义明明是一个interface, 但是在return的时候，却返回一个struct，查阅很多资料后，<a href="http://legendtkl.com/2017/06/12/understanding-golang-interface/" target="_blank" rel="noopener">这篇博客</a>帮了我的大忙，其中对interface的解释有这么一句话：<strong>在 Golang 中，interface 是一组 method 的集合，是 duck-type programming 的一种体现。不关心属性（数据），只关心行为（方法）。具体使用中你可以自定义自己的 struct，并提供特定的 interface 里面的 method 就可以把它当成 interface 来使用。</strong>之后又详细看了几遍这篇博文，犹如醍醐灌顶，对golanginterface的理解更深了一层。读完这篇后再去实现工厂模式，或者再去写golang的代码，对interface的使用就会更自如一些。</p></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><p>本期技术周刊主要由golang工厂模式的讨论引起，之后又涉及到golang interface特性的讨论，对以后使用golang编写更加复杂的代码很有帮助。</p></li><li><p>本期结束，欲知后事如何，且看下周分解。</p><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1535796309427&amp;di=a9db53cf71b492f4dd06a57b5ec65229&amp;imgtype=jpg&amp;src=http%3A%2F%2Fimg4.imgtn.bdimg.com%2Fit%2Fu%3D2705270329%2C1518266531%26fm%3D214%26gp%3D0.jpg" alt=""></p></li></ul><hr>]]></content>
    
    <summary type="html">
    
      工作需要，看了一下golang如何实现工厂模式，遇到一些难以理解的知识点，查资料，写demo验证后，记录下来以供参考
    
    </summary>
    
      <category term="技术周刊" scheme="https://cloudsjhan.github.io/categories/%E6%8A%80%E6%9C%AF%E5%91%A8%E5%88%8A/"/>
    
    
      <category term="golang design pattern go-interface" scheme="https://cloudsjhan.github.io/tags/golang-design-pattern-go-interface/"/>
    
  </entry>
  
  <entry>
    <title>golang中的工厂模式</title>
    <link href="https://cloudsjhan.github.io/2018/08/27/golang%E4%B8%AD%E7%9A%84%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F-md/"/>
    <id>https://cloudsjhan.github.io/2018/08/27/golang中的工厂模式-md/</id>
    <published>2018-08-27T10:53:24.000Z</published>
    <updated>2018-08-27T11:18:09.576Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><p><img src="https://" alt="" style="width:100%"></p><a id="more"></a><ul><li>研究go的设计模式，必须了解go的struct和interface，若不熟悉，先阅读以下内容</li><li><a href="http://blog.csdn.net/wangshubo1989/article/details/70040022" target="_blank" rel="noopener">go语言的struct</a></li><li><a href="http://blog.csdn.net/wangshubo1989/article/details/70053086" target="_blank" rel="noopener">go语言的interface</a></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">* 简单工厂模式</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Operater <span class="keyword">interface</span> &#123;</span><br><span class="line">    Operate(<span class="keyword">int</span>, <span class="keyword">int</span>) <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> AddOperate <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *AddOperate)</span> <span class="title">Operate</span><span class="params">(rhs <span class="keyword">int</span>, lhs <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> rhs + lhs</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MultipleOperate <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MultipleOperate)</span> <span class="title">Operate</span><span class="params">(rhs <span class="keyword">int</span>, lhs <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> rhs * lhs</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> OperateFactory <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewOperateFactory</span><span class="params">()</span> *<span class="title">OperateFactory</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;OperateFactory&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *OperateFactory)</span> <span class="title">CreateOperate</span><span class="params">(operatename <span class="keyword">string</span>)</span> <span class="title">Operater</span></span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> operatename &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"+"</span>:</span><br><span class="line">        <span class="keyword">return</span> &amp;AddOperate&#123;&#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"*"</span>:</span><br><span class="line">        <span class="keyword">return</span> &amp;MultipleOperate&#123;&#125;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">panic</span>(<span class="string">"无效运算符号"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    Operator := NewOperateFactory().CreateOperate(<span class="string">"+"</span>)</span><br><span class="line">    fmt.Printf(<span class="string">"add result is %d\n"</span>, Operator.Operate(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">* 工厂方法</span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Operation <span class="keyword">struct</span> &#123;</span><br><span class="line">    a <span class="keyword">float64</span></span><br><span class="line">    b <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> OperationI <span class="keyword">interface</span> &#123;</span><br><span class="line">    GetResult() <span class="keyword">float64</span></span><br><span class="line">    SetA(<span class="keyword">float64</span>)</span><br><span class="line">    SetB(<span class="keyword">float64</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(op *Operation)</span> <span class="title">SetA</span><span class="params">(a <span class="keyword">float64</span>)</span></span> &#123;</span><br><span class="line">    op.a = a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(op *Operation)</span> <span class="title">SetB</span><span class="params">(b <span class="keyword">float64</span>)</span></span> &#123;</span><br><span class="line">    op.b = b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> AddOperation <span class="keyword">struct</span> &#123;</span><br><span class="line">    Operation</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *AddOperation)</span> <span class="title">GetResult</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> this.a + this.b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> SubOperation <span class="keyword">struct</span> &#123;</span><br><span class="line">    Operation</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *SubOperation)</span> <span class="title">GetResult</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> this.a - this.b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MulOperation <span class="keyword">struct</span> &#123;</span><br><span class="line">    Operation</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MulOperation)</span> <span class="title">GetResult</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> this.a * this.b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> DivOperation <span class="keyword">struct</span> &#123;</span><br><span class="line">    Operation</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *DivOperation)</span> <span class="title">GetResult</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> this.a / this.b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> IFactory <span class="keyword">interface</span> &#123;</span><br><span class="line">    CreateOperation() Operation</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> AddFactory <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *AddFactory)</span> <span class="title">CreateOperation</span><span class="params">()</span> <span class="title">OperationI</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;(AddOperation&#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> SubFactory <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *SubFactory)</span> <span class="title">CreateOperation</span><span class="params">()</span> <span class="title">OperationI</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;(SubOperation&#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MulFactory <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MulFactory)</span> <span class="title">CreateOperation</span><span class="params">()</span> <span class="title">OperationI</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;(MulOperation&#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> DivFactory <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *DivFactory)</span> <span class="title">CreateOperation</span><span class="params">()</span> <span class="title">OperationI</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;(DivOperation&#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fac := &amp;(AddFactory&#123;&#125;)</span><br><span class="line">    oper := fac.CreateOperation()</span><br><span class="line">    oper.SetA(<span class="number">1</span>)</span><br><span class="line">    oper.SetB(<span class="number">2</span>)</span><br><span class="line">    fmt.Println(oper.GetResult())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">* 抽象工厂方法</span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> GirlFriend <span class="keyword">struct</span> &#123;</span><br><span class="line">    nationality <span class="keyword">string</span></span><br><span class="line">    eyesColor   <span class="keyword">string</span></span><br><span class="line">    language    <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> AbstractFactory <span class="keyword">interface</span> &#123;</span><br><span class="line">    CreateMyLove() GirlFriend</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> IndianGirlFriendFactory <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> KoreanGirlFriendFactory <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a IndianGirlFriendFactory)</span> <span class="title">CreateMyLove</span><span class="params">()</span> <span class="title">GirlFriend</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> GirlFriend&#123;<span class="string">"Indian"</span>, <span class="string">"Black"</span>, <span class="string">"Hindi"</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a KoreanGirlFriendFactory)</span> <span class="title">CreateMyLove</span><span class="params">()</span> <span class="title">GirlFriend</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> GirlFriend&#123;<span class="string">"Korean"</span>, <span class="string">"Brown"</span>, <span class="string">"Korean"</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getGirlFriend</span><span class="params">(typeGf <span class="keyword">string</span>)</span> <span class="title">GirlFriend</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> gffact AbstractFactory</span><br><span class="line">    <span class="keyword">switch</span> typeGf &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"Indian"</span>:</span><br><span class="line">        gffact = IndianGirlFriendFactory&#123;&#125;</span><br><span class="line">        <span class="keyword">return</span> gffact.CreateMyLove()</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"Korean"</span>:</span><br><span class="line">        gffact = KoreanGirlFriendFactory&#123;&#125;</span><br><span class="line">        <span class="keyword">return</span> gffact.CreateMyLove()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> GirlFriend&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    a := getGirlFriend(<span class="string">"Indian"</span>)</span><br><span class="line"></span><br><span class="line">    fmt.Println(a.eyesColor)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://&quot; alt=&quot;&quot; style=&quot;width:100%&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="golang" scheme="https://cloudsjhan.github.io/categories/golang/"/>
    
    
      <category term="golang" scheme="https://cloudsjhan.github.io/tags/golang/"/>
    
      <category term="设计模式" scheme="https://cloudsjhan.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Mac os 环境配置ruby on rails 及其Hello world</title>
    <link href="https://cloudsjhan.github.io/2018/08/26/Mac-os-%E9%85%8D%E7%BD%AE-ruby-on-rails-md/"/>
    <id>https://cloudsjhan.github.io/2018/08/26/Mac-os-配置-ruby-on-rails-md/</id>
    <published>2018-08-26T15:20:33.000Z</published>
    <updated>2018-08-27T15:39:24.975Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><a id="more"></a><p>今天在Mac OS环境中倒腾ruby on rails，遇到一些坑并排坑后总结一个搭建过程，供大家参考。</p><h3 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h3><ul><li><p>本着IT届能用最新的就不用前面的版本的宗旨，在进行之前必须将你的Mac升级到最新的macOS High Sierra</p></li><li><p>安装 XCode Command Line Tools</p></li><li><p>配置Git</p></li><li><p>安装Homebrew</p></li><li><p>安装GPG</p></li><li><p>安装RVM</p></li><li><p>安装ruby</p></li><li><p>升级RubyGems</p></li><li><p>安装rails</p></li><li><p>基本MVC探究之Hello world</p><h3 id="Ruby-On-rails-for-mac-os-High-Sierra"><a href="#Ruby-On-rails-for-mac-os-High-Sierra" class="headerlink" title="Ruby On rails for mac os High Sierra"></a>Ruby On rails for mac os High Sierra</h3><ul><li><p>Mac OS是自带ruby的，但是这些ruby的版本都不是最新的，我们也不要用这些过时的版本</p></li><li><p>首先，升级你的Mac OS到10.13</p></li><li><p>查看是否安装xcode command line tool：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span>:xcode-select -p</span><br><span class="line">如果你看到：</span><br><span class="line">xcode-select: error: unable to get active developer directory...</span><br><span class="line">说明你没有安装xcode command line tool,需要按照下面的步骤安装。</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">如果你看到：</span><br><span class="line"><span class="meta">$</span>:/Applications/Xcode.app/Contents/Developer 或者/Library/Developer/CommandLineTools</span><br><span class="line">恭喜你，xcode command line tool你已经安装好了</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">But，如果你很不幸运地看到了这句话：</span><br><span class="line">$: /Applications/Apple Dev Tools/Xcode.app/Contents/Developer</span><br><span class="line">那么你就要卸掉xcode重新安装了，具体原因看</span><br></pre></td></tr></table></figure><p><a href="http://rvm.io/support/faq#can-i-use-a-path-with-spaces" target="_blank" rel="noopener">这里</a></p></li><li><p>安装xcode</p></li><li><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcode-select --install</span><br></pre></td></tr></table></figure></li><li><p>一路确认之后，就可以安好xcode，但是如果你的网速不好，等待时间过长，你可以从<a href="https://developer.apple.com/downloads/more" target="_blank" rel="noopener">这里</a>输入你的APPID下载。</p></li><li><p>确认一下是否安好</p></li><li><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> xcode-select -p</span><br><span class="line">/Library/Developer/CommandLineTools</span><br></pre></td></tr></table></figure></li></ul><h3 id="配置Git"><a href="#配置Git" class="headerlink" title="配置Git"></a>配置Git</h3><ul><li><p>在安装ruby on rails 之前，你应该配置你的Git。Git在Mac OS上使自动安装的软件</p></li><li><p>检查Git版本并确认已经安装让你放心</p></li><li><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git version</span><br><span class="line">git version 2.4.9 (Apple Git-60)</span><br></pre></td></tr></table></figure></li><li><p>配置Git之前，你应该到<a href="https://help.github.com/articles/signing-up-for-a-new-github-account/" target="_blank" rel="noopener">GitHub</a>上注册你的账号并记住密码和邮箱。并使用下面的命令配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git config -l --global</span><br><span class="line">fatal: unable to read config file '/Users/.../.gitconfig': No such file or directory</span><br><span class="line"><span class="meta">$</span> git config --global user.name "Your Real Name"</span><br><span class="line"><span class="meta">$</span> git config --global user.email me@example.com</span><br><span class="line"><span class="meta">$</span> git config -l --global</span><br><span class="line">user.name=Your Real Name</span><br><span class="line">user.email=me@example.com</span><br></pre></td></tr></table></figure></li><li><p>Git配置完成，在你想用Git的时候，它就会蹦出来了。</p></li></ul><h3 id="安装Homebrow"><a href="#安装Homebrow" class="headerlink" title="安装Homebrow"></a>安装Homebrow</h3><ul><li><p>检查homebrow是否已经安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> brew</span><br><span class="line">-bash: brew: command not found</span><br></pre></td></tr></table></figure><p>RVM需要<a href="http://brew.sh/" target="_blank" rel="noopener">Homebrow</a>,其实一个Mac OS额安装包管理工具，用来下载一些软件，类似于Ubuntu的apt-get和centos的yum install.为避免安装RM出现问题，我们必须安装homebrow：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"</span><br></pre></td></tr></table></figure><p>安装过程中可能会出现一些warning并让你输入密码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">WARNING: Improper use of the sudo command could lead to data loss...</span><br><span class="line">To proceed, enter your password...</span><br><span class="line">Password:</span><br></pre></td></tr></table></figure><p>尽管输入密码，忽略warning。</p><p>我们这里是使用了Mac OS内置的ruby来安装homebrow。</p></li></ul><h3 id="安装GPG"><a href="#安装GPG" class="headerlink" title="安装GPG"></a>安装GPG</h3><ul><li><p><a href="https://en.wikipedia.org/wiki/GNU_Privacy_Guard" target="_blank" rel="noopener">gpg</a>是一个用来检查RVM下载包的安全性的程序，我们使用homebrew来安装gpg:</p></li><li><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> brew install gpg</span><br></pre></td></tr></table></figure></li><li><p>gpg安装之后，为RVM安装key:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> command curl -sSL https://rvm.io/mpapis.asc | gpg --import -</span><br></pre></td></tr></table></figure></li></ul><h3 id="安装RVM"><a href="#安装RVM" class="headerlink" title="安装RVM"></a>安装RVM</h3><ul><li><p><a href="https://rvm.io/" target="_blank" rel="noopener">RVM</a>，是Ruby version manager的简写，用来安装ruby或者管理rails版本。<a href="https://rvm.io/rvm/install/" target="_blank" rel="noopener">这个网站</a>详细说明了安装ruby的方式，但是我们有一种最简便的方式：</p></li><li><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> \curl -L https://get.rvm.io | bash -s stable</span><br></pre></td></tr></table></figure><p>“curl”前面的“\”用来避免ruby版本的冲突，不要漏掉。</p></li><li><p>安装过程中你可能会看到</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir: /etc/openssl: Permission denied</span><br><span class="line">mkdir -p "/etc/openssl" failed, retrying with sudo</span><br><span class="line">your password required for 'mkdir -p /etc/openssl':</span><br></pre></td></tr></table></figure><p>请输入密码并继续。</p></li><li><p>如果你已经安装过RVM，使用下面的命令update：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> rvm get stable --autolibs=enable</span><br></pre></td></tr></table></figure></li><li><p>重启terminal窗口或者使用：使RVM生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> source ~/.rvm/scripts/rvm</span><br></pre></td></tr></table></figure></li></ul><h3 id="安装ruby"><a href="#安装ruby" class="headerlink" title="安装ruby"></a>安装ruby</h3><ul><li><p>在安装RVM之后，我们安装最新版本的ruby。ruby 2.5.1是写此博客时当前最新的ruby版本，还请查看ruby<a href="$ source ~/.rvm/scripts/rvm">官网</a>查看最新版本的ruby。必须指定ruby的版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> rvm install ruby-2.5.1</span><br></pre></td></tr></table></figure><p>安装后检查是否安装成功：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> ruby -v</span><br><span class="line">ruby 2.5.1...</span><br></pre></td></tr></table></figure></li></ul><h3 id="升级rubyGemset"><a href="#升级rubyGemset" class="headerlink" title="升级rubyGemset"></a>升级rubyGemset</h3><ul><li><p><a href="https://rubygems.org/gems/rubygems-update" target="_blank" rel="noopener">RubyGems</a>是一个ruby的包管理工具，用来安装ruby的工具或者额外功能的包。</p></li><li><p>查看gem版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> gem -v</span><br></pre></td></tr></table></figure><p>将gem升级到最新版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> gem update --system</span><br></pre></td></tr></table></figure></li><li><p>显示RVM gemsets的最初两个设置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> rvm gemset list</span><br><span class="line">gemsets for ruby-2.5.0</span><br><span class="line">=&gt; (default)</span><br><span class="line">   global</span><br></pre></td></tr></table></figure><p>一般使用global：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> rvm gemset use global</span><br></pre></td></tr></table></figure></li><li><p>安装bundle,<a href="https://rubygems.org/gems/bundler" target="_blank" rel="noopener">Bundle</a>是一个管理gem的必须的工具</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> gem install Bundler</span><br></pre></td></tr></table></figure></li><li><p>安装Nokogiri，<a href="http://nokogiri.org/" target="_blank" rel="noopener">Nokogiri</a>需要编译成指定的系统，在上面的配置下，号称最难安装的包，也将安装好</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gem install nokogiri</span><br></pre></td></tr></table></figure><p>如果你真的不幸运在安装时遇到问题，Stack <a href="http://stackoverflow.com/questions/tagged/nokogiri" target="_blank" rel="noopener">Overflow</a>能帮到你。</p></li></ul><h3 id="安装rails"><a href="#安装rails" class="headerlink" title="安装rails"></a>安装rails</h3><ul><li><p><a href="http://rubygems.org/gems/rails" target="_blank" rel="noopener">这里</a>是ruby On rail最新的版本，5.1是最新稳定版本，5.2是release版本，我们安装5.1.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> gem install rails --version=5.1</span><br></pre></td></tr></table></figure><p>如果你喜欢尝鲜，可以使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> gem install rails --pre</span><br></pre></td></tr></table></figure><p>安装release版本。</p><p>检查一下rails是否装好：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> rails -v</span><br><span class="line">Rails 5.2.0</span><br></pre></td></tr></table></figure></li><li><p>到此为止，ruby on rails 以及其环境配置都已妥当，可以开始你的ruby之旅了。</p></li></ul><h3 id="ruby-on-rails-的Hello-world"><a href="#ruby-on-rails-的Hello-world" class="headerlink" title="ruby on rails 的Hello world"></a>ruby on rails 的Hello world</h3><ul><li><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cd /</span><br><span class="line"><span class="meta">$</span> mkdir worlspace</span><br><span class="line"><span class="meta">$</span> cd workspace</span><br><span class="line"><span class="meta">$</span> rails _5.1.0_ new hello_app</span><br><span class="line"><span class="meta">$</span> cd hello_app</span><br><span class="line"><span class="meta">$</span> rails server</span><br></pre></td></tr></table></figure><p>将<a href="http://localhost:3000输入浏览器，就能看到ruby" target="_blank" rel="noopener">http://localhost:3000输入浏览器，就能看到ruby</a> on rails的欢迎界面。</p></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ruby" scheme="https://cloudsjhan.github.io/categories/ruby/"/>
    
    
      <category term="ruby on rails" scheme="https://cloudsjhan.github.io/tags/ruby-on-rails/"/>
    
      <category term="web" scheme="https://cloudsjhan.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>go实现UNIX command</title>
    <link href="https://cloudsjhan.github.io/2018/08/22/go-unix-cmd-md/"/>
    <id>https://cloudsjhan.github.io/2018/08/22/go-unix-cmd-md/</id>
    <published>2018-08-22T11:27:41.000Z</published>
    <updated>2018-09-01T05:38:25.962Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"bufio"</span></span><br><span class="line"><span class="string">"errors"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"><span class="string">"os/exec"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">reader := bufio.NewReader(os.Stdin)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">fmt.Print(<span class="string">"&gt; "</span>)</span><br><span class="line"><span class="comment">// 读取键盘的输入.</span></span><br><span class="line">input, err := reader.ReadString(<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Fprintln(os.Stderr, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行并解析command.</span></span><br><span class="line">err = execInput(input)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Fprintln(os.Stderr, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果cd命令没有路径的话，就报下面的错误</span></span><br><span class="line"><span class="keyword">var</span> ErrNoPath = errors.New(<span class="string">"path required"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">execInput</span><span class="params">(input <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// 移除换行符.</span></span><br><span class="line">input = strings.TrimSuffix(input, <span class="string">"\n"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将输入分割成参数.</span></span><br><span class="line">args := strings.Split(input, <span class="string">" "</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对cd命令的情况进行区分.</span></span><br><span class="line"><span class="keyword">switch</span> args[<span class="number">0</span>] &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"cd"</span>:</span><br><span class="line"><span class="comment">// 暂时不支持cd加空格进入home目录.</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(args) &lt; <span class="number">2</span> &#123;</span><br><span class="line"><span class="keyword">return</span> ErrNoPath</span><br><span class="line">&#125;</span><br><span class="line">err := os.Chdir(args[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Stop further processing.</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">"exit"</span>:</span><br><span class="line">os.Exit(<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Prepare the command to execute.</span></span><br><span class="line">cmd := exec.Command(args[<span class="number">0</span>], args[<span class="number">1</span>:]...)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set the correct output device.</span></span><br><span class="line">cmd.Stderr = os.Stderr</span><br><span class="line">cmd.Stdout = os.Stdout</span><br><span class="line"></span><br><span class="line"><span class="comment">// Execute the command and save it's output.</span></span><br><span class="line">err := cmd.Run()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//执行并测试</span><br><span class="line">go run main.go</span><br></pre></td></tr></table></figure><p>暂时不支持tab键自动补全命令，只是提供一种简单的思路。</p><hr>]]></content>
    
    <summary type="html">
    
      使用go实现UNIX环境下的命令行工具
    
    </summary>
    
      <category term="golang" scheme="https://cloudsjhan.github.io/categories/golang/"/>
    
    
      <category term="go" scheme="https://cloudsjhan.github.io/tags/go/"/>
    
      <category term="unix" scheme="https://cloudsjhan.github.io/tags/unix/"/>
    
  </entry>
  
  <entry>
    <title>iterm2 突然报很奇怪的错误-Error  No user exists for uid 501</title>
    <link href="https://cloudsjhan.github.io/2018/08/21/iterm2-strange-err-md-md/"/>
    <id>https://cloudsjhan.github.io/2018/08/21/iterm2-strange-err-md-md/</id>
    <published>2018-08-21T15:18:21.000Z</published>
    <updated>2018-08-21T15:33:12.206Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><p><img src="http://www.qqyou.com/view.php?pic=http://p1.qqyou.com/pic/UploadPic/2014-7/9/2014070910421928610.jpg" alt="" style="width:100%"></p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">No user exists <span class="keyword">for</span> uid <span class="number">501</span></span><br><span class="line">fatal: Could <span class="keyword">not</span> read <span class="keyword">from</span> remote repository.</span><br><span class="line">Please make sure you have the correct access rightsand the repository exists.</span><br></pre></td></tr></table></figure><ul><li>上午还好好的，刚刚连接GitHub报这个错误，排查后了解到是iterm2的神坑。</li><li>重启iterm终端就好 系统有更新的话 需要重启终端 更新。</li></ul><hr>]]></content>
    
    <summary type="html">
    
      iterm2 突然报很奇怪的错误-Error No user exists for uid 501
    
    </summary>
    
      <category term="生活中奇怪的坑" scheme="https://cloudsjhan.github.io/categories/%E7%94%9F%E6%B4%BB%E4%B8%AD%E5%A5%87%E6%80%AA%E7%9A%84%E5%9D%91/"/>
    
    
      <category term="日常的坑系列" scheme="https://cloudsjhan.github.io/tags/%E6%97%A5%E5%B8%B8%E7%9A%84%E5%9D%91%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>golang中interface的通用设计方法</title>
    <link href="https://cloudsjhan.github.io/2018/08/21/golang%E9%80%9A%E7%94%A8%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95/"/>
    <id>https://cloudsjhan.github.io/2018/08/21/golang通用接口设计方法/</id>
    <published>2018-08-21T14:18:58.000Z</published>
    <updated>2018-08-21T15:10:30.131Z</updated>
    
    <content type="html"><![CDATA[<p class="description">golang中接口设计的通用方法</p><a id="more"></a><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 接口定义</span><br><span class="line"><span class="keyword">type</span> XxxManager <span class="keyword">interface</span> &#123;</span><br><span class="line">    Create(args argsType) (*XxxStruct, error)</span><br><span class="line">    Get(args argsType) (**XxxStruct, error)</span><br><span class="line">    Update(args argsType) (*XxxStruct, error)</span><br><span class="line">    Delete(name <span class="keyword">string</span>, options *DeleleOptions) error</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">2.</span> 结构体定义 </span><br><span class="line"><span class="keyword">type</span> XxxManagerImpl <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="keyword">string</span></span><br><span class="line">    Namespace <span class="keyword">string</span></span><br><span class="line">    kubeCli *kubernetes.Clientset</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">3</span>，构造函数</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewXxxManagerImpl</span> <span class="params">(namespace, name <span class="keyword">string</span>, kubeCli *kubernetes.Clientset)</span> <span class="title">XxxManager</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;XxxManagerImpl&#123;</span><br><span class="line">        Name name,</span><br><span class="line">        Namespace namespace,</span><br><span class="line">        kubeCli: kubeCli,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">4.</span> 方法具体实现</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(xm *XxxManagerImpl)</span> <span class="title">Create</span><span class="params">(args argsType)</span> <span class="params">(*XxxStruct, error)</span></span> &#123;</span><br><span class="line">    <span class="comment">//具体的方法实现</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>golang通用接口设计</strong></p><p>根据以上设计cdosapi封装接口：</p>]]></content>
    
    <summary type="html">
    
      golang中interface的通用设计方法
    
    </summary>
    
      <category term="golang" scheme="https://cloudsjhan.github.io/categories/golang/"/>
    
    
      <category term="golang" scheme="https://cloudsjhan.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>python3中遇到&#39;TypeError Unicode-objects must be encoded before hashing&#39;</title>
    <link href="https://cloudsjhan.github.io/2018/08/20/python-md5-err-md/"/>
    <id>https://cloudsjhan.github.io/2018/08/20/python-md5-err-md/</id>
    <published>2018-08-20T14:18:58.000Z</published>
    <updated>2018-08-20T14:35:45.240Z</updated>
    
    <content type="html"><![CDATA[<p class="description">Python3中进行MD5加密，遇到编码问题</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlencode, quote_plus</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">verfy_ac</span><span class="params">(private_key)</span>:</span></span><br><span class="line"></span><br><span class="line">    item = &#123;</span><br><span class="line">     <span class="string">"Action"</span>     :  <span class="string">"CreateUHostInstance"</span>,</span><br><span class="line">     <span class="string">"CPU"</span>        :  <span class="number">2</span>,</span><br><span class="line">     <span class="string">"ChargeType"</span> :  <span class="string">"Month"</span>,</span><br><span class="line">     <span class="string">"DiskSpace"</span>  :  <span class="number">10</span>,</span><br><span class="line">     <span class="string">"ImageId"</span>    :  <span class="string">"f43736e1-65a5-4bea-ad2e-8a46e18883c2"</span>,</span><br><span class="line">     <span class="string">"LoginMode"</span>  :  <span class="string">"Password"</span>,</span><br><span class="line">     <span class="string">"Memory"</span>     :  <span class="number">2048</span>,</span><br><span class="line">     <span class="string">"Name"</span>       :  <span class="string">"Host01"</span>,</span><br><span class="line">     <span class="string">"Password"</span>   :  <span class="string">"VUNsb3VkLmNu"</span>,</span><br><span class="line">     <span class="string">"PublicKey"</span>  :  <span class="string">"ucloudsomeone%40example.com1296235120854146120"</span>,</span><br><span class="line">     <span class="string">"Quantity"</span>   :  <span class="number">1</span>,</span><br><span class="line">     <span class="string">"Region"</span>     :  <span class="string">"cn-bj2"</span>,</span><br><span class="line">     <span class="string">"Zone"</span>       :  <span class="string">"cn-bj2-04"</span></span><br><span class="line"> &#125;</span><br><span class="line">    <span class="comment"># 将参数串排序</span></span><br><span class="line"></span><br><span class="line">    params_data = <span class="string">""</span></span><br><span class="line">    <span class="keyword">import</span> pdb;pdb.set_trace()</span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> item.items():</span><br><span class="line">        params_data = params_data + str(key) + str(value)</span><br><span class="line">    params_data = params_data + private_key</span><br><span class="line">    params_data_en = quote_plus(params_data)</span><br><span class="line"></span><br><span class="line">    sign = hashlib.sha1()</span><br><span class="line">    sign.update(params_data_en.encode(<span class="string">'utf8'</span>))</span><br><span class="line">    signature = sign.hexdigest()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> signature</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(verfy_ac(<span class="string">"46f09bb9fab4f12dfc160dae12273d5332b5debe"</span>))</span><br></pre></td></tr></table></figure><p>这是<a href="https://docs.ucloud.cn/api/summary/signature" target="_blank" rel="noopener">ucloud官方的API教程</a>，想根据此教程生成签名，教程中的代码是基于Python2.7编写，我将其改成了Python3.但是在执行时报错：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TypeError: Unicode-objects must be encoded before hashing</span><br></pre></td></tr></table></figure><hr><p>排错后发现python3中字符对象是unicode对象，不能直接加密，需要编码后才能进行update。</p><p>就是改成如下即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sign.update(params_data_en.encode(<span class="string">'utf8'</span>))</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      Python中进行md5加密时遇到的编码问题
    
    </summary>
    
      <category term="python" scheme="https://cloudsjhan.github.io/categories/python/"/>
    
    
      <category term="Python" scheme="https://cloudsjhan.github.io/tags/Python/"/>
    
      <category term="md5编码" scheme="https://cloudsjhan.github.io/tags/md5%E7%BC%96%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://cloudsjhan.github.io/2018/08/18/hello-world/"/>
    <id>https://cloudsjhan.github.io/2018/08/18/hello-world/</id>
    <published>2018-08-18T14:05:08.383Z</published>
    <updated>2018-08-18T14:05:08.384Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
