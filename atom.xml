<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cloud world</title>
  
  <subtitle>To be A geek</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://cloudsjhan.github.io/"/>
  <updated>2018-10-21T14:17:36.133Z</updated>
  <id>https://cloudsjhan.github.io/</id>
  
  <author>
    <name>cloud sjhan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>上海QCon之Go专家David Cheney关于GO最佳实践的演讲</title>
    <link href="https://cloudsjhan.github.io/2018/10/21/%E4%B8%8A%E6%B5%B7QCon%E4%B9%8BGo%E4%B8%93%E5%AE%B6David-Cheney%E5%85%B3%E4%BA%8EGO%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E7%9A%84%E6%BC%94%E8%AE%B2/"/>
    <id>https://cloudsjhan.github.io/2018/10/21/上海QCon之Go专家David-Cheney关于GO最佳实践的演讲/</id>
    <published>2018-10-21T14:07:15.000Z</published>
    <updated>2018-10-21T14:17:36.133Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><p><img src="https://" alt="" style="width:100%"></p><a id="more"></a><p>本周六有幸参加了2018QCon上海的会议，听了David关于GO最佳实践的一些建议，下面贴出的就是David的演讲稿，内容相对来说比较基础，但是又是编程中不可避免的一些问题，希望可以给大家带来一些启发。</p><p>Table of Contents </p><p>Introduction<br> \1. Guiding principles </p><p>1.1. Simplicity 1.2. Readability 1.3. Productivity </p><p>\2. Identiers<br> 2.1. Choose identiers for clarity, not brevity 2.2. Identier length<br> 2.3. Don’t name your variables for their types 2.4. Use a consistent naming style<br> 2.5. Use a consistent declaration style<br> 2.6. Be a team player </p><p>\3. Comments<br> 3.1. Comments on variables and constants should describe their contents not their purpose 3.2. Always document public symbols </p><p>\4. Package Design<br> 4.1. A good package starts with its name<br> 4.2. Avoid package names like base , common , or util 4.3. Return early rather than nesting deeply<br> 4.4. Make the zero value useful<br> 4.5. Avoid package level state </p><p>\5. Project Structure<br> 5.1. Consider fewer, larger packages<br> 5.2. Keep package main small as small as possible </p><p>\6. API Design<br> 6.1. Design APIs that are hard to misuse.<br> 6.2. Design APIs for their default use case<br> 6.3. Let functions dene the behaviour they requires </p><p>\7. Error handling<br> 7.1. Eliminate error handling by eliminating errors 7.2. Only handle an error once </p><p>\8. Concurrency<br> 8.1. Keep yourself busy or do the work yourself<br> 8.2. Leave concurrency to the caller<br> 8.3. Never start a goroutine without when it will stop. </p><p>Introduction </p><p>Hello,<br> My goal over the next two sessions is to give you my advice for best practices writing Go code. </p><p><a href="https://dave.cheney.net/practical-go/presentations/qcon-china.html" target="_blank" rel="noopener">https://dave.cheney.net/practical-go/presentations/qcon-china.html</a> 1/45 </p><p>2018/10/21 Practical Go: Real world advice for writing maintainable Go programs </p><p>This is a workshop style presentation, I’m going to dispense with the usual slide deck and we’ll work directly from the document which you can take away with you today. </p><p>TIP </p><p>You can find the latest version of this presentation at <a href="https://dave.cheney.net/practical-go/presentations/qcon-china.html" target="_blank" rel="noopener">https://dave.cheney.net/practical-go/presentations/qcon-china.html</a> </p><p>\1. Guiding principles </p><p>If I’m going to talk about best practices in any programming language I need some way to define what I mean by best. If you came to my keynote yesterday you would have seen this quote from the Go team lead, Russ Cox: </p><p>“Software engineering is what happens to programming when you add time and other programmers. </p><p>— Russ Cox </p><p>Russ is making the distinction between software programming and software engineering. The former is a program you write for yourself. The latter is a product that many people will work on over time. Engineers will come and go, teams will grow and shrink over time, requirements will change, features will be added and bugs fixed. This is the nature of software engineering. </p><p>I’m possibly one of the earliest users of Go in this room, but to argue that my seniority gives my views more weight is false. Instead, the advice I’m going to present today is informed by what I believe to be the guiding principles underlying Go itself. They are: </p><p>\1. Simplicity<br> \2. Readability 3. Productivity </p><p>NOTE </p><p>You’ll note that I didn’t say performance, or concurrency. There are languages which are a bit faster than Go, but they’re certainly not as simple as Go. There are languages which make concurrency their highest goal, but they are not as readable, nor as productive. </p><p>Performance and concurrency are important attributes, but not as important as simplicity, readability, and productivity. </p><p>1.1. Simplicity </p><p>Why should we strive for simplicity? Why is important that Go programs be simple? </p><p>We’ve all been in a situation where you say “I can’t understand this code”, yes? We’ve all worked on programs where you’re scared to make a change because you’re worried it’ll break another part of the program; a part you don’t understand and don’t know how to fix. </p><p>This is complexity. Complexity turns reliable software in unreliable software. Complexity is what kills software projects. </p><p>Simplicity is the highest goal of Go. Whatever programs we write, we should be able to agree that they are simple. </p><p>1.2. Readability </p><p>“<a href="https://dave.cheney.net/practical-go/presentations/qcon-china.html" target="_blank" rel="noopener">https://dave.cheney.net/practical-go/presentations/qcon-china.html</a> 2/45 </p><p>2018/10/21 Practical Go: Real world advice for writing maintainable Go programs </p><p>“Readability is essential for maintainability. — Mark Reinhold </p><p>JVM language summit 2018 </p><p>Why is it important that Go code be readable? Why should we strive for readability? </p><p>“Programs must be written for people to read, and only incidentally for machines to execute. — Hal Abelson and Gerald Sussman </p><p>Structure and Interpretation of Computer Programs </p><p>Readability is important because all software, not just Go programs, is written by humans to be read by other humans. The fact that software is also consumed by machines is secondary. </p><p>Code is read many more times than it is written. A single piece of code will, over its lifetime, be read hundreds, maybe thousands of times. </p><p>“The most important skill for a programmer is the ability to effectively communicate ideas. — Gastón Jorquera [1] </p><p>Readability is key to being able to understand what the program is doing. If you can’t understand what a program is doing, how can you hope to maintain it? If software cannot be maintained, then it will be rewritten; and that could be the last time your company will invest in Go. </p><p>If you’re writing a program for yourself, maybe it only has to run once, or you’re the only person who’ll ever see it, then do what ever works for you. But if this is a piece of software that more than one person will contribute to, or that will be used by people over a long enough time that requirements, features, or the environment it runs in changes, then your goal must be for your program to be maintainable. </p><p>The first step towards writing maintainable code is making sure the code is readable. </p><p>“1.3. Productivity<br> Design is the art of arranging code to work today, and be changeable forever. </p><p>— Sandi Metz </p><p>The last underlying principle I want to highlight is productivity. Developer productivity is a sprawling topic but it boils down to this; how much time do you spend doing useful work verses waiting for your tools or hopelessly lost in a foreign code-base. Go programmers should feel that they can get a lot done with Go. </p><p>The joke goes that Go was designed while waiting for a C++ program to compile. Fast compilation is a key feature of Go and a key recruiting tool to attract new developers. While compilation speed remains a constant battleground, it is fair to say that compilations which take minutes in other languages, take seconds in Go. This helps Go developers feel as productive as their counterparts working in dynamic languages without the reliability issues inherent in those languages. </p><p>More fundamental to the question of developer productivity, Go programmers realise that code is written to be read and so place the act of reading code above the act of writing it. Go goes so far as to enforce, via tooling and custom, that all code be formatted in a specific style. This removes the friction of learning a project specific dialect and helps spot mistakes because they just look incorrect. </p><p>Go programmers don’t spend days debugging inscrutable compile errors. They don’t waste days with complicated build scripts or deploying code to production. And most importantly they don’t spend their time trying to understand what their coworker wrote. </p><p><a href="https://dave.cheney.net/practical-go/presentations/qcon-china.html" target="_blank" rel="noopener">https://dave.cheney.net/practical-go/presentations/qcon-china.html</a> 3/45 </p><p>2018/10/21 Practical Go: Real world advice for writing maintainable Go programs </p><p>Productivity is what the Go team talk about when they say the language must scale. 2. Identiers </p><p>The first topic we’re going to discuss is identifiers. An identifier is a fancy word for a name; the name of a variable, the name of a function, the name of a method, the name of a type, the name of a package, and so on. </p><p>“Poor naming is symptomatic of poor design. — Dave Cheney </p><p>Given the limited syntax of Go, the names we choose for things in our programs have an oversized impact on the readability of our programs. Readability is the defining quality of good code thus choosing good names is crucial to the readability of Go code. </p><p>“2.1. Choose identiers for clarity, not brevity<br> Obvious code is important. What you can do in one line you should do in three. </p><p>— Ukiah Smith </p><p>Go is not a language that optimises for clever one liners. Go is not a language which optimises for the least number of lines in a program. We’re not optimising for the size of the source code on disk, nor how long it takes to type. </p><p>“Good naming is like a good joke. If you have to explain it, it’s not funny. — Dave Cheney </p><p>Key to this clarity is the names we choose for identifies in Go programs. Let’s talk about the qualities of a good name: </p><p>A good name is concise. A good name need not be the shortest it can possibly be, but a good name should waste no space on things which are extraneous. Good names have a high signal to noise ratio. </p><p>A good name is descriptive. A good name should describe the application of a variable or constant, not their contents. A good name should describe the result of a function, or behaviour of a method, not their operation. A good name should describe the purpose of a package, not its contents. The more accurately a name describes the thing it identifies, the better the name. </p><p>A good name is should be predictable. You should be able to infer the way a name will be used from its name alone. This is a function of choosing descriptive names, but it also about following tradition. This is what Go programmers talk about when they say idiomatic. </p><p>Let’s talk about each of these properties in depth. </p><p>2.2. Identier length </p><p>Sometimes people criticise the Go style for recommending short variable names. As Rob Pike said, “Go programmers want the right length identifiers”. [1] </p><p>Andrew Gerrand suggests that by using longer identifies for some things we indicate to the reader that they are of higher importance. </p><p>“The greater the distance between a name’s declaration and its uses, the longer the name should be. </p><p>— Andrew Gerrand [2] </p><p>From this we can draw some guidelines: </p><p><a href="https://dave.cheney.net/practical-go/presentations/qcon-china.html" target="_blank" rel="noopener">https://dave.cheney.net/practical-go/presentations/qcon-china.html</a> 4/45 </p><p>2018/10/21 Practical Go: Real world advice for writing maintainable Go programs </p><p>Short variable names work well when the distance between their declaration and last use is short.<br> Long variable names need to justify themselves; the longer they are the more value they need to provide. Lengthy </p><p>bureaucratic names carry a low amount of signal compared to their weight on the page. </p><p>Don’t include the name of your type in the name of your variable. </p><p>Constants should describe the value they hold, not how that value is used. </p><p>Single letter variables for loops and branches, single words for parameters and return values, multiple words for functions and package level declarations </p><p>Single words for methods, interfaces, and packages.<br> Remember that the name of a package is part of the name the caller uses to to refer to it, so make use of that. </p><p>Let’s look at an example to </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">type Person struct &#123;</span><br><span class="line">    Name string</span><br></pre></td></tr></table></figure><p>Age int } </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// AverageAge returns the average age of people.</span><br><span class="line">func AverageAge(people []Person) int &#123;</span><br><span class="line">    if len(people) == 0 &#123;</span><br><span class="line">        return 0</span><br></pre></td></tr></table></figure><p>} </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var count, sum int</span><br><span class="line">for _, p := range people &#123;</span><br></pre></td></tr></table></figure><p>sum += p.Age </p><p>count += 1 } </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">    return sum / count</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GO </p><p>In this example, the range variable p is declared on line 10 and only referenced on the following line. p lives for a very short time both on the page, and during the execution of the function. A reader who is interested in the effect values of p have on the program need only read two lines. </p><p>By comparison people is declared in the function parameters and lives for seven lines. The same is true for sum , and count , thus they justify their longer names. The reader has to scan a wider number of lines to locate them so they are </p><p>given more distinctive names. </p><p>I could have chosen s for sum and c (or possibly n ) for but this would have reduced all the variables in the program to the same level of importance. I could have chosen                              instead of                              but that would have left the problem of what to call the for … range iteration variable. The singular                              would look odd as the loop iteration variable which lives for little time has a longer name than the slice of values it was derived from. </p><p>count </p><p>TIP </p><p>Use blank lines to break up the flow of a function in the same way you use paragraphs to break up the flow of a document. In AverageAge we have three operations occurring in sequence. The first is the precondition, checking that we don’t divide by zero if people is empty, the second is the accumulation of the sum and count, and the final is the computation of the average. </p><p>2.2.1. Context is key </p><p><a href="https://dave.cheney.net/practical-go/presentations/qcon-china.html" target="_blank" rel="noopener">https://dave.cheney.net/practical-go/presentations/qcon-china.html</a> 5/45 </p><p>p </p><p>people </p><p>person </p><p>2018/10/21 Practical Go: Real world advice for writing maintainable Go programs </p><p>It’s important to recognise that most advice on naming is contextual. I like to say it is a principle, not a rule. </p><p>What is the difference between two identifiers, i , and index . We cannot say conclusively that one is better than another, for example is </p><p>fundamentally more readable than </p><p>I argue it is not, because it is likely the scope of i , and index for that matter, is limited to the body of the for loop and the extra verbosity of the latter adds little to comprehension of the program. </p><p>However, which of these functions is more readable? </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func (s *SNMP) Fetch(oid []int, index int) (int, error)</span><br></pre></td></tr></table></figure><p>or </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func (s *SNMP) Fetch(o []int, i int) (int, error)</span><br></pre></td></tr></table></figure><p>In this example, oid is an abbreviation for SNMP Object ID, so shortening it to o would mean programmers have to translate from the common notation that they read in documentation to the shorter notation in your code. Similarly, reducing index to i obscures what i stands for as in SNMP messages a sub value of each OID is called an Index. </p><p>TIP Don’t mix and match long and short formal parameters in the same declaration. 2.3. Don’t name your variables for their types </p><p>You shouldn’t name your variables after their types for the same reason you don’t name your pets “dog” and “cat”. You also probably shouldn’t include the name of your type in the name of your variable’s name for the same reason. </p><p>The name of the variable should describe its contents, not the type of the contents. Consider this example: var usersMap map[string]*User </p><p>What’s good about this declaration? We can see that its a map, and it has something to do with the *User type, that’s probably good. But usersMap is a map, and Go being a statically typed language won’t let us accidentally use it where a scalar variable is required, so the Map suffix is redundant. </p><p>Now, consider what happens if we were to declare other variables like: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for index := 0; index &lt; len(s); index++ &#123;</span><br><span class="line">    //</span><br></pre></td></tr></table></figure><p>} </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for i := 0; i &lt; len(s); i++ &#123;</span><br><span class="line">    //</span><br></pre></td></tr></table></figure><p>} </p><p><a href="https://dave.cheney.net/practical-go/presentations/qcon-china.html" target="_blank" rel="noopener">https://dave.cheney.net/practical-go/presentations/qcon-china.html</a> 6/45 </p><p>2018/10/21 Practical Go: Real world advice for writing maintainable Go programs </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var (</span><br><span class="line">    companiesMap map[string]*Company</span><br><span class="line">    productsMap map[string]*Products</span><br></pre></td></tr></table></figure><p>) </p><p>Now we have three map type variables in scope, usersMap , companiesMap , and productsMap , all mapping strings to different types. We know they are maps, and we also know that their map declarations prevent us from using one in place of another—the compiler will throw an error if we try to use companiesMap where the code is expecting a </p><p>map[string]*User . In this situation it’s clear that the Map suffix does not improve the clarity of the code, its just extra boilerplate to type. </p><p>My suggestion is to avoid any suffix that resembles the type of the variable.<br> TIP If users isn’t descriptive enough, then usersMap won’t be either. </p><p>This advice also applies to function parameters. For example: </p><p>Naming the <em>Config parameter config is redundant. We know its a </em>Config , it says so right there. In this case consider conf or maybe c will do if the lifetime of the variable is short enough. </p><p>If there is more that one in scope at any one time then calling them conf1 and conf2 is less descriptive than calling them and as the latter are less likely to be mistaken for one another. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">type Config struct &#123;</span><br><span class="line">    //</span><br><span class="line">&#125;</span><br><span class="line">func WriteConfig(w io.Writer, config *Config)</span><br></pre></td></tr></table></figure><p>*Config </p><p>original </p><p>updated </p><p>Don’t let package names steal good variable names. </p><p>The name of an imported identifier includes its package name. For example the context package will be known as context.Context . This makes it impossible to use </p><p>a variable or type in your package. </p><p>type in the as </p><p>func WriteLog(context context.Context, message string)<br> Will not compile. This is why the local declaration for context.Context types is traditionally ctx . </p><p>eg. </p><p>func WriteLog(ctx context.Context, message string) </p><p>2.4. Use a consistent naming style </p><p>Another property of a good name is it should be predictable. The reader should be able to understand the use of a name when they encounter it for the first time. When they encounter a common name, they should be able to assume it has not changed meanings since the last time they saw it. </p><p>NOTE </p><p><a href="https://dave.cheney.net/practical-go/presentations/qcon-china.html" target="_blank" rel="noopener">https://dave.cheney.net/practical-go/presentations/qcon-china.html</a> 7/45 </p><p>Context </p><p>context </p><p>2018/10/21 Practical Go: Real world advice for writing maintainable Go programs </p><p>For example, if your code passes around a database handle, make sure each time the parameter appears, it has the same name. Rather than a combination of d <em>sql.DB , dbase </em>sql.DB , DB <em>sql.DB , and database </em>sql.DB , instead consolidate on something like; </p><p>db <em>sql.DB<br> Doing so promotes familiarity; if you see a db , you know it’s a </em>sql.DB and that it has either been declared locally or </p><p>provided for you by the caller. </p><p>Similarly for method receivers; use the same receiver name every method on that type. This makes it easier for the reader to internalise the use of the receiver across the methods in this type. </p><p>The convention for short receiver names in Go is at odds with the advice provided so far. This is just NOTE one of the choices made early on that has become the preferred style, just like the use of CamelCase </p><p>TIP </p><p>rather than snake_case . </p><p>Go style dictates that receivers have a single letter name, or acronyms derived from their type. You may find that the name of your receiver sometimes conflicts with name of a parameter in a method. In this case, consider making the parameter name slightly longer, and don’t forget to use this new parameter name consistently. </p><p>Finally, certain single letter variables have traditionally been associated with loops and counting. For example, i , j , and k are commonly the loop induction variable for simple for loops. n is commonly associated with a counter or accumulator. v is a common shorthand for a value in a generic encoding function, k is commonly used for the key of a map, and s is often used as shorthand for parameters of type string . </p><p>As with the db example above programmers expect                              to be a loop induction variable. If you ensure that is always a loop variable, not used in other contexts outside a                              loop. When readers encounter a variable called , or j , they know that a loop is close by. </p><p>i </p><p>i </p><p>for </p><p>i </p><p>TIP </p><p>If you found yourself with so many nested loops that you exhaust your supply of i , j , and k variables, its probably time to break your function into smaller units. </p><p>2.5. Use a consistent declaration style </p><p>Go has at least six different ways to declare a variable </p><p>varxint=1 varx=1 varxint;x=1 var x = int(1) x:=1 </p><p>I’m sure there are more that I haven’t thought of. This is something that Go’s designers recognise was probably a mistake, but its too late to change it now. With all these different ways of declaring a variable, how do we avoid each Go programmer choosing their own style? </p><p>I want to present a suggestions for how I declare variables in my programs. This is the style I try to use where possible. </p><p><a href="https://dave.cheney.net/practical-go/presentations/qcon-china.html" target="_blank" rel="noopener">https://dave.cheney.net/practical-go/presentations/qcon-china.html</a> 8/45 </p><p>2018/10/21 Practical Go: Real world advice for writing maintainable Go programs </p><p>When declaring, but not initialising, a variable, use var . When declaring a variable that will be explicitly initialised later in the function, use the var keyword. </p><p>The var acts as a clue to say that this variable has been deliberately declared as the zero value of the indicated type. This is also consistent with the requirement to declare variables at the package level using var as opposed to the short declaration syntax—although I’ll argue later that you shouldn’t be using package level variables at all. </p><p>When declaring and initialising, use := . When declaring and initialising the variable at the same time, that is to say we’re not letting the variable be implicitly initialised to its zero value, I recommend using the short variable declaration form. This makes it clear to the reader that the variable on the left hand side of the := is being deliberately initialised. </p><p>To explain why, Let’s look at the previous example, but this time deliberately initialising each variable: </p><p>In the first and third examples, because in Go there are no automatic conversions from one type to another; the type on the left hand side of the assignment operator must be identical to the type on the right hand side. The compiler can infer the type of the variable being declared from the type on the right hand side, to the example can be written more concisely like this: </p><p>This leaves us with explicitly initialising players to 0 which is redundant because 0 is `players’ zero value. So its better to make it clear that we’re going to use the zero value by instead writing </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var players int</span><br></pre></td></tr></table></figure><p>What about the second statement? We cannot elide the type and write </p><p>var things = nil<br> Because nil does not have a type. [2] Instead we have a choice, do we want the zero value for a slice? </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var players int    // 0</span><br><span class="line">var things []Thing // an empty slice of Things</span><br><span class="line">var thing Thing    // empty Thing struct</span><br><span class="line">json.Unmarshall(reader, &amp;thing)</span><br><span class="line">var players int = 0</span><br><span class="line">var things []Thing = nil</span><br><span class="line">var thing *Thing = new(Thing)</span><br><span class="line">json.Unmarshall(reader, thing)</span><br><span class="line">var players = 0</span><br><span class="line">var things []Thing = nil</span><br><span class="line">var thing = new(Thing)</span><br><span class="line">json.Unmarshall(reader, thing)</span><br></pre></td></tr></table></figure><p><a href="https://dave.cheney.net/practical-go/presentations/qcon-china.html" target="_blank" rel="noopener">https://dave.cheney.net/practical-go/presentations/qcon-china.html</a> 9/45 </p><p>2018/10/21 Practical Go: Real world advice for writing maintainable Go programs </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var things []Thing</span><br></pre></td></tr></table></figure><p>or do we want to create a slice with zero elements? </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var things = make([]Thing, 0)</span><br></pre></td></tr></table></figure><p>If we wanted the latter then this is not the zero value for a slice so we should make it clear to the reader that we’re making this choice by using the short declaration form: </p><p>things := make([]Thing, 0)<br> Which tells the reader that we have chosen to initialise things explicitly. </p><p>This brings us to the third declaration, </p><p>var thing = new(Thing)<br> Which is both explicitly initialising a variable and introduces the uncommon use of the new keyword which some Go </p><p>programmer dislike. If we apply our short declaration syntax recommendation then the statement becomes </p><p>thing := new(Thing)<br> Which makes it clear that thing is explicitly initialised to the result of new(Thing) –a pointer to a Thing –but still </p><p>leaves us with the unusual use of new . We could address this by using the compact literal struct initialiser form, thing := &amp;Thing{} </p><p>Which does the same as<br> means we’re explicitly initialising </p><p>, hence why some Go programmers are upset by the duplication. However this with a pointer to a Thing{} , which is the zero value for a Thing . </p><p>new(Thing) </p><p>thing </p><p>Instead we should recognise that                              is being declared as its zero value and use the address of operator to pass the address of thing to </p><p>thing </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">json.Unmarshall</span><br><span class="line">var thing Thing</span><br><span class="line">json.Unmarshall(reader, &amp;thing)</span><br></pre></td></tr></table></figure><p><a href="https://dave.cheney.net/practical-go/presentations/qcon-china.html" target="_blank" rel="noopener">https://dave.cheney.net/practical-go/presentations/qcon-china.html</a> 10/45 </p><p>2018/10/21 </p><p>Practical Go: Real world advice for writing maintainable Go programs </p><p>NOTE </p><p>Of course, with any rule of thumb, there are exceptions. For example, sometimes two variables are closely related so writing </p><p>Would be odd. The declaration may be more readable like this </p><p>min, max := 0, 1000 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var min int</span><br><span class="line">max := 1000</span><br></pre></td></tr></table></figure><p>In summary:<br> When declaring a variable without initialisation, use the var syntax. </p><p>When declaring and explicitly initialising a variable, use := . Make tricky declarations obvious. </p><p>When something is complicated, it should look complicated. var length uint32 = 0x80 </p><p>Here length may be being used with a library which requires a specific numeric type and is more TIP explicit that length is being explicitly chosen to be uint32 than the short declaration form: </p><p>length := uint32(0x80) </p><p>In the first example I’m deliberately breaking my rule of using the var declaration form with an explicit initialiser. This decision to vary from my usual form is a clue to the reader that something unusual is happening. </p><p>2.6. Be a team player </p><p>I talked about a goal of software engineering to produce readable, maintainable, code. Therefore you will likely spend most of your career working on projects of which you are not the sole author. My advice in this situation is to follow the local style. </p><p>Changing styles in the middle of a file is jarring. Uniformity, even if its not your preferred approach, is more valuable for maintenance than your personal preference. My rule of thumb is; if it fits through gofmt then its usually not worth holding up a code review for. </p><p>If you want to do a renaming across a code-base, do not mix this into another change. If someone is TIP using git bisect they don’t want to wade through thousands of lines of renaming to find the code you </p><p>changed as well. </p><p>\3. Comments </p><p>Before we move on to larger items I want to spend a few minutes talking about comments. </p><p>“<a href="https://dave.cheney.net/practical-go/presentations/qcon-china.html" target="_blank" rel="noopener">https://dave.cheney.net/practical-go/presentations/qcon-china.html</a> 11/45 </p><p>2018/10/21 Practical Go: Real world advice for writing maintainable Go programs </p><p>“Good code has lots of comments, bad code requires lots of comments. — Dave Thomas and Andrew Hunt </p><p>The Pragmatic Programmer </p><p>Comments are very important to the readability of a Go program. A comments should do one of three things: </p><p>\1. The comment should explain what the thing does.<br> \2. The comment should explain how the thing does what it does. 3. The comment should explain why the thing is why it is. </p><p>The first form is ideal for commentary on public symbols: </p><p>The second form is ideal for commentary inside a method: </p><p>The third form, the why , is unique as it does not displace the first two, but at the same time it’s not a replacement for the what, or the how. The why style of commentary exists to explain the external factors that drove the code you read on the page. Frequently those factors rarely make sense taken out of context, the comment exists to provide that context. </p><p>In this example it may not be immediately clear what the effect of setting HealthyPanicThreshold to zero percent will do. The comment is needed to clarify that the value of 0 will disable the panic threshold behaviour. </p><p>3.1. Comments on variables and constants should describe their contents not their purpose </p><p>I talked earlier that the name of a variable, or a constant, should describe its purpose. When you add a comment to a variable or constant, that comment should describe the variables contents, not the variables purpose. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const randomNumber = 6 // determined from an unbiased die</span><br></pre></td></tr></table></figure><p>In this example the comment describes why                              is assigned the value six, and where the six was derived from. The comment does not describe where                              will be used. Here are some more examples: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// Open opens the named file for reading.</span><br><span class="line">// If successful, methods on the returned file can be used for reading.</span><br><span class="line">// queue all dependant actions</span><br><span class="line">var results []chan error</span><br><span class="line">for _, dep := range a.Deps &#123;</span><br></pre></td></tr></table></figure><p>} </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">results = append(results, execute(seen, dep))</span><br><span class="line">return &amp;v2.Cluster_CommonLbConfig&#123;</span><br><span class="line">    // Disable HealthyPanicThreshold</span><br><span class="line">        HealthyPanicThreshold: &amp;envoy_type.Percent&#123;</span><br><span class="line">            Value: 0,</span><br></pre></td></tr></table></figure><p>}, } </p><p><a href="https://dave.cheney.net/practical-go/presentations/qcon-china.html" target="_blank" rel="noopener">https://dave.cheney.net/practical-go/presentations/qcon-china.html</a> </p><p>12/45 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">randomNumber</span><br><span class="line">randomNumber</span><br></pre></td></tr></table></figure><p>2018/10/21 Practical Go: Real world advice for writing maintainable Go programs </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const (</span><br><span class="line">    StatusContinue           = 100 // RFC 7231, 6.2.1</span><br><span class="line">    StatusSwitchingProtocols = 101 // RFC 7231, 6.2.2</span><br><span class="line">    StatusProcessing         = 102 // RFC 2518, 10.1</span><br><span class="line">    StatusOK                 = 200 // RFC 7231, 6.3.1</span><br></pre></td></tr></table></figure><p>In the context of HTTP the number 100 is known as StatusContinue , as defined in RFC 7231, section 6.2.1. For variables without an initial value, the comment should describe who is responsible for </p><p>// sizeCalculationDisabled indicates whether it is safe // to calculate Types’ widths and alignments. See dowidth. var sizeCalculationDisabled bool </p><p>TIP </p><p>initialising this variable. </p><p>Here the comment lets the reader know that the dowidth function is responsible for maintaining the state of sizeCalculationDisabled . </p><p>Hiding in plain sight </p><p>This is a tip from Kate Gregory. [3] Sometimes you’ll find a better name for a variable hiding in a comment. </p><p>The comment was added by the author because registry doesn’t explain enough about its purpose —it’s a registry, but a registry of what? </p><p>By renaming the variable to sqlDrivers its now clear that the purpose of this variable is to hold SQL drivers. </p><p>var sqlDrivers = make(map[string]*sql.Driver) </p><p>Now the comment is redundant and can be removed. </p><p>// registry of SQL drivers<br> var registry = make(map[string]*sql.Driver) </p><p>TIP </p><p>3.2. Always document public symbols </p><p>Because godoc is the documentation for your package, you should always add a comment for every public symbol— variable, constant, function, and method—declared in your package. </p><p>Here are two rules from the Google Style guide </p><p>Any public function that is not both obvious and short must be commented.<br> Any function in a library must be commented regardless of length or complexity </p><p><a href="https://dave.cheney.net/practical-go/presentations/qcon-china.html" target="_blank" rel="noopener">https://dave.cheney.net/practical-go/presentations/qcon-china.html</a> 13/45 </p><p>2018/10/21 Practical Go: Real world advice for writing maintainable Go programs </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">package ioutil</span><br><span class="line">// ReadAll reads from r until an error or EOF and returns the data it read.</span><br><span class="line">// A successful call returns err == nil, not err == EOF. Because ReadAll is</span><br><span class="line">// defined to read from src until EOF, it does not treat an EOF from Read</span><br><span class="line">// as an error to be reported.</span><br><span class="line">func ReadAll(r io.Reader) ([]byte, error)</span><br></pre></td></tr></table></figure><p>There is one exception to this rule; you don’t need to document methods that implement an interface. Specifically don’t do this: </p><p>This comment says nothing. It doesn’t tell you what the method does, in fact it’s worse, it tells you to go look somewhere else for the documentation. In this situation I suggest removing the comment entirely. </p><p>Here is an example from the io package </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// Read implements the io.Reader interface</span><br><span class="line">func (r *FileReader) Read(buf []byte) (int, error)</span><br><span class="line">// LimitReader returns a Reader that reads from r</span><br><span class="line">// but stops with EOF after n bytes.</span><br><span class="line">// The underlying implementation is a *LimitedReader.</span><br><span class="line">func LimitReader(r Reader, n int64) Reader &#123; return &amp;LimitedReader&#123;r, n&#125; &#125;</span><br><span class="line">// A LimitedReader reads from R but limits the amount of</span><br><span class="line">// data returned to just N bytes. Each call to Read</span><br><span class="line">// updates N to reflect the new amount remaining.</span><br><span class="line">// Read returns EOF when N &lt;= 0 or when the underlying R returns EOF.</span><br><span class="line">type LimitedReader struct &#123;</span><br><span class="line">    R Reader // underlying reader</span><br><span class="line">    N int64  // max bytes remaining</span><br><span class="line">&#125;</span><br><span class="line">func (l *LimitedReader) Read(p []byte) (n int, err error) &#123;</span><br><span class="line">    if l.N &lt;= 0 &#123;</span><br><span class="line">        return 0, EOF</span><br><span class="line">    &#125;</span><br><span class="line">    if int64(len(p)) &gt; l.N &#123;</span><br><span class="line">        p = p[0:l.N]</span><br><span class="line">    &#125;</span><br><span class="line">    n, err = l.R.Read(p)</span><br><span class="line">    l.N -= int64(n)</span><br><span class="line">    return</span><br></pre></td></tr></table></figure><p>} </p><p>Note that the                              declaration is directly preceded by the function that uses it, and the declaration of follows the declaration of LimitedReader itself. Even though LimitedReader.Read has no </p><p>documentation itself, its clear from that it is an implementation of io.Reader . </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LimitedReader</span><br><span class="line">LimitedReader.Read</span><br></pre></td></tr></table></figure><p>TIP </p><p>Before you write the function, write the comment describing the function. If you find it hard to write the comment, then it’s a sign that the code you’re about to write is going to be hard to understand. </p><p>3.2.1. Don’t comment bad code, rewrite it </p><p>“<a href="https://dave.cheney.net/practical-go/presentations/qcon-china.html" target="_blank" rel="noopener">https://dave.cheney.net/practical-go/presentations/qcon-china.html</a> 14/45 </p><p>2018/10/21 Practical Go: Real world advice for writing maintainable Go programs </p><p>“ Don’t comment bad code — rewrite it — Brian Kernighan </p><p>Comments highlighting the grossness of a particular piece of code are not sufficient. If you encounter one of these comments, you should raise an issue as a reminder to refactor it later. It is okay to live with technical debt, as long as the amount of debt is known. </p><p>The tradition in the standard library is to annotate a TODO style comment with the username of the person who noticed it. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// TODO(dfc) this is O(N^2), find a faster way to do this.</span><br></pre></td></tr></table></figure><p>The username is not a promise that that person has committed to fixing the issue, but they may be the best person to ask when the time comes to address it. Other projects annotate TODOs with a date or an issue number. </p><p>“3.2.2. Rather than commenting a block of code, refactor it </p><p>Good code is its own best documentation. As you’re about to add a comment, ask yourself, ‘How can I improve the code so that this comment isn’t needed?’ Improve the code and then document it to make it even clearer. </p><p>— Steve McConnell </p><p>Functions should do one thing only. If you find yourself commenting a piece of code because it is unrelated to the rest of the function, consider extracting it into a function of its own. </p><p>In addition to be easier to comprehend, smaller functions are easier to test in isolation, and now you’ve isolated the orthogonal code into its own function, its name may be all the documentation required. </p><p>“4. Package Design<br> Write shy code - modules that don’t reveal anything unnecessary to other modules and that </p><p>don’t rely on other modules’ implementations. </p><p>— Dave Thomas </p><p>Each Go package is in effect it’s own small Go program. Just as the implementation of a function or method is unimportant to the caller, the implementation of the functions and methods and types that make your package’s public API—its behaviour—is unimportant for the caller. </p><p>A good Go package should strive to have a low degree of source level coupling such that, as the project grows, changes to one package do not cascade across the code-base. These stop-the-world refactorings place a hard limit on the rate of change in a code base and thus the productivity of the members working in that code-base. </p><p>In this section we’ll talk about designing a package including the package’s name, naming types, and tips for writing methods and functions. </p><p>4.1. A good package starts with its name </p><p>Writing a good Go package starts with the package’s name. Think of your package’s name as an elevator pitch to describe what it does using just one word. </p><p><a href="https://dave.cheney.net/practical-go/presentations/qcon-china.html" target="_blank" rel="noopener">https://dave.cheney.net/practical-go/presentations/qcon-china.html</a> </p><p>15/45 </p><p>2018/10/21 Practical Go: Real world advice for writing maintainable Go programs </p><p>Just as I talked about names for variables in the previous section, the name of a package is very important. The rule of thumb I follow is not, “what types should I put in this package?”. Instead the question I ask “what does service does package provide?” Normally the answer to that question is not “this package provides the X type”, but “this package let’s you speak HTTP”. </p><p>TIP Name your package after what is provides, not what it contains. 4.1.1. Good package names should be unique. </p><p>Within your project, each package name should be unique. This advice is pretty easy to follow if the advice that a package’s name should derive from its purpose—if you find you have two packages which need the same name, it is likely either; </p><p>a. The name of the package is too generic. </p><p>b. The package overlaps another package of a similar name. In this case either you should review your design, or consider merging the packages. </p><p>4.2. Avoid package names like base , common , or util </p><p>A common cause of poor package names is what call utility packages. These are packages where common helpers and utility code congeals over time. As these packages contain an assortment of unrelated functions, their utility is hard to describe in terms of what the package provides. This often leads to the package’s name being derived from what the package contains–utilities. </p><p>Package names like utils or helpers are commonly found in larger projects which have developed deep package hierarchies and want to share helper functions without encountering import loops. By extracting utility functions to new package the import loop is broken, but because the package stems from a design problem in the project, its name doesn’t reflect its purpose, only its function of breaking the import cycle. </p><p>My recommendation to improve the name of utils or helpers packages is to analyse where they are called and if possible move the relevant functions into their caller’s package. Even if this involves duplicating some helper code this is better than introducing an import dependency between two packages. </p><p>“[A little] duplication is far cheaper than the wrong abstraction. — Sandy Metz </p><p>In the case where utility functions are used in many places prefer multiple packages, each focused on a single aspect, to a single monolithic package. </p><p>TIP Use plurals for naming utility packages. For example the strings for string handling utilities. </p><p>Packages with names like base or common are often found when functionality common to two or more implementations, or common types for a client and server, has been refactored into a separate package. I believe the solution to this is to reduce the number of packages, to combine the client, server, and common code into a single package named after the function of the package. </p><p>For example, the net/http package does not have client and                              sub packages, instead it has a client.go and server.go file, each holding their respective types, and a                              file for the common message transport code. </p><p>server </p><p><a href="https://dave.cheney.net/practical-go/presentations/qcon-china.html" target="_blank" rel="noopener">https://dave.cheney.net/practical-go/presentations/qcon-china.html</a> </p><p>16/45 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transport.go</span><br></pre></td></tr></table></figure><p>2018/10/21 </p><p>Practical Go: Real world advice for writing maintainable Go programs </p><p>TIP </p><p>An identifier’s name includes its package name. </p><p>It’s important to remember that the name of an identifier includes the name of its package. </p><p>The Get function from the net/http package becomes http.Get when referenced by another package. </p><p>The Reader type from the strings package becomes strings.Reader when imported into other packages. </p><p>The Error interface from the net package is clearly related to network errors. 4.3. Return early rather than nesting deeply </p><p>As Go does not use exceptions for control flow there is no requirement to deeply indent your code just to provide a top level structure for the try and catch blocks. Rather than the successful path nesting deeper and deeper to the right, Go code is written in a style where the success path continues down the screen as the function progresses. My friend Mat Ryer calls this practice ‘line of sight’ coding. [4] </p><p>This is achieved by using guard clauses; conditional blocks with assert preconditions upon entering a function. Here is an example from the bytes package, </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">func (b *Buffer) UnreadRune() error &#123;</span><br><span class="line">    if b.lastRead &lt;= opInvalid &#123;</span><br></pre></td></tr></table></figure><p>GO </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">        return errors.New(&quot;bytes.Buffer: UnreadRune: previous operation was not a successful</span><br><span class="line">ReadRune&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">    if b.off &gt;= int(b.lastRead) &#123;</span><br><span class="line">        b.off -= int(b.lastRead)</span><br><span class="line">    &#125;</span><br><span class="line">    b.lastRead = opInvalid</span><br></pre></td></tr></table></figure><p>return nil } </p><p>Upon entering UnreadRune the state of b.lastRead is checked and if the previous operation was not an error is returned immediately. From there the rest of the function proceeds with the assertion that is greater that opInvalid . </p><p>Compare this to the same function written without a guard clause, </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">func (b *Buffer) UnreadRune() error &#123;</span><br><span class="line">    if b.lastRead &gt; opInvalid &#123;</span><br><span class="line">        if b.off &gt;= int(b.lastRead) &#123;</span><br><span class="line">            b.off -= int(b.lastRead)</span><br><span class="line">        &#125;</span><br><span class="line">        b.lastRead = opInvalid</span><br><span class="line">        return nil</span><br></pre></td></tr></table></figure><p>} </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">    return errors.New(&quot;bytes.Buffer: UnreadRune: previous operation was not a successful</span><br><span class="line">ReadRune&quot;)</span><br></pre></td></tr></table></figure><p>} </p><p>GO </p><p>The body of the successful case, the most common, is nested inside the first if condition and the successful exit condition, return nil , has to be discovered by careful matching of closing braces. The final line of the function now returns an error, and the called must trace the execution of the function back to the matching opening brace to know </p><p><a href="https://dave.cheney.net/practical-go/presentations/qcon-china.html" target="_blank" rel="noopener">https://dave.cheney.net/practical-go/presentations/qcon-china.html</a> 17/45 </p><p>ReadRune </p><p>b.lastRead </p><p>2018/10/21 Practical Go: Real world advice for writing maintainable Go programs </p><p>when control will reach this point. </p><p>This is more error prone for the reader, and the maintenance programmer, hence why Go prefer to use guard clauses and returning early on errors. </p><p>4.4. Make the zero value useful </p><p>Every variable declaration, assuming no explicit initialiser is provided, will be automatically initialised to a value that matches the contents of zeroed memory. This is the values zero value. The type of the value determines its zero value; for numeric types it is zero, for pointer types nil, the same for slices, maps, and channels. </p><p>This property of always setting a value to a known default is important for safety and correctness of your program and can make your Go programs simpler and more compact. This is what Go programmers talk about when they say “give your structs a useful zero value”. </p><p>Consider the sync.Mutex type. sync.Mutex contains two unexported integer fields, representing the mutex’s internal state. Thanks to the zero value those fields will be set to will be set to 0 whenever a sync.Mutex is declared. </p><p>sync.Mutex has been deliberately coded to take advantage of this property, making the type usable without explicit initialisation. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">type MyInt struct &#123;</span><br><span class="line">    mu  sync.Mutex</span><br></pre></td></tr></table></figure><p>val int } </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">    var i MyInt</span><br><span class="line">    // i.mu is usable without explicit initialisation.</span><br><span class="line">    i.mu.Lock()</span><br><span class="line">    i.val++</span><br><span class="line">    i.mu.Unlock()</span><br></pre></td></tr></table></figure><p>} </p><p>GO </p><p>Another example of a type with a useful zero value is bytes.Buffer . You can declare a bytes.Buffer and start writing to it without explicit initialisation. </p><p>A useful property of slices is their zero value is nil . This makes sense if we look at the runtime’s definition of a slice header. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">    var b bytes.Buffer</span><br><span class="line">    b.WriteString(&quot;Hello, world!\n&quot;)</span><br><span class="line">    io.Copy(os.Stdout, &amp;b)</span><br></pre></td></tr></table></figure><p>} </p><p>GO </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">type slice struct &#123;</span><br><span class="line">        array *[...]T // pointer to the underlying array</span><br><span class="line">        len   int</span><br><span class="line">        cap   int</span><br></pre></td></tr></table></figure><p>} </p><p><a href="https://dave.cheney.net/practical-go/presentations/qcon-china.html" target="_blank" rel="noopener">https://dave.cheney.net/practical-go/presentations/qcon-china.html</a> 18/45 </p><p>2018/10/21 Practical Go: Real world advice for writing maintainable Go programs </p><p>The zero value of this struct would imply len and cap have the value 0 , and array , the pointer to memory holding the contents of the slice’s backing array, would be nil . This means you don’t need to explicitly make a slice, you can just declare it. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">    // s := make([]string, 0)</span><br><span class="line">    // s := []string&#123;&#125;</span><br><span class="line">    var s []string</span><br><span class="line">    s = append(s, &quot;Hello&quot;)</span><br><span class="line">    s = append(s, &quot;world&quot;)</span><br><span class="line">    fmt.Println(strings.Join(s, &quot; &quot;))</span><br></pre></td></tr></table></figure><p>} </p><p>GO </p><p>var s []string is similar to the two commented lines above it, but not identical. It is possible to detect the difference between a slice value that is nil and a slice value that has zero length. The following code will output false. </p><p>NOTE </p><p>A surprising, but useful, property of uninitialised pointer variables—nil pointers—is you can call methods on types that have a nil value. This can be used to provide default values simply. </p><p>func main() {<br> var s1 = []string{}<br> var s2 []string fmt.Println(reflect.DeepEqual(s1, s2)) </p><p>} </p><p>GO </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">type Config struct &#123;</span><br><span class="line">    path string</span><br></pre></td></tr></table></figure><p>} </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">func (c *Config) Path() string &#123;</span><br><span class="line">    if c == nil &#123;</span><br><span class="line">        return &quot;/usr/home&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    return c.path</span><br><span class="line">&#125;</span><br><span class="line">func main() &#123;</span><br><span class="line">    var c1 *Config</span><br><span class="line">    var c2 = &amp;Config&#123;</span><br><span class="line">        path: &quot;/export&quot;,</span><br></pre></td></tr></table></figure><p>} </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">    fmt.Println(c1.Path(), c2.Path())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GO </p><p>4.5. Avoid package level state </p><p>The key to writing maintainable programs is that they should be loosely coupled—a change to one package should have a low probability of affecting another package that does not directly depend on the first. </p><p>There are two excellent ways to achieve loose coupling in Go </p><p><a href="https://dave.cheney.net/practical-go/presentations/qcon-china.html" target="_blank" rel="noopener">https://dave.cheney.net/practical-go/presentations/qcon-china.html</a> </p><p>19/45 </p><p>2018/10/21 Practical Go: Real world advice for writing maintainable Go programs </p><p>\1. Use interfaces to describe the behaviour your functions or methods require. 2. Avoid the use of global state. </p><p>In Go we can declare variables at the function or method scope, and also at the package scope. When the variable is public, given a identifier starting with a capital letter, then its scope is effectively global to the entire program—any package may observe the type and contents of that variable at any time. </p><p>Mutable global state introduces tight coupling between independent parts of your program as global variables become an invisible parameter to every function in your program! Any function that relies on a global variable can be broken if that variable’s type changes. Any function that relies on the state of a global variable can be broken if another part of the program changes that variable. </p><p>If you want to reduce the coupling a global variable creates, </p><p>\1. Move the relevant variables as fields on structs that need them.<br> \2. Use interfaces to reduce the coupling between the behaviour and the implementation of that behaviour. </p><p>\5. Project Structure </p><p>Let’s talk about combining packages together into a project. Commonly this will be a single git repository, but in the future Go developers will use module and project interchangeably. </p><p>Just like a package, each project should have a clear purpose. If your project is a library, it should provide one thing, say XML parsing, or logging. You should avoid combining multiple purposes into a single package, this will help avoid the dreaded common library. </p><p>In my experience, the common repo ends up tightly coupled to its biggest consumer and that makes TIP it hard to back-port fixes without upgrading both common and consumer in lock step, bringing in a </p><p>lot of unrelated changes and API breakage along the way. </p><p>If your project is an application, like your web application, Kubernetes controller, and so on, then you might have one or more                              packages inside your project. For example, the Kubernetes controller I work on has a single </p><p>package which serves as both the server deployed to a Kubernetes cluster, and a client for debugging </p><p>purposes. </p><p>5.1. Consider fewer, larger packages </p><p>One of the things I tend to pick up in code review for programmers who are transitioning from other languages to Go is they tend to overuse packages. </p><p>Go does not provide elaborate ways of establishing visibility; thing Java’s public , protected , private , and implicit default access modifiers. There is no equivalent of C++’s notion of friend classes. </p><p>In Go we have only two access modifiers, public and private, indicated by the capitalisation of the first letter of the identifier. If an identifier is public, it’s name starts with a capital letter, that identifier can be referenced by any other Go package. </p><p>NOTE You may hear people say exported and not exported as synonyms for public and private.<br> Given the limited controls available to control access to a package’s symbols, what practices should Go programmers </p><p>follow to avoid creating over-complicated package hierarchies? </p><p>main </p><p>cmd/contour </p><p><a href="https://dave.cheney.net/practical-go/presentations/qcon-china.html" target="_blank" rel="noopener">https://dave.cheney.net/practical-go/presentations/qcon-china.html</a> 20/45 </p><p>2018/10/21 Practical Go: Real world advice for writing maintainable Go programs </p><p>TIP Every package, with the exception of cmd/ and internal/ , should contain some source code. </p><p>The advice I find myself repeating is to prefer fewer, larger packages. Your default position should be to not create a new package. That will lead to too many types being made public creating a wide, shallow, API surface for your package.. </p><p>The sections below explores this suggestion in more detail. </p><p>TIP </p><p>Coming from Java? </p><p>If you’re coming from a Java or C# background, consider this rule of thumb. - A Java package is equivalent to a single .go source file. - A Go package is equivalent to a whole Maven module or .NET assembly. </p><p>5.1.1. Arrange code into les by import statements </p><p>If you’re arranging your packages by what they provide to callers, should you do the same for files within a Go package? How do you know when you should break up a .go file into multiple ones? How do you know when you’ve gone to far and should consider consolidating .go file? </p><p>Here are the rules of thumb I use:<br> Start each package with one file. Give that file the same name as the name of the folder. eg. package http </p><p>should be placed in a file called in a directory named http . </p><p>As your package grows you may decide to split apart the various responsibilities into different files. eg,<br> contains the `Request and Response types, client.go contains the Client type, server.go </p><p>contains the type. </p><p>If you find your files have similar import declarations, consider combining them. Alternatively, identify the differences between the import sets and move those </p><p>Different files should be responsible for different areas of the package.                              may be responsible for marshalling of HTTP requests and responses on and off the network,                              may contain the low level network handling logic, client.go and server.go implement the HTTP business logic of request construction or routing, and so on. </p><p>TIP Prefer nouns for source file names. </p><p>The Go compiler compiles each package in parallel. Within a package the compiler compiles each NOTE function (methods are just fancy functions in Go) in parallel. Changing the layout of your code within </p><p>a package does not affect compilation time. </p><p>5.1.2. Prefer internal tests to external tests </p><p>The go tool supports writing your testing package tests in two places. Assuming your package is called http2 , you can write a file and use the declaration. Doing so will compile the code in </p><p>as if it were part of the package. This is known colloquially as an internal test. </p><p>The go tool also supports a special package declaration, ending in test , ie., package http_test . This allows your test files to live alongside your code in the same package, however when those tests are compiled they are not part of your package’s code, they live in their own package. This allows you to write your tests as if you were another package calling into your code. This is known as an _external test. </p><p>.go </p><p>http.go </p><p>messages.go </p><p>Server </p><p>messages.go </p><p>http.go </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http2_test.go</span><br></pre></td></tr></table></figure><p>package http2 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http2_test.go</span><br></pre></td></tr></table></figure><p>http2 </p><p><a href="https://dave.cheney.net/practical-go/presentations/qcon-china.html" target="_blank" rel="noopener">https://dave.cheney.net/practical-go/presentations/qcon-china.html</a> 21/45 </p><p>2018/10/21 Practical Go: Real world advice for writing maintainable Go programs </p><p>I recommend using internal tests when writing unit tests for your package. This allows you to test each function or method directly, avoiding the bureaucracy of external testing. </p><p>However, you should place your Example test functions in an external test file. This ensures that when viewed in godoc, the examples have the appropriate package prefix and can be easily copy pasted. </p><p>TIP </p><p>Avoid elaborate package hierarchies, resist the desire to apply taxonomy </p><p>With one exception, which we’ll talk about next, the hierarchy of Go packages has no meaning to the go tool. For example, the net/http package is not a child or sub-package of the net package. </p><p>If you find you have created intermediate directories in your project which contain no .go files, you may have failed to follow this advice. </p><p>5.1.3. Use internal packages to reduce your public API surface </p><p>If your project contains multiple packages you may have some exported functions which are intended to be used by other packages in your project, but are not intended to be part of your project’s public API. If you find yourself in this situation the go tool recognises a special folder name—not package name–, internal/ which can be used to place code which is public to your project, but private to other projects. </p><p>To create such a package, place it in a directory named internal/ or in a sub-directory of a directory named internal/ . When the go command sees an import of a package with                              in its path, it verifies that the </p><p>package doing the import is within the tree rooted at the parent of the                              directory.<br> For example, a package can be imported only by code in the directory tree rooted at … </p><p>/a/b/c . It cannot be imported by code in                              or in any other repository. [5] 5.2. Keep package main small as small as possible </p><p>Your main function, and                              package should do as little as possible. This is because main.main acts as a singleton; there can only be one                              function in a program, including tests. </p><p>Because main.main is a singleton there are a lot of assumptions built into the things that main.main will call that they will only be called during main.main or main.init, and only called once. This makes it hard to write tests for code written in main.main , thus you should aim to move as much of your business logic out of your main function and ideally out of your main package. </p><p>TIP </p><p>main should parse flags, open connections to databases, loggers, and such, then hand off execution to a high level object. </p><p>\6. API Design </p><p>The last piece of design advice I’m going to give today I feel is the most important. </p><p>All of the suggestions I’ve made so far are just that, suggestions. These are the way I try to write my Go, but I’m not going to push them hard in code review. </p><p>However when it comes to reviewing APIs during code review, I am less forgiving. This is because everything I’ve talked about so far can be fixed without breaking backward compatibility; they are, for the most part, implementation details. </p><p>When it comes to the public API of a package, it pays to put considerable thought into the initial design, because changing that design later is going to be disruptive for people who are already using your API. </p><p><a href="https://dave.cheney.net/practical-go/presentations/qcon-china.html" target="_blank" rel="noopener">https://dave.cheney.net/practical-go/presentations/qcon-china.html</a> 22/45 </p><p>internal </p><p>main </p><p>…/a/b/g </p><p>internal </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.../a/b/c/internal/d/e/f</span><br></pre></td></tr></table></figure><p>main </p><p>2018/10/21 Practical Go: Real world advice for writing maintainable Go programs </p><p>“6.1. Design APIs that are hard to misuse.<br> APIs should be easy to use and hard to misuse. </p><p>— Josh Bloch [3] </p><p>If you take anything away from this presentation, it should be this advice from Josh Bloch. If an API is hard to use for simple things, then every invocation of the API will look complicated. When the actual invocation of the API is complicated it will be less obvious and more likely to be overlooked. </p><p>6.1.1. Be wary of functions which take several parameters of the same type </p><p>A good example of a simple looking, but hard to use correctly API is one which takes two or more parameters of the same type. Let’s compare two function signatures: </p><p>What’s the difference between these two functions? Obviously one returns the maximum of two numbers, the other copies a file, but that’s not the important thing. </p><p>Max is commutative; the order of the parameters does not matter. The maximum of eight and ten is ten regardless of if I compare eight to ten or ten two eight. </p><p>However, this property does not hold true for CopyFile . </p><p>Which one of these statements made a backup of your presentation and which one overwrite your presentation with last week’s version? You can’t tell without consulting the documentation. A code reviewer cannot know if you’ve got the order correct without consulting the documentation. </p><p>One possible solution to this is to introduce a helper type which will be responsible for calling CopyFile correctly. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">func Max(a, b int) int</span><br><span class="line">func CopyFile(to, from string) error</span><br><span class="line">Max(8, 10) // 10</span><br><span class="line">Max(10, 8) // 10</span><br><span class="line">CopyFile(&quot;/tmp/backup&quot;, &quot;presentation.md&quot;)</span><br><span class="line">CopyFile(&quot;presentation.md&quot;, &quot;/tmp/backup&quot;)</span><br><span class="line">type Source string</span><br><span class="line">func (src Source) CopyTo(dest string) error &#123;</span><br><span class="line">    return CopyFile(dest, string(src))</span><br></pre></td></tr></table></figure><p>} </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">    var from Source = &quot;presentation.md&quot;</span><br><span class="line">    from.CopyTo(&quot;/tmp/backup&quot;)</span><br></pre></td></tr></table></figure><p>} </p><p>GO </p><p>In this way CopyFile is always called correctly—this can be asserted with a unit test—and can possibly be made private, further reducing the likelihood of misuse. </p><p><a href="https://dave.cheney.net/practical-go/presentations/qcon-china.html" target="_blank" rel="noopener">https://dave.cheney.net/practical-go/presentations/qcon-china.html</a> 23/45 </p><p>2018/10/21 Practical Go: Real world advice for writing maintainable Go programs </p><p>TIP APIs with multiple parameters of the same type are hard to use correctly. 6.2. Design APIs for their default use case </p><p>A few years ago I gave a talk [6] about using functional options [7] to make APIs easier to use for their default case. </p><p>The gist of this talk was you should design your APIs for the common use case. Sad another way, your API should not require the caller to provide parameters which they don’t care about. </p><p>6.2.1. Discourage the use of nil as a parameter </p><p>I opened this chapter with the suggestion that you shouldn’t force the caller of your API into providing you parameters when they don’t really care what those parameters mean. This is what I mean when I say design APIs for their default use case. </p><p>Here’s an example from the net/http package </p><p>package http </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// ListenAndServe listens on the TCP network address addr and then calls</span><br><span class="line">// Serve with handler to handle requests on incoming connections.</span><br><span class="line">// Accepted connections are configured to enable TCP keep-alives.</span><br><span class="line">//</span><br><span class="line">// The handler is typically nil, in which case the DefaultServeMux is used.</span><br><span class="line">//</span><br><span class="line">// ListenAndServe always returns a non-nil error.</span><br><span class="line">func ListenAndServe(addr string, handler Handler) error &#123;</span><br></pre></td></tr></table></figure><p>ListenAndServe takes two parameters, a TCP address to listen for incoming connections, and http.Handler to handle the incoming HTTP request. Serve allows the second parameter to be nil , and notes that usually the caller will pass nil indicating that they want to use http.DefaultServeMux as the implicit parameter. </p><p>Now the caller of Serve has two ways to do the same thing. </p><p>Both do exactly the same thing. </p><p>This                              behaviour is viral. The http package also has a http.Serve helper, which you can reasonably imagine that builds upon like this </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http.ListenAndServe(&quot;0.0.0.0:8080&quot;, nil)</span><br><span class="line">http.ListenAndServe(&quot;0.0.0.0:8080&quot;, http.DefaultServeMux)</span><br></pre></td></tr></table></figure><p>nil </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ListenAndServe</span><br><span class="line">func ListenAndServe(addr string, handler Handler) error &#123;</span><br><span class="line">    l, err := net.Listen(&quot;tcp&quot;, addr)</span><br><span class="line">    if err != nil &#123;</span><br></pre></td></tr></table></figure><p>return err } </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">    defer l.Close()</span><br><span class="line">    return Serve(l, handler)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GO </p><p><a href="https://dave.cheney.net/practical-go/presentations/qcon-china.html" target="_blank" rel="noopener">https://dave.cheney.net/practical-go/presentations/qcon-china.html</a> 24/45 </p><p>http.Serve </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ListenAndServe</span><br></pre></td></tr></table></figure><p>nil<br> handler </p><p>DefaultServeMux`” logic. </p><p>http.Serve </p><p>Accepting `nil </p><p>nil </p><p>Serve </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http.Serve(nil, nil)</span><br><span class="line">          http.ListenAndServe</span><br><span class="line">DefaultServeMux</span><br></pre></td></tr></table></figure><p>nil </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const root = http.Dir(&quot;/htdocs&quot;)</span><br><span class="line">http.Handle(&quot;/&quot;, http.FileServer(root))</span><br><span class="line">http.ListenAndServe(&quot;0.0.0.0:8080&quot;, nil)</span><br></pre></td></tr></table></figure><p>GO </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const root = http.Dir(&quot;/htdocs&quot;)</span><br><span class="line">http.Handle(&quot;/&quot;, http.FileServer(root))</span><br><span class="line">http.ListenAndServe(&quot;0.0.0.0:8080&quot;, http.DefaultServeMux)</span><br></pre></td></tr></table></figure><p>GO </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const root = http.Dir(&quot;/htdocs&quot;)</span><br><span class="line">mux := http.NewServeMux()</span><br><span class="line">http.Handle(&quot;/&quot;, http.FileServer(root))</span><br><span class="line">http.ListenAndServe(&quot;0.0.0.0:8080&quot;, mux)</span><br></pre></td></tr></table></figure><p>GO </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func ShutdownVMs(ids []string) error</span><br></pre></td></tr></table></figure><p>2018/10/21 </p><p>Practical Go: Real world advice for writing maintainable Go programs </p><p>Because behaviour. In fact, </p><p>permits the caller to pass for the second parameter, also supports this is the one that implements the “if is nil , use </p><p>for one parameter may lead the caller into thinking they can pass for both parameters. However calling like this, </p><p>results in an ugly panic.<br> TIP Don’t mix nil and non nil-able parameters in the same function signature. </p><p>The author of was trying to make the API user’s life easier in the common case, but possibly made the package harder to use safely. </p><p>There is no difference in line count between using explicitly, or implicitly via . </p><p>verses </p><p>and a was this confusion really worth saving one line? </p><p>TIP </p><p>Give serious consideration to how much time helper functions will save the programmer. Clear is better than concise. </p><p>Avoid public APIs with test only parameters </p><p>TIP Avoid exposing APIs with values who only differ in test scope. Instead, use Public wrappers to hide those parameters, use test scoped helpers to set the property in test scope. </p><p>6.2.2. Prefer var args to []T parameters </p><p>It’s very common to write a function or method that takes a slice of values. </p><p><a href="https://dave.cheney.net/practical-go/presentations/qcon-china.html" target="_blank" rel="noopener">https://dave.cheney.net/practical-go/presentations/qcon-china.html</a> </p><p>25/45 </p><p>2018/10/21 Practical Go: Real world advice for writing maintainable Go programs </p><p>This is just an example I made up, but its common to a lot of code I’ve worked on. The problem with signatures like these is they presume that they will be called with more than one entry. However, what I have found is many times these type of functions are called with only one argument, which has to be “boxed” inside a slice just to meet the requirements of the functions signature. </p><p>Additionally, because the ids parameter is a slice, you can pass an empty slice or nil to the function and the compiler will be happy. This adds extra testing load because you should cover these cases in your testing. </p><p>To give an example of this class of API, recently I was refactoring a piece of logic that required me to set some extra fields if at least one of a set of parameters was non zero. The logic looked like this: </p><p>As the if statement was getting very long I wanted to pull the logic of the check out into its own function. This is what I came up with: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">if svc.MaxConnections &gt; 0 || svc.MaxPendingRequests &gt; 0 || svc.MaxRequests &gt; 0 ||</span><br><span class="line">svc.MaxRetries &gt; 0 &#123;</span><br><span class="line">    // apply the non zero parameters</span><br><span class="line">&#125;</span><br><span class="line">// anyPostive indicates if any value is greater than zero.</span><br><span class="line">func anyPositive(values ...int) bool &#123;</span><br><span class="line">    for _, v := range values &#123;</span><br><span class="line">        if v &gt; 0 &#123;</span><br></pre></td></tr></table></figure><p>return true } </p><p>} </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">    return false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GO </p><p>This enabled me to make the condition where the inner block will be executed clear to the reader: </p><p>However there is a problem with anyPositive , someone could accidentally invoke it like this if anyPositive() { … } </p><p>In this case anyPositive would return false because it would execute zero iterations and immediately return false . This isn’t the worst thing in the world — that would be if anyPositive returned true when passed no </p><p>arguments. </p><p>Nevertheless it would be be better if we could change the signature of anyPositive to enforce that the caller should pass at least one argument. We can do that by combining normal and vararg parameters like this: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if anyPositive(svc.MaxConnections, svc.MaxPendingRequests, svc.MaxRequests, svc.MaxRetries) &#123;</span><br><span class="line">        // apply the non zero parameters</span><br></pre></td></tr></table></figure><p>} </p><p><a href="https://dave.cheney.net/practical-go/presentations/qcon-china.html" target="_blank" rel="noopener">https://dave.cheney.net/practical-go/presentations/qcon-china.html</a> 26/45 </p><p>2018/10/21 Practical Go: Real world advice for writing maintainable Go programs </p><p>Now anyPositive cannot be called with less than one argument. 6.3. Let functions dene the behaviour they requires </p><p>Let’s say I’ve been given a task to write a function that persists a Document structure to disk. </p><p>I could specify this function, Save, which takes an *os.File as the destination to write the Document . But this has a few problems </p><p>The signature of Save precludes the option to write the data to a network location. Assuming that network storage is likely to become requirement later, the signature of this function would have to change, impacting all its callers. </p><p>Save is also unpleasant to test, because it operates directly with files on disk. So, to verify its operation, the test would have to read the contents of the file after being written. </p><p>And I would have to ensure that f was written to a temporary location and always removed afterwards. </p><p><em>os.File also defines a lot of methods which are not relevant to , like reading directories and checking to see if a path is a symlink. It would be useful if the signature of the function could describe only the parts of </em>os.File that were relevant. </p><p>What can we do ? </p><p>Using io.ReadWriteCloser we can apply the interface segregation principle to redefine Save to take an interface that describes more general file shaped things. </p><p>With this change, any type that implements the io.ReadWriteCloser interface can be substituted for the previous *os.File . </p><p>This makes Save both broader in its application, and clarifies to the caller of Save which methods of the *os.File type are relevant to its operation. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// Save writes the contents of doc to the file f.</span><br><span class="line">func Save(f *os.File, doc *Document) error</span><br></pre></td></tr></table></figure><p>Save </p><p>Save </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// Save writes the contents of doc to the supplied</span><br><span class="line">// ReadWriterCloser.</span><br><span class="line">func Save(rwc io.ReadWriteCloser, doc *Document) error</span><br><span class="line">// anyPostive indicates if any value is greater than zero.</span><br><span class="line">func anyPositive(first int, rest ...int) bool &#123;</span><br><span class="line">    if first &gt; 0 &#123;</span><br><span class="line">        return true</span><br><span class="line">    &#125;</span><br><span class="line">    for _, v := range rest &#123;</span><br><span class="line">        if v &gt; 0 &#123;</span><br><span class="line">            return true</span><br></pre></td></tr></table></figure><p>} } </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">    return false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GO </p><p><a href="https://dave.cheney.net/practical-go/presentations/qcon-china.html" target="_blank" rel="noopener">https://dave.cheney.net/practical-go/presentations/qcon-china.html</a> 27/45 </p><p>2018/10/21 Practical Go: Real world advice for writing maintainable Go programs </p><p>And as the author of I no longer have the option to call those unrelated methods on as it is hidden behind the interface. </p><p>But we can take the interface segregation principle a bit further. </p><p>Firstly, it is unlikely that if Save follows the single responsibility principle, it will read the file it just wrote to verify its contents—that should be responsibility of another piece of code. </p><p>So we can narrow the specification for the interface we pass to Save to just writing and closing.<br> Secondly, by providing Save with a mechanism to close its stream, which we inherited in this desire to make it still </p><p>look like a file, this raises the question of under what circumstances will wc be closed.<br> Possibly Save will call Close unconditionally, or perhaps Close will be called in the case of success. </p><p>This presents a problem for the caller of Save as it may want to write additional data to the stream after the document is written. </p><p>A better solution would be to redefine Save to take only an io.Writer , stripping it completely of the responsibility to do anything but write data to a stream. </p><p>By applying the interface segregation principle to our Save function, the results has simultaneously been a function which is the most specific in terms of its requirements—it only needs a thing that is writable—and the most general in its function, we can now use Save to save our data to anything which implements io.Writer. </p><p>\7. Error handling </p><p>I’ve given several presentations about error handling [8] and written a lot about error handling on my blog. I also spoke a lot about error handling in yesterday’s session so I won’t repeat what I’ve said. </p><p><a href="https://dave.cheney.net/2014/12/24/inspecting-errors" target="_blank" rel="noopener">https://dave.cheney.net/2014/12/24/inspecting-errors</a> <a href="https://dave.cheney.net/2016/04/07/constant-errors" target="_blank" rel="noopener">https://dave.cheney.net/2016/04/07/constant-errors</a> </p><p>Instead I want to cover two other areas related to error handling. </p><p>7.1. Eliminate error handling by eliminating errors </p><p>If you were in my presentation yesterday I talked about the draft proposals for improving error handling. But do you know what is better than an improved syntax for handling errors? Not needing to handle errors at all. </p><p>Save </p><p>*os.File </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// Save writes the contents of doc to the supplied</span><br><span class="line">// WriteCloser.</span><br><span class="line">func Save(wc io.WriteCloser, doc *Document) error</span><br><span class="line">// Save writes the contents of doc to the supplied</span><br><span class="line">// Writer.</span><br><span class="line">func Save(w io.Writer, doc *Document) error</span><br></pre></td></tr></table></figure><p>NOTE </p><p>I’m not saying “remove your error handling”. What I am suggesting is, change your code so you do not have errors to handle. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">io.ReadWriteCloser</span><br></pre></td></tr></table></figure><p><a href="https://dave.cheney.net/practical-go/presentations/qcon-china.html" target="_blank" rel="noopener">https://dave.cheney.net/practical-go/presentations/qcon-china.html</a> 28/45 </p><p>2018/10/21 Practical Go: Real world advice for writing maintainable Go programs </p><p>This section draws inspiration from John Ousterhout’s recently book, A philosophy of Software Design [9]. One of the chapters in that book is called “Define Errors Out of Existence”. We’re going to try to apply this advice to Go. </p><p>7.1.1. Counting lines </p><p>Let’s write a function to count the number of lines in a file. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">func CountLines(r io.Reader) (int, error) &#123;</span><br><span class="line">    var (</span><br><span class="line">        br    = bufio.NewReader(r)</span><br><span class="line">        lines int</span><br><span class="line">        err   error</span><br></pre></td></tr></table></figure><p>) </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for &#123;</span><br><span class="line">    _, err = br.ReadString(&apos;\n&apos;)</span><br><span class="line">    lines++</span><br><span class="line">    if err != nil &#123;</span><br></pre></td></tr></table></figure><p>break } </p><p>} </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if err != io.EOF &#123;</span><br><span class="line">    return 0, err</span><br></pre></td></tr></table></figure><p>} </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">    return lines, nil</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GO </p><p>Because we’re following our advice from previous sections, CountLines takes an io.Reader, not a *File; its the job of the caller to provide the io.Reader who’s contents we want to count. </p><p>We construct a bufio.Reader , and then sit in a loop calling the ReadString method, incrementing a counter until we reach the end of the file, then we return the number of lines read. </p><p>At least that’s the code we want to write, but instead this function is made more complicated by error handling. For example, there is this strange construction, </p><p>We increment the count of lines before checking the error—that looks odd.<br> The reason we have to write it this way is ReadString will return an error if it encounters and end-of-file before </p><p>hitting a newline character. This can happen if there is no final newline in the file.<br> To try to fix this, we rearrange the logic to increment the line count, then see if we need to exit the loop. </p><p>NOTE this logic still isn’t perfect, can you spot the bug? </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">_, err = br.ReadString(&apos;\n&apos;)</span><br><span class="line">lines++</span><br><span class="line">if err != nil &#123;</span><br></pre></td></tr></table></figure><p>break } </p><p>GO </p><p><a href="https://dave.cheney.net/practical-go/presentations/qcon-china.html" target="_blank" rel="noopener">https://dave.cheney.net/practical-go/presentations/qcon-china.html</a> 29/45 </p><p>2018/10/21 Practical Go: Real world advice for writing maintainable Go programs </p><p>But we’re not done checking errors yet. will return when it hits the end of the file. This is expected,                                  needs some way of saying stop, there is nothing more to read. So before we return the error to the caller of                                  , we need to check if the error was not io.EOF , and in that case propagate it up, otherwise we return nil to say that everything worked fine. </p><p>I think this is a good example of Russ Cox’s observation that error handling can obscure the operation of the function. Let’s look at an improved version. </p><p>ReadString </p><p>io.EOF </p><p>ReadString </p><p>CountLine </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">func CountLines(r io.Reader) (int, error) &#123;</span><br><span class="line">    sc := bufio.NewScanner(r)</span><br><span class="line">    lines := 0</span><br><span class="line">    for sc.Scan() &#123;</span><br><span class="line">        lines++</span><br></pre></td></tr></table></figure><p>} </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">    return lines, sc.Err()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GO </p><p>This improved version switches from using bufio.Reader to bufio.Scanner . </p><p>Under the hood bufio.Scanner uses , but it adds a nice layer of abstraction which helps remove the error handling with obscured the operation of                                  . </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bufio.Reader</span><br></pre></td></tr></table></figure><p>CountLines </p><p>NOTE </p><p>The method, the body of our </p><p>bufio.Scanner can scan for any pattern, but by default it looks for newlines. </p><p>returns true if the scanner has matched a line of text and has not encountered an error. So, loop will be called only when there is a line of text in the scanner’s buffer. This means our revised </p><p>sc.Scan() </p><p>for </p><p>CountLines correctly handles the case where there is no trailing newline, and also handles the case where the file was empty. </p><p>Secondly, as sc.Scan returns false once an error is encountered, our for loop will exit when the end-of-file is reached or an error is encountered. The type memoises the first error it encountered and we can recover that error once we’ve exited the loop using the method. </p><p>Lastly, sc.Err() takes care of handling io.EOF and will convert it to a nil if the end of file was reached without encountering another error. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bufio.Scanner</span><br></pre></td></tr></table></figure><p>sc.Err() </p><p>TIP </p><p>When you find yourself faced with overbearing error handling, try to extract some of the operations into a helper type. </p><p>7.1.2. WriteResponse </p><p>My second example is inspired from the Errors are values blog post [10]. </p><p>Earlier in this presentation We’ve seen examples dealing with opening, writing and closing files. The error handling is present, but not overwhelming as the operations can be encapsulated in helpers like ioutil.ReadFile and </p><p>ioutil.WriteFile . However when dealing with low level network protocols it becomes necessary to build the response directly using I/O primitives the error handling can become repetitive. Consider this fragment of a HTTP server which is constructing the HTTP response. </p><p><a href="https://dave.cheney.net/practical-go/presentations/qcon-china.html" target="_blank" rel="noopener">https://dave.cheney.net/practical-go/presentations/qcon-china.html</a> 30/45 </p><p>2018/10/21 Practical Go: Real world advice for writing maintainable Go programs </p><p>First we construct the status line using fmt.Fprintf , and check the error. Then for each header we write the header key and value, checking the error each time. Lastly we terminate the header section with an additional \r\n , check the error, and copy the response body to the client. Finally, although we don’t need to check the error from io.Copy , we need to translate it from the two return value form that io.Copy returns into the single return value that </p><p>WriteResponse returns.<br> That’s a lot of repetitive work. But we can make it easier on ourselves by introducing a small wrapper type, </p><p>errWriter . </p><p>errWriter fulfils the io.Writer contract so it can be used to wrap an existing io.Writer . errWriter passes writes through to its underlying writer until an error is detected. From that point on, it discards any writes and returns the previous error. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">type Header struct &#123;</span><br><span class="line">    Key, Value string</span><br></pre></td></tr></table></figure><p>} </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">type Status struct &#123;</span><br><span class="line">    Code   int</span><br><span class="line">    Reason string</span><br><span class="line">&#125;</span><br><span class="line">func WriteResponse(w io.Writer, st Status, headers []Header, body io.Reader) error &#123;</span><br><span class="line">    _, err := fmt.Fprintf(w, &quot;HTTP/1.1 %d %s\r\n&quot;, st.Code, st.Reason)</span><br><span class="line">    if err != nil &#123;</span><br></pre></td></tr></table></figure><p>return err } </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for _, h := range headers &#123;</span><br><span class="line">    _, err := fmt.Fprintf(w, &quot;%s: %s\r\n&quot;, h.Key, h.Value)</span><br><span class="line">    if err != nil &#123;</span><br></pre></td></tr></table></figure><p>return err } </p><p>} </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if _, err := fmt.Fprint(w, &quot;\r\n&quot;); err != nil &#123;</span><br><span class="line">    return err</span><br></pre></td></tr></table></figure><p>} </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_, err = io.Copy(w, body)</span><br></pre></td></tr></table></figure><p>return err } </p><p>GO </p><p><a href="https://dave.cheney.net/practical-go/presentations/qcon-china.html" target="_blank" rel="noopener">https://dave.cheney.net/practical-go/presentations/qcon-china.html</a> 31/45 </p><p>2018/10/21 Practical Go: Real world advice for writing maintainable Go programs </p><p>Applying errWriter to WriteResponse dramatically improves the clarity of the code. Each of the operations no longer needs to bracket itself with an error check. Reporting the error is moved to the end of the function by inspecting the ew.err field, avoiding the annoying translation from `io.Copy’s return values. </p><p>7.2. Only handle an error once </p><p>Lastly, I want to mention that you should only handle errors once. Handling an error means inspecting the error value, and making a single decision. </p><p>If you make less than one decision, you’re ignoring the error. As we see here, the error from w.WriteAll is being discarded. </p><p>But making more than one decision in response to a single error is also problematic. The following is code that I come across frequently. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// WriteAll writes the contents of buf to the supplied writer.</span><br><span class="line">func WriteAll(w io.Writer, buf []byte) &#123;</span><br></pre></td></tr></table></figure><p>} </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">w.Write(buf)</span><br><span class="line">type errWriter struct &#123;</span><br><span class="line">    io.Writer</span><br></pre></td></tr></table></figure><p>err error } </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">func (e *errWriter) Write(buf []byte) (int, error) &#123;</span><br><span class="line">    if e.err != nil &#123;</span><br><span class="line">        return 0, e.err</span><br><span class="line">    &#125;</span><br><span class="line">    var n int</span><br><span class="line">    n, e.err = e.Writer.Write(buf)</span><br><span class="line">    return n, nil</span><br></pre></td></tr></table></figure><p>} </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">func WriteResponse(w io.Writer, st Status, headers []Header, body io.Reader) error &#123;</span><br><span class="line">    ew := &amp;errWriter&#123;Writer: w&#125;</span><br><span class="line">    fmt.Fprintf(ew, &quot;HTTP/1.1 %d %s\r\n&quot;, st.Code, st.Reason)</span><br><span class="line">    for _, h := range headers &#123;</span><br><span class="line">        fmt.Fprintf(ew, &quot;%s: %s\r\n&quot;, h.Key, h.Value)</span><br></pre></td></tr></table></figure><p>} </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fmt.Fprint(ew, &quot;\r\n&quot;)</span><br><span class="line">io.Copy(ew, body)</span><br><span class="line">return ew.err</span><br></pre></td></tr></table></figure><p>} </p><p>GO </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">func WriteAll(w io.Writer, buf []byte) error &#123;</span><br><span class="line">    _, err := w.Write(buf)</span><br><span class="line">    if err != nil &#123;</span><br><span class="line">        log.Println(&quot;unable to write:&quot;, err) // annotated error goes to log file</span><br><span class="line">        return err                           // unannotated error returned to caller</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>return nil } </p><p>GO </p><p><a href="https://dave.cheney.net/practical-go/presentations/qcon-china.html" target="_blank" rel="noopener">https://dave.cheney.net/practical-go/presentations/qcon-china.html</a> 32/45 </p><p>2018/10/21 Practical Go: Real world advice for writing maintainable Go programs </p><p>In this example if an error occurs during , a line will be written to a log file, noting the file and line that the error occurred, and the error is also returned to the caller, who possibly will log it, and return it, all the way back up to the top of the program. </p><p>The caller is probably doing the same </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">func WriteConfig(w io.Writer, conf *Config) error &#123;</span><br><span class="line">    buf, err := json.Marshal(conf)</span><br><span class="line">    if err != nil &#123;</span><br><span class="line">        log.Printf(&quot;could not marshal config: %v&quot;, err)</span><br></pre></td></tr></table></figure><p>return err } </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if err := WriteAll(w, buf); err != nil &#123;</span><br><span class="line">    log.Println(&quot;could not write config: %v&quot;, err)</span><br><span class="line">    return err</span><br></pre></td></tr></table></figure><p>} </p><p>return nil } </p><p>GO </p><p>So you get a stack of duplicate lines in your log file, </p><p>but at the top of the program you get the original error without any context. </p><p>I want to dig into this a little further because I don’t see the problems with logging and returning as just a matter of personal preference. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">unable to write: io.EOF</span><br><span class="line">could not write config: io.EOF</span><br><span class="line">err := WriteConfig(f, &amp;conf)</span><br><span class="line">fmt.Println(err) // io.EOF</span><br><span class="line">func WriteConfig(w io.Writer, conf *Config) error &#123;</span><br><span class="line">    buf, err := json.Marshal(conf)</span><br><span class="line">    if err != nil &#123;</span><br><span class="line">        log.Printf(&quot;could not marshal config: %v&quot;, err)</span><br><span class="line">        // oops, forgot to return</span><br><span class="line">    &#125;</span><br><span class="line">    if err := WriteAll(w, buf); err != nil &#123;</span><br><span class="line">        log.Println(&quot;could not write config: %v&quot;, err)</span><br><span class="line">        return err</span><br></pre></td></tr></table></figure><p>} </p><p>return nil } </p><p>GO </p><p>The problem I see a lot is programmers forgetting to return from an error. As we talked about earlier, Go style is to use guard clauses, checking preconditions as the function progresses and returning early. </p><p>In this example the author checked the error, logged it, but forgot to return. This has caused a subtle bug. </p><p>w.Write </p><p><a href="https://dave.cheney.net/practical-go/presentations/qcon-china.html" target="_blank" rel="noopener">https://dave.cheney.net/practical-go/presentations/qcon-china.html</a> 33/45 </p><p>2018/10/21 Practical Go: Real world advice for writing maintainable Go programs </p><p>The contract for error handling in Go says that you cannot make any assumptions about the contents of other return values in the presence of an error. As the JSON marshalling failed, the contents of buf are unknown, maybe it contains nothing, but worse it could contain a 1/2 written JSON fragment. </p><p>Because the programmer forgot to return after checking and logging the error, the corrupt buffer will be passed to WriteAll , which will probably succeed and so the config file will be written incorrectly. However the function will </p><p>return just fine, and the only indication that a problem happened will be a single log line complaining about marshalling JSON, not a failure to write the config. </p><p>7.2.1. Adding context to errors </p><p>The bug occurred because the author was trying to add context to the error message. They were trying to leave themselves a breadcrumb to point them back to the source of the error. </p><p>Let’s look at another way to do the same thing using fmt.Errorf . </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">func WriteConfig(w io.Writer, conf *Config) error &#123;</span><br><span class="line">    buf, err := json.Marshal(conf)</span><br><span class="line">    if err != nil &#123;</span><br><span class="line">        return fmt.Errorf(&quot;could not marshal config: %v&quot;, err)</span><br><span class="line">    &#125;</span><br><span class="line">    if err := WriteAll(w, buf); err != nil &#123;</span><br><span class="line">        return fmt.Errorf(&quot;could not write config: %v&quot;, err)</span><br></pre></td></tr></table></figure><p>} </p><p>return nil } </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">func WriteAll(w io.Writer, buf []byte) error &#123;</span><br><span class="line">    _, err := w.Write(buf)</span><br><span class="line">    if err != nil &#123;</span><br><span class="line">        return fmt.Errorf(&quot;write failed: %v&quot;, err)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>return nil } </p><p>GO </p><p>By combining the annotation of the error with returning onto one line there it is harder to forget to return an error and avoid continuing accidentally. </p><p>If an I/O error occurs writing the file, the error’s `Error() method will report something like this; could not write config: write failed: input/output error </p><p>7.2.2. Wrapping errors with github.com/pkg/errors </p><p>The fmt.Errorf pattern works well for annotating the error message, but it does so at the cost of obscuring the type of the original error. I’ve argued that treating errors as opaque values is important to producing software which is loosely coupled, so the face that the type of the original error should not matter if the only thing you do with an error value is </p><p>\1. Check that it is not nil . 2. Print or log it. </p><p>However there are some cases, I believe they are infrequent, where you do need to recover the original error. In that case you can use something like my errors package to annotate errors like this </p><p><a href="https://dave.cheney.net/practical-go/presentations/qcon-china.html" target="_blank" rel="noopener">https://dave.cheney.net/practical-go/presentations/qcon-china.html</a> 34/45 </p><p>2018/10/21 Practical Go: Real world advice for writing maintainable Go programs </p><p>Now the error reported will be the nice K&amp;D [11] style error, </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">could not read config: open failed: open /Users/dfc/.settings.xml: no such file or directory</span><br></pre></td></tr></table></figure><p>and the error value retains a reference to the original cause. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">    _, err := ReadConfig()</span><br><span class="line">    if err != nil &#123;</span><br><span class="line">        fmt.Printf(&quot;original error: %T %v\n&quot;, errors.Cause(err), errors.Cause(err))</span><br><span class="line">        fmt.Printf(&quot;stack trace:\n%+v\n&quot;, err)</span><br><span class="line">        os.Exit(1)</span><br></pre></td></tr></table></figure><p>} } </p><p>GO </p><p>Thus you can recover the original error and print a stack trace; </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">func ReadFile(path string) ([]byte, error) &#123;</span><br><span class="line">    f, err := os.Open(path)</span><br><span class="line">    if err != nil &#123;</span><br><span class="line">        return nil, errors.Wrap(err, &quot;open failed&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">    defer f.Close()</span><br><span class="line">    buf, err := ioutil.ReadAll(f)</span><br><span class="line">    if err != nil &#123;</span><br><span class="line">        return nil, errors.Wrap(err, &quot;read failed&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">    return buf, nil</span><br><span class="line">&#125;</span><br><span class="line">func ReadConfig() ([]byte, error) &#123;</span><br><span class="line">    home := os.Getenv(&quot;HOME&quot;)</span><br><span class="line">    config, err := ReadFile(filepath.Join(home, &quot;.settings.xml&quot;))</span><br><span class="line">    return config, errors.WithMessage(err, &quot;could not read config&quot;)</span><br></pre></td></tr></table></figure><p>} </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">    _, err := ReadConfig()</span><br><span class="line">    if err != nil &#123;</span><br><span class="line">        fmt.Println(err)</span><br></pre></td></tr></table></figure><p>os.Exit(1) } </p><p>} </p><p>GO </p><p><a href="https://dave.cheney.net/practical-go/presentations/qcon-china.html" target="_blank" rel="noopener">https://dave.cheney.net/practical-go/presentations/qcon-china.html</a> 35/45 </p><p>2018/10/21 Practical Go: Real world advice for writing maintainable Go programs </p><p>Using the errors package gives you the ability to add context to error values, in a way that is inspectable by both a human and a machine. If you came to my presentation yesterday you’ll know that wrapping is moving into the standard library in an upcoming Go release. </p><p>\8. Concurrency </p><p>Often Go is chosen for a project because of its concurrency features. The Go team have gone to great lengths to make concurrency in Go cheap (in terms of hardware resources) and performant, however it is possible to use Go’s concurrency features to write code which is neither performent or reliable. With the time I have left I want to leave you with some advice for avoid some of the pitfalls that come with Go’s concurrency features. </p><p>Go features first class support for concurrency with channels, and the select and go statements. If you’ve learnt Go formally from a book or training course, you might have noticed that the concurrency section is always one of the last you’ll cover. This workshop is no different, I have chosen to cover concurrency last, as if it is somehow additional to the regular the skills a Go programmer should master. </p><p>There is a dichotomy here; Go’s headline feature is our simple, lightweight concurrency model. As a product, our language almost sells itself on this on feature alone. On the other hand, there is a narrative that concurrency isn’t actually that easy to use, otherwise authors wouldn’t make it the last chapter in their book and we wouldn’t look back on our formative efforts with regret. </p><p>This section discusses some pitfalls of naive usage of Go’s concurrency features. </p><p>8.1. Keep yourself busy or do the work yourself </p><p>What is the problem with this program? </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">original error: *os.PathError open /Users/dfc/.settings.xml: no such file or directory</span><br><span class="line">stack trace:</span><br><span class="line">open /Users/dfc/.settings.xml: no such file or directory</span><br><span class="line">open failed</span><br><span class="line">main.ReadFile</span><br><span class="line">        /Users/dfc/devel/practical-go/src/errors/readfile2.go:16</span><br><span class="line">main.ReadConfig</span><br><span class="line">        /Users/dfc/devel/practical-go/src/errors/readfile2.go:29</span><br><span class="line">main.main</span><br><span class="line">        /Users/dfc/devel/practical-go/src/errors/readfile2.go:35</span><br><span class="line">runtime.main</span><br><span class="line">        /Users/dfc/go/src/runtime/proc.go:201</span><br><span class="line">runtime.goexit</span><br><span class="line">        /Users/dfc/go/src/runtime/asm_amd64.s:1333</span><br><span class="line">could not read config</span><br></pre></td></tr></table></figure><p><a href="https://dave.cheney.net/practical-go/presentations/qcon-china.html" target="_blank" rel="noopener">https://dave.cheney.net/practical-go/presentations/qcon-china.html</a> 36/45 </p><p>2018/10/21 Practical Go: Real world advice for writing maintainable Go programs </p><p>The program does what we intended, it serves a simple web server. However it also does something else at the same time, it wastes CPU in an infinite loop. This is because the for{} on the last line of main is going to block the main goroutine because it doesn’t do any IO, wait on a lock, send or receive on a channel, or otherwise communicate with the scheduler. </p><p>As the Go runtime is mostly cooperatively scheduled, this program is going to spin fruitlessly on a single CPU, and may eventually end up live-locked. </p><p>How could we fix this? Here’s one suggestion. </p><p>package main </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import (</span><br><span class="line">    &quot;fmt&quot;</span><br><span class="line">    &quot;log&quot;</span><br></pre></td></tr></table></figure><p>“net/http” </p><p>“runtime” ) </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">    http.HandleFunc(&quot;/&quot;, func(w http.ResponseWriter, r *http.Request) &#123;</span><br><span class="line">        fmt.Fprintln(w, &quot;Hello, GopherCon SG&quot;)</span><br><span class="line">    &#125;)</span><br><span class="line">    go func() &#123;</span><br><span class="line">        if err := http.ListenAndServe(&quot;:8080&quot;, nil); err != nil &#123;</span><br><span class="line">            log.Fatal(err)</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>}() </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for &#123;</span><br><span class="line">    runtime.Gosched()</span><br></pre></td></tr></table></figure><p>} } </p><p>GO </p><p>package main </p><p>GO </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import (</span><br><span class="line">    &quot;fmt&quot;</span><br><span class="line">    &quot;log&quot;</span><br></pre></td></tr></table></figure><p>“net/http” ) </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">    http.HandleFunc(&quot;/&quot;, func(w http.ResponseWriter, r *http.Request) &#123;</span><br><span class="line">        fmt.Fprintln(w, &quot;Hello, GopherCon SG&quot;)</span><br><span class="line">    &#125;)</span><br><span class="line">    go func() &#123;</span><br><span class="line">        if err := http.ListenAndServe(&quot;:8080&quot;, nil); err != nil &#123;</span><br><span class="line">            log.Fatal(err)</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>}() </p><p>for { </p><p>} } </p><p><a href="https://dave.cheney.net/practical-go/presentations/qcon-china.html" target="_blank" rel="noopener">https://dave.cheney.net/practical-go/presentations/qcon-china.html</a> 37/45 </p><p>2018/10/21 Practical Go: Real world advice for writing maintainable Go programs </p><p>This might look silly, but it’s a common common solution I see in the wild. It’s symptomatic of not understanding the underlying problem. </p><p>Now, if you’re a little more experienced with go, you might instead write something like this. </p><p>package main </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import (</span><br><span class="line">    &quot;fmt&quot;</span><br><span class="line">    &quot;log&quot;</span><br></pre></td></tr></table></figure><p>“net/http” ) </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">    http.HandleFunc(&quot;/&quot;, func(w http.ResponseWriter, r *http.Request) &#123;</span><br><span class="line">        fmt.Fprintln(w, &quot;Hello, GopherCon SG&quot;)</span><br><span class="line">    &#125;)</span><br><span class="line">    go func() &#123;</span><br><span class="line">        if err := http.ListenAndServe(&quot;:8080&quot;, nil); err != nil &#123;</span><br><span class="line">            log.Fatal(err)</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>}() </p><p>select {} } </p><p>GO </p><p>An empty select statement will block forever. This is a useful property because now we’re not spinning a whole CPU just to call runtime.GoSched() . However, we’re only treating the symptom, not the cause. </p><p>I want to present to you another solution, one which has hopefully already occurred to you. Rather than run<br> in a goroutine, leaving us with the problem of what to do with the main goroutine, simply run </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http.ListenAndServe</span><br><span class="line">http.ListenAndServe</span><br></pre></td></tr></table></figure><p>TIP </p><p>on the main goroutine itself. </p><p>If the main.main function of a Go program returns then the Go program will unconditionally exit no matter what other goroutines started by the program over time are doing. </p><p>package main </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import (</span><br><span class="line">    &quot;fmt&quot;</span><br><span class="line">    &quot;log&quot;</span><br></pre></td></tr></table></figure><p>“net/http” ) </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">    http.HandleFunc(&quot;/&quot;, func(w http.ResponseWriter, r *http.Request) &#123;</span><br><span class="line">        fmt.Fprintln(w, &quot;Hello, GopherCon SG&quot;)</span><br><span class="line">    &#125;)</span><br><span class="line">    if err := http.ListenAndServe(&quot;:8080&quot;, nil); err != nil &#123;</span><br><span class="line">        log.Fatal(err)</span><br></pre></td></tr></table></figure><p>} } </p><p>GO </p><p>So this is my first piece of advice: if your goroutine cannot make progress until it gets the result from another, oftentimes it is simpler to just do the work yourself rather than to delegate it. </p><p><a href="https://dave.cheney.net/practical-go/presentations/qcon-china.html" target="_blank" rel="noopener">https://dave.cheney.net/practical-go/presentations/qcon-china.html</a> 38/45 </p><p>2018/10/21 Practical Go: Real world advice for writing maintainable Go programs </p><p>This often eliminates a lot of state tracking and channel manipulation required to plumb a result back from a goroutine to its initiator. </p><p>TIP </p><p>Many Go programmers overuse goroutines, especially when they are starting out. As with all things in life, moderation is the key the key to success. </p><p>8.2. Leave concurrency to the caller </p><p>What is the difference between these two APIs? </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// ListDirectory returns the contents of dir.</span><br><span class="line">func ListDirectory(dir string) ([]string, error)</span><br><span class="line">// ListDirectory returns a channel over which</span><br><span class="line">// directory entries will be published. When the list</span><br><span class="line">// of entries is exhausted, the channel will be closed.</span><br><span class="line">func ListDirectory(dir string) chan string</span><br></pre></td></tr></table></figure><p>Firstly, the obvious differences; the first example reads a directory into a slice then returns the whole slice, or an error if something went wrong. This happens synchronously, the caller of ListDirectory blocks until all directory entries have been read. Depending on how large the directory, this could take a long time, and could potentially allocate a lot of memory building up the slide of directory entry names. </p><p>Lets look at the second example. This is a little more Go like, ListDirectory returns a channel over which directory entries will be passed. When the channel is closed, that is your indication that there are no more directory entries. As the population of the channel happens after ListDirectory returns, ListDirectory is probably starting a goroutine to populate the channel. </p><p>NOTE </p><p>Its not necessary for the second version to actually use a Go routine; it could allocate a channel sufficient to hold all the directory entries without blocking, fill the channel, close it, then return the channel to the caller. But this is unlikely, as this would have the same problems with consuming a large amount of memory to buffer all the results in a channel. </p><p>The channel version of ListDirectory has two further problems: </p><p>By using a closed channel as the signal that there are no more items to process there is no way for ListDirectory to tell the caller that the set of items returned over the channel is incomplete because an error was encountered partway through. There is no way for the caller to tell the difference between an empty directory and an error to read from the directory entirely. Both result in a channel returned from ListDirectory which appears to be closed immediately. </p><p>The caller must continue to read from the channel until it is closed because that is the only way the caller can know that the goroutine which was started to fill the channel has stopped. This is a serious limitation on the use of </p><p>ListDirectory , the caller has to spend time reading from the channel even though it may have received the answer it wanted. It is probably more efficient in terms of memory usage for medium to large directories, but this method is no faster than the original slice based method. </p><p>The solution to the problems of both implementations is to use a callback, a function that is called in the context of each directory entry as it is executed. </p><p><a href="https://dave.cheney.net/practical-go/presentations/qcon-china.html" target="_blank" rel="noopener">https://dave.cheney.net/practical-go/presentations/qcon-china.html</a> 39/45 </p><p>2018/10/21 Practical Go: Real world advice for writing maintainable Go programs </p><p>Not surprisingly this is how the filepath.WalkDir function works. </p><p>If your function starts a goroutine you must provide the caller with a way to explicitly stop that TIP goroutine. It is often easier to leave decision to execute a function asynchronously to the caller of </p><p>that function. </p><p>8.3. Never start a goroutine without when it will stop. </p><p>The previous example showed using a goroutine when one wasn’t really necessary. But one of the driving reasons for using Go is the first class concurrency features the language offers. Indeed there are many instances where you want to exploit the parallelism available in your hardware. To do so, you must use goroutines. </p><p>This simple application serves http traffic on two different ports, port 8080 for application traffic and port 8001 for access to the /debug/pprof endpoint. </p><p>package main </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import (</span><br><span class="line">    &quot;fmt&quot;</span><br></pre></td></tr></table></figure><p>“net/http” </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">    _ &quot;net/http/pprof&quot;</span><br><span class="line">)</span><br><span class="line">func main() &#123;</span><br><span class="line">    mux := http.NewServeMux()</span><br><span class="line">    mux.HandleFunc(&quot;/&quot;, func(resp http.ResponseWriter, req *http.Request) &#123;</span><br><span class="line">        fmt.Fprintln(resp, &quot;Hello, QCon!&quot;)</span><br><span class="line">    &#125;)</span><br><span class="line">    go http.ListenAndServe(&quot;127.0.0.1:8001&quot;, http.DefaultServeMux) // debug</span><br><span class="line">    http.ListenAndServe(&quot;0.0.0.0:8080&quot;, mux)                       // app traffic</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GO </p><p>Although this program isn’t very complicated, it represents the basis of a real application. </p><p>There are a few problems with the application as it stands which will reveal themselves as the application grows, so lets address a few of them now. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func ListDirectory(dir string, fn func(string))</span><br></pre></td></tr></table></figure><p><a href="https://dave.cheney.net/practical-go/presentations/qcon-china.html" target="_blank" rel="noopener">https://dave.cheney.net/practical-go/presentations/qcon-china.html</a> 40/45 </p><p>2018/10/21 Practical Go: Real world advice for writing maintainable Go programs </p><p>By breaking the serveApp and serveDebug handlers out into their own functions we’ve decoupled them from main.main . We’ve also followed the advice from above and make sure that serveApp and serveDebug leave their </p><p>concurrency to the caller. </p><p>But there are some operability problems with this program. If serveApp returns then main.main will return causing the program to shutdown and be restarted by whatever process manager you’re using. </p><p>TIP </p><p>Just as functions in Go leave concurrency to the caller, applications should leave the job of monitoring their status and restarting them if they fail to the program that invoked them. Do not make your applications responsible for restarting themselves, this is a procedure best handled from outside the application. </p><p>However, serveDebug is run in a separate goroutine and if it returns just that goroutine will exit while the rest of the program continues on. Your operations staff will not be happy to find that they cannot get the statistics out of your application when they want too because the /debug handler stopped working a long time ago. </p><p>What we want to ensure is that if any of the goroutines responsible for serving this application stop, we shut down the application. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">func serveApp() &#123;</span><br><span class="line">    mux := http.NewServeMux()</span><br><span class="line">    mux.HandleFunc(&quot;/&quot;, func(resp http.ResponseWriter, req *http.Request) &#123;</span><br><span class="line">        fmt.Fprintln(resp, &quot;Hello, QCon!&quot;)</span><br><span class="line">    &#125;)</span><br><span class="line">    http.ListenAndServe(&quot;0.0.0.0:8080&quot;, mux)</span><br><span class="line">&#125;</span><br><span class="line">func serveDebug() &#123;</span><br><span class="line">    http.ListenAndServe(&quot;127.0.0.1:8001&quot;, http.DefaultServeMux)</span><br></pre></td></tr></table></figure><p>} </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">    go serveDebug()</span><br></pre></td></tr></table></figure><p>serveApp() } </p><p>GO </p><p><a href="https://dave.cheney.net/practical-go/presentations/qcon-china.html" target="_blank" rel="noopener">https://dave.cheney.net/practical-go/presentations/qcon-china.html</a> 41/45 </p><p>2018/10/21 Practical Go: Real world advice for writing maintainable Go programs </p><p>Now serverApp and serveDebug check the error returned from ListenAndServe and call if required. Because both handlers are running in goroutines, we park the main goroutine in a . </p><p>This approach has a number of problems: </p><p>\1. If ListenAndServer returns with a nil error, log.Fatal won’t be called and the HTTP service on that port will shut down without stopping the application. </p><p>\2. log.Fatal calls os.Exit which will unconditionally exit the program; defers won’t be called, other goroutines won’t be notified to shut down, the program will just stop. This makes it difficult to write tests for those functions. </p><p>TIP Only use log.Fatal from main.main or init functions. </p><p>What we’d really like is to pass any error that occurs back to the originator of the goroutine so that it can know why the goroutine stopped, can shut down the process cleanly. </p><p>log.Fatal </p><p>select{} </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">func serveApp() &#123;</span><br><span class="line">    mux := http.NewServeMux()</span><br><span class="line">    mux.HandleFunc(&quot;/&quot;, func(resp http.ResponseWriter, req *http.Request) &#123;</span><br><span class="line">        fmt.Fprintln(resp, &quot;Hello, QCon!&quot;)</span><br><span class="line">    &#125;)</span><br><span class="line">    if err := http.ListenAndServe(&quot;0.0.0.0:8080&quot;, mux); err != nil &#123;</span><br><span class="line">        log.Fatal(err)</span><br></pre></td></tr></table></figure><p>} } </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">func serveDebug() &#123;</span><br><span class="line">    if err := http.ListenAndServe(&quot;127.0.0.1:8001&quot;, http.DefaultServeMux); err != nil &#123;</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>} </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">    go serveDebug()</span><br><span class="line">    go serveApp()</span><br></pre></td></tr></table></figure><p>select {} } </p><p>GO </p><p><a href="https://dave.cheney.net/practical-go/presentations/qcon-china.html" target="_blank" rel="noopener">https://dave.cheney.net/practical-go/presentations/qcon-china.html</a> 42/45 </p><p>2018/10/21 Practical Go: Real world advice for writing maintainable Go programs </p><p>We can use a channel to collect the return status of the goroutine. The size of the channel is equal to the number of goroutines we want to manage so that sending to the done channel will not block, as this will block the shutdown the of goroutine, causing it to leak. </p><p>As there is no way to safely close the done channel we cannot use the for range idiom to loop of the channel until all goroutines have reported in, instead we loop for as many goroutines we started, which is equal to the capacity of the channel. </p><p>Now we have a way to wait for each goroutine to exit cleanly and log any error they encounter. All that is needed is a way to forward the shutdown signal from the first goroutine that exits to the others. </p><p>It turns out that asking a http.Server to shut down is a little involved, so I’ve spun that logic out into a helper function. The serve helper takes an address and http.Handler , similar to http.ListenAndServe , and also a stop channel which we use to trigger the Shutdown method. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">func serveApp() error &#123;</span><br><span class="line">    mux := http.NewServeMux()</span><br><span class="line">    mux.HandleFunc(&quot;/&quot;, func(resp http.ResponseWriter, req *http.Request) &#123;</span><br><span class="line">        fmt.Fprintln(resp, &quot;Hello, QCon!&quot;)</span><br><span class="line">    &#125;)</span><br><span class="line">    return http.ListenAndServe(&quot;0.0.0.0:8080&quot;, mux)</span><br><span class="line">&#125;</span><br><span class="line">func serveDebug() error &#123;</span><br><span class="line">    return http.ListenAndServe(&quot;127.0.0.1:8001&quot;, http.DefaultServeMux)</span><br></pre></td></tr></table></figure><p>} </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">    done := make(chan error, 2)</span><br><span class="line">    go func() &#123;</span><br><span class="line">        done &lt;- serveDebug()</span><br><span class="line">    &#125;()</span><br><span class="line">    go func() &#123;</span><br><span class="line">        done &lt;- serveApp()</span><br></pre></td></tr></table></figure><p>}() </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for i := 0; i &lt; cap(done); i++ &#123;</span><br><span class="line">    if err := &lt;-done; err != nil &#123;</span><br><span class="line">        fmt.Println(&quot;error: %v&quot;, err)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>} } </p><p>GO </p><p><a href="https://dave.cheney.net/practical-go/presentations/qcon-china.html" target="_blank" rel="noopener">https://dave.cheney.net/practical-go/presentations/qcon-china.html</a> 43/45 </p><p>2018/10/21 Practical Go: Real world advice for writing maintainable Go programs </p><p>Now, each time we receive a value on the channel, we close the stop channel which causes all the goroutines waiting on that channel to shut down their . This in turn will cause all the remaining ListenAndServe goroutines to return. Once all the goroutines we started have stopped, main.main returns and the process stops cleanly. </p><p>done </p><p>http.Server </p><p>TIP </p><p>Writing this logic yourself is repetitive and subtle. Consider something like this package, <a href="https://github.com/heptio/workgroup" target="_blank" rel="noopener">https://github.com/heptio/workgroup</a> which will do most of the work for you. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">func serve(addr string, handler http.Handler, stop &lt;-chan struct&#123;&#125;) error &#123;</span><br><span class="line">    s := http.Server&#123;</span><br></pre></td></tr></table></figure><p>Addr: addr, </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    Handler: handler,</span><br><span class="line">&#125;</span><br><span class="line">go func() &#123;</span><br><span class="line">    &lt;-stop // wait for stop signal</span><br><span class="line">    s.Shutdown(context.Background())</span><br></pre></td></tr></table></figure><p>}() </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">    return s.ListenAndServe()</span><br><span class="line">&#125;</span><br><span class="line">func serveApp(stop &lt;-chan struct&#123;&#125;) error &#123;</span><br><span class="line">    mux := http.NewServeMux()</span><br><span class="line">    mux.HandleFunc(&quot;/&quot;, func(resp http.ResponseWriter, req *http.Request) &#123;</span><br><span class="line">        fmt.Fprintln(resp, &quot;Hello, QCon!&quot;)</span><br><span class="line">    &#125;)</span><br><span class="line">    return serve(&quot;0.0.0.0:8080&quot;, mux, stop)</span><br><span class="line">&#125;</span><br><span class="line">func serveDebug(stop &lt;-chan struct&#123;&#125;) error &#123;</span><br><span class="line">    return serve(&quot;127.0.0.1:8001&quot;, http.DefaultServeMux, stop)</span><br></pre></td></tr></table></figure><p>} </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">    done := make(chan error, 2)</span><br><span class="line">    stop := make(chan struct&#123;&#125;)</span><br><span class="line">    go func() &#123;</span><br><span class="line">        done &lt;- serveDebug(stop)</span><br><span class="line">    &#125;()</span><br><span class="line">    go func() &#123;</span><br><span class="line">        done &lt;- serveApp(stop)</span><br></pre></td></tr></table></figure><p>}() </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var stopped bool</span><br><span class="line">for i := 0; i &lt; cap(done); i++ &#123;</span><br><span class="line">    if err := &lt;-done; err != nil &#123;</span><br><span class="line">        fmt.Println(&quot;error: %v&quot;, err)</span><br><span class="line">    &#125;</span><br><span class="line">    if !stopped &#123;</span><br><span class="line">        stopped = true</span><br><span class="line">        close(stop)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>} } </p><p>GO </p><ul><li>下面是David给出的一下关于go的学习参考资料的链接：</li></ul><p><a href="https://dave.cheney.net/practical-go/presentations/qcon-china.html" target="_blank" rel="noopener">https://dave.cheney.net/practical-go/presentations/qcon-china.html</a> 44/45 </p><p>2018/10/21 Practical Go: Real world advice for writing maintainable Go programs </p><ol><li><p><a href="https://gaston.life/books/effective-programming/" target="_blank" rel="noopener">https://gaston.life/books/effective-programming/</a></p></li><li><p><a href="https://talks.golang.org/2014/names.slide#4" target="_blank" rel="noopener">https://talks.golang.org/2014/names.slide#4</a></p></li><li><p><a href="https://www.infoq.com/articles/API-Design-Joshua-Bloch" target="_blank" rel="noopener">https://www.infoq.com/articles/API-Design-Joshua-Bloch</a></p></li><li><p><a href="https://www.lysator.liu.se/c/pikestyle.html" target="_blank" rel="noopener">https://www.lysator.liu.se/c/pikestyle.html</a></p></li><li><p><a href="https://speakerdeck.com/campoy/understanding-nil" target="_blank" rel="noopener">https://speakerdeck.com/campoy/understanding-nil</a></p></li><li><p><a href="https://www.youtube.com/watch?v=Ic2y6w8lMPA" target="_blank" rel="noopener">https://www.youtube.com/watch?v=Ic2y6w8lMPA</a></p></li><li><p><a href="https://medium.com/@matryer/line-of-sight-in-code-186dd7cdea88" target="_blank" rel="noopener">https://medium.com/@matryer/line-of-sight-in-code-186dd7cdea88</a></p></li><li><p><a href="https://golang.org/doc/go1.4#internalpackages" target="_blank" rel="noopener">https://golang.org/doc/go1.4#internalpackages</a></p></li><li><p><a href="https://dave.cheney.net/2014/10/17/functional-options-for-friendly-apis" target="_blank" rel="noopener">https://dave.cheney.net/2014/10/17/functional-options-for-friendly-apis</a></p></li><li><p><a href="https://commandcenter.blogspot.com/2014/01/self-referential-functions-and-design.html" target="_blank" rel="noopener">https://commandcenter.blogspot.com/2014/01/self-referential-functions-and-design.html</a></p></li><li><p><a href="https://dave.cheney.net/2016/04/27/dont-just-check-errors-handle-them-gracefully" target="_blank" rel="noopener">https://dave.cheney.net/2016/04/27/dont-just-check-errors-handle-them-gracefully</a></p></li><li><p><a href="https://www.amazon.com/Philosophy-Software-Design-John-Ousterhout/dp/1732102201" target="_blank" rel="noopener">https://www.amazon.com/Philosophy-Software-Design-John-Ousterhout/dp/1732102201</a></p></li><li><p><a href="https://blog.golang.org/errors-are-values" target="_blank" rel="noopener">https://blog.golang.org/errors-are-values</a></p></li><li><p><a href="http://www.gopl.io/" target="_blank" rel="noopener">http://www.gopl.io/</a></p></li></ol><hr>]]></content>
    
    <summary type="html">
    
      博客内容为GO专家David关于Go最佳实践的一些建议
    
    </summary>
    
      <category term="golang" scheme="https://cloudsjhan.github.io/categories/golang/"/>
    
    
      <category term="GO QCon 技术分享" scheme="https://cloudsjhan.github.io/tags/GO-QCon-%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>技术周刊之改善 Python 程序的 91 个建议（转载)</title>
    <link href="https://cloudsjhan.github.io/2018/10/21/%E6%8A%80%E6%9C%AF%E5%91%A8%E5%88%8A%E4%B9%8B%E6%94%B9%E5%96%84-Python-%E7%A8%8B%E5%BA%8F%E7%9A%84-91-%E4%B8%AA%E5%BB%BA%E8%AE%AE%EF%BC%88%E8%BD%AC%E8%BD%BD/"/>
    <id>https://cloudsjhan.github.io/2018/10/21/技术周刊之改善-Python-程序的-91-个建议（转载/</id>
    <published>2018-10-21T13:49:17.000Z</published>
    <updated>2018-10-21T13:54:09.690Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><p><img src="https://" alt="" style="width:100%"></p><a id="more"></a><p>本篇博客转载自zhuanlan.zhihu.com/p/32817459。</p><p>除了Google的Python代码规范外，从来没有类似的书籍。偶然的机会看到这么一本书，读完之后觉得还不错，所以做个简单的笔记。有想学习类似知识的朋友，又懒得去读完整本书籍，可以参考一下。</p><h3 id="1：引论"><a href="#1：引论" class="headerlink" title="1：引论"></a><strong>1：引论</strong></h3><p>建议1、理解Pythonic概念—-详见Python中的《Python之禅》</p><p>建议2、编写Pythonic代码</p><p>（1）避免不规范代码，比如只用大小写区分变量、使用容易混淆的变量名、害怕过长变量名等。有时候长的变量名会使代码更加具有可读性。</p><p>（2）深入学习Python相关知识，比如语言特性、库特性等，比如Python演变过程等。深入学习一两个业内公认的Pythonic的代码库，比如Flask等。</p><p>建议3：理解Python与C的不同之处，比如缩进与{}，单引号双引号，三元操作符？，Switch-Case语句等。</p><p>建议4：在代码中适当添加注释</p><p>建议5：适当添加空行使代码布局更加合理</p><p>建议6：编写函数的4个原则</p><p>（1）函数设计要尽量短小，嵌套层次不宜过深</p><p>（2）函数声明应该做到合理、简单、易用</p><p>（3）函数参数设计应该考虑向下兼容</p><p>（4）一个函数只做一件事，尽量保证函数粒度的一致性</p><p>建议7：将常量集中在一个文件，且常量名尽量使用全大写字母</p><h3 id="2：编程惯用法"><a href="#2：编程惯用法" class="headerlink" title="2：编程惯用法"></a><strong>2：编程惯用法</strong></h3><p>建议8：利用assert语句来发现问题，但要注意，断言assert会影响效率</p><p>建议9：数据交换值时不推荐使用临时变量，而是直接a, b = b, a</p><p>建议10：充分利用惰性计算（Lazy evaluation）的特性，从而避免不必要的计算</p><p>建议11：理解枚举替代实现的缺陷（最新版Python中已经加入了枚举特性）</p><p>建议12：不推荐使用type来进行类型检查，因为有些时候type的结果并不一定可靠。如果有需求，建议使用isinstance函数来代替</p><p>建议13：尽量将变量转化为浮点类型后再做除法（Python3以后不用考虑）</p><p>建议14：警惕eval()函数的安全漏洞，有点类似于SQL注入</p><p>建议15：使用enumerate()同时获取序列迭代的索引和值</p><p>建议16：分清==和is的适用场景，特别是在比较字符串等不可变类型变量时（详见评论）</p><p>建议17：尽量使用Unicode。在Python2中编码是很让人头痛的一件事，但Python3就不用过多考虑了</p><p>建议18：构建合理的包层次来管理Module</p><h3 id="3：基础用法"><a href="#3：基础用法" class="headerlink" title="3：基础用法"></a><strong>3：基础用法</strong></h3><p>建议19：有节制的使用from…import语句，防止污染命名空间</p><p>建议20：优先使用absolute import来导入模块（Python3中已经移除了relative import）</p><p>建议21：i+=1不等于++i，在Python中，++i前边的加号仅表示正，不表示操作</p><p>建议22：习惯使用with自动关闭资源，特别是在文件读写中</p><p>建议23：使用else子句简化循环（异常处理）</p><p>建议24：遵循异常处理的几点基本原则</p><p>（1）注意异常的粒度，try块中尽量少写代码</p><p>（2）谨慎使用单独的except语句，或except Exception语句，而是定位到具体异常</p><p>（3）注意异常捕获的顺序，在合适的层次处理异常</p><p>（4）使用更加友好的异常信息，遵守异常参数的规范</p><p>建议25：避免finally中可能发生的陷阱</p><p>建议26：深入理解None，正确判断对象是否为空。Python中下列数据会判断为空：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/iciaMJDiaNTbG52ZVEtvvWrJdfxjeHnC0h2nJcvp2sZwpqMdESQCm3pUhzcPcBsOyWfj6NJ0vIT3D6AVHMzZLCjmA/640?wx_fmt=jpeg&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p><p>建议27：连接字符串应优先使用join函数，而不是+操作</p><p>建议28：格式化字符串时尽量使用.format函数，而不是%形式</p><p>建议29：区别对待可变对象和不可变对象，特别是作为函数参数时</p><p>建议30：[], {}和()：一致的容器初始化形式。使用列表解析可以使代码更清晰，同时效率更高</p><p>建议31：函数传参数，既不是传值也不是传引用，而是传对象或者说对象的引用</p><p>建议32：警惕默认参数潜在的问题，特别是当默认参数为可变对象时</p><p>建议33：函数中慎用变长参数*args和**kargs</p><p>（1）这种使用太灵活，从而使得函数签名不够清晰，可读性较差</p><p>（2）如果因为函数参数过多而是用变长参数简化函数定义，那么一般该函数可以重构</p><p>建议34：深入理解str()和repr()的区别</p><p>（1）两者之间的目标不同：str主要面向客户，其目的是可读性，返回形式为用户友好性和可读性都比较高的字符串形式；而repr是面向Python解释器或者说Python开发人员，其目的是准确性，其返回值表示Python解释器内部的定义</p><p>（2）在解释器中直接输入变量，默认调用repr函数，而print(var)默认调用str函数</p><p>（3）repr函数的返回值一般可以用eval函数来还原对象</p><p>（4）两者分别调用对象的内建函数<strong>str__()和__repr</strong>()</p><p>建议35：分清静态方法staticmethod和类方法classmethod的使用场景</p><h3 id="4：库"><a href="#4：库" class="headerlink" title="4：库"></a><strong>4：库</strong></h3><p>建议36：掌握字符串的基本用法</p><p>建议37：按需选择sort()和sorted()函数</p><p>》sort()是列表在就地进行排序，所以不能排序元组等不可变类型。</p><p>》sorted()可以排序任意的可迭代类型，同时不改变原变量本身。</p><p>建议38：使用copy模块深拷贝对象，区分浅拷贝（shallow copy）和深拷贝（deep copy）</p><p>建议39：使用Counter进行计数统计，Counter是字典类的子类，在collections模块中</p><p>建议40：深入掌握ConfigParser</p><p>建议41：使用argparse模块处理命令行参数</p><p>建议42：使用pandas处理大型CSV文件</p><p>》Python本身提供一个CSV文件处理模块，并提供reader、writer等函数。</p><p>》Pandas可提供分块、合并处理等，适用于数据量大的情况，且对二维数据操作更方便。</p><p>建议43：使用ElementTree解析XML</p><p>建议44：理解模块pickle的优劣</p><p>》优势：接口简单、各平台通用、支持的数据类型广泛、扩展性强</p><p>》劣势：不保证数据操作的原子性、存在安全问题、不同语言之间不兼容</p><p>建议45：序列化的另一个选择JSON模块：load和dump操作</p><p>建议46：使用traceback获取栈信息</p><p>建议47：使用logging记录日志信息</p><p>建议48：使用threading模块编写多线程程序</p><p>建议49：使用Queue模块使多线程编程更安全</p><h3 id="5：设计模式"><a href="#5：设计模式" class="headerlink" title="5：设计模式"></a><strong>5：设计模式</strong></h3><p>建议50：利用模块实现单例模式</p><p>建议51：用mixin模式让程序更加灵活</p><p>建议52：用发布-订阅模式实现松耦合</p><p>建议53：用状态模式美化代码</p><h3 id="6：内部机制"><a href="#6：内部机制" class="headerlink" title="6：内部机制"></a><strong>6：内部机制</strong></h3><p>建议54：理解build-in对象</p><p>建议55：<strong>init__()不是构造方法，理解__new</strong>()与它之间的区别</p><p>建议56：理解变量的查找机制，即作用域</p><p>》局部作用域</p><p>》全局作用域</p><p>》嵌套作用域</p><p>》内置作用域</p><p>建议57：为什么需要self参数</p><p>建议58：理解MRO（方法解析顺序）与多继承</p><p>建议59：理解描述符机制</p><p>建议60：区别<strong>getattr__()与__getattribute</strong>()方法之间的区别</p><p>建议61：使用更安全的property</p><p>建议62：掌握元类metaclass</p><p>建议63：熟悉Python对象协议</p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/iciaMJDiaNTbG52ZVEtvvWrJdfxjeHnC0h2mTYUZQBgtMVG5BQzVEnnkMDu5U9MzPJp99DzicxZ6hUjT03ib6wicwalw/640?wx_fmt=jpeg&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p><p>建议64：利用操作符重载实现中缀语法</p><p>建议65：熟悉Python的迭代器协议</p><p>建议66：熟悉Python的生成器</p><p>建议67：基于生成器的协程和greenlet，理解协程、多线程、多进程之间的区别</p><p>建议68：理解GIL的局限性</p><p>建议69：对象的管理和垃圾回收</p><h3 id="7：使用工具辅助项目开发"><a href="#7：使用工具辅助项目开发" class="headerlink" title="7：使用工具辅助项目开发"></a><strong>7：使用工具辅助项目开发</strong></h3><p>建议70：从PyPI安装第三方包</p><p>建议71：使用pip和yolk安装、管理包</p><p>建议72：做paster创建包</p><p>建议73：理解单元测试的概念</p><p>建议74：为包编写单元测试</p><p>建议75：利用测试驱动开发（TDD）提高代码的可测性</p><p>建议76：使用Pylint检查代码风格</p><p>》代码风格审查</p><p>》代码错误检查</p><p>》发现重复以及不合理的代码，方便重构</p><p>》高度的可配置化和可定制化</p><p>》支持各种IDE和编辑器的集成</p><p>》能够基于Python代码生成UML图</p><p>》能够与Jenkins等持续集成工具相结合，支持自动代码审查</p><p>建议77：进行高效的代码审查</p><p>建议78：将包发布到PyPI</p><h3 id="8：性能剖析与优化"><a href="#8：性能剖析与优化" class="headerlink" title="8：性能剖析与优化"></a><strong>8：性能剖析与优化</strong></h3><p>建议79：了解代码优化的基本原则</p><p>建议80：借助性能优化工具</p><p>建议81：利用cProfile定位性能瓶颈</p><p>建议82：使用memory_profiler和objgraph剖析内存使用</p><p>建议83：努力降低算法复杂度</p><p>建议84：掌握循环优化的基本技巧</p><p>》减少循环内部的计算</p><p>》将显式循环改为隐式循环，当然这会牺牲代码的可读性</p><p>》在循环中尽量引用局部变量</p><p>》关注内层嵌套循环</p><p>建议85：使用生成器提高效率</p><p>建议86：使用不同的数据结构优化性能</p><p>建议87：充分利用set的优势</p><p>建议88：使用multiprocessing模块克服GIL缺陷</p><p>建议89：使用线程池提高效率</p><p>建议90：使用C/C++模块扩展提高性能</p><p>建议91：使用Cythonb编写扩展模块</p><hr>]]></content>
    
    <summary type="html">
    
      如何写出规范优雅的Python代码
    
    </summary>
    
      <category term="技术周刊" scheme="https://cloudsjhan.github.io/categories/%E6%8A%80%E6%9C%AF%E5%91%A8%E5%88%8A/"/>
    
    
      <category term="python" scheme="https://cloudsjhan.github.io/tags/python/"/>
    
      <category term="编程规范" scheme="https://cloudsjhan.github.io/tags/%E7%BC%96%E7%A8%8B%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>技术周刊之基于beego web框架的RESTful API的构建之旅</title>
    <link href="https://cloudsjhan.github.io/2018/10/14/%E6%8A%80%E6%9C%AF%E5%91%A8%E5%88%8A%E4%B9%8B%E5%9F%BA%E4%BA%8Ebeego-web%E6%A1%86%E6%9E%B6%E7%9A%84RESTful-API%E7%9A%84%E6%9E%84%E5%BB%BA%E4%B9%8B%E6%97%85/"/>
    <id>https://cloudsjhan.github.io/2018/10/14/技术周刊之基于beego-web框架的RESTful-API的构建之旅/</id>
    <published>2018-10-14T07:44:03.000Z</published>
    <updated>2018-10-14T10:10:09.837Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><p><img src="https://" alt="" style="width:100%"></p><a id="more"></a><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>​    beego是一个快速开发GO应用的http框架，作者是go语言方向的大牛，astaxie。beego可以用来快速开发API、web、后端服务等应用，是一个RESTFul风格的框架，主要的设计灵感来自于Python web开发框架tornado、flask、sinstra，很好的结合了Go语言本身的一些特性（interface，struct继承等）。</p><p>​    beego是基于八大独立模块来实现的，很好的实现了模块间的解耦，即使用户不使用http的逻辑，也可以很好的使用其中的各个模块。作者自己说，他的这种思想来自于乐高积木，设计beego的时候，这些模块就是积木，而最终搭建好的机器人就是beego。</p><p>​    这篇博文通过使用beego来构建API，讲解实现过程中的细节以及遇到的一些坑，让我们马上开始beego的API构建之旅吧！</p><h3 id="项目创建"><a href="#项目创建" class="headerlink" title="项目创建"></a>项目创建</h3><ul><li>进入到你的$GOPATH/src</li><li>安装beego开发包自己快速开发工具bee</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> get github.com/astaxie/beego</span><br><span class="line"><span class="keyword">go</span> get github.com/astaxie/beego/orm</span><br><span class="line"><span class="keyword">go</span> get github.com/beego/bee</span><br></pre></td></tr></table></figure><ul><li>使用快速开发工具bee，创建我们的API项目</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bee <span class="built_in">new</span> firstAPI</span><br></pre></td></tr></table></figure><p>我们得到的项目结构如下图所示：</p><p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fw7uxgc1sqj314q03gwev.jpg" alt=""></p><p>可以看出这是一个典型的MVC架构的应用，beego把我们项目所需要的一些都准备好了，例如配置文件conf，测试文件tests等，我们只需要专注于API代码的编写即可。</p><h3 id="运行项目并获得API自动化文档"><a href="#运行项目并获得API自动化文档" class="headerlink" title="运行项目并获得API自动化文档"></a>运行项目并获得API自动化文档</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bee run -gendoc=<span class="literal">true</span> -downdoc=<span class="literal">true</span></span><br></pre></td></tr></table></figure><p>运行上述代码输出如下图所示：</p><p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fw7v5dfquwj31kw0skn3a.jpg" alt=""></p><p>我们在浏览器中访问：本机IP：8080/swagger，就会看到swagger的API文档，我们代码更新后，该文档就会自动更新，非常方便。</p><h3 id="models设计"><a href="#models设计" class="headerlink" title="models设计"></a>models设计</h3><ul><li>对 数据库object 操作有四个方法 Read / Insert / Update / Delete</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">示例代码：</span><br><span class="line">o := orm.NewOrm()</span><br><span class="line">user := <span class="built_in">new</span>(User)</span><br><span class="line">user.Name = <span class="string">"slene"</span></span><br><span class="line"></span><br><span class="line">fmt.Println(o.Insert(user))</span><br><span class="line"></span><br><span class="line">user.Name = <span class="string">"Your"</span></span><br><span class="line">fmt.Println(o.Update(user))</span><br><span class="line">fmt.Println(o.Read(user))</span><br><span class="line">fmt.Println(o.Delete(user))</span><br></pre></td></tr></table></figure><p>还有其他的方法可以参阅beego<a href="https://beego.me/docs/mvc/model/object.md" target="_blank" rel="noopener">官方文档</a>，里面对orm操作有着详细的介绍。</p><ul><li>创建一个数据库并设计一张数据库表</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE IF NOT EXISTS `student` (</span><br><span class="line">`Id` int(11),</span><br><span class="line">`Name` varchar(255),</span><br><span class="line">`Birthdate` varchar(255),</span><br><span class="line">`Gender` bool,</span><br><span class="line">`Score` int(11)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure><ul><li>在models文件夹下新建一个文件Student.go,并实现以下代码，代码中关键点都有注释</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> models</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/astaxie/beego/orm"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//在models模块中创建一个struct，目的是使用beego的orm框架，使struct与数据库中的字段产生对应关系</span></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">Id <span class="keyword">int</span><span class="string">`orm:"column(Id)"`</span> <span class="comment">//column()括号中的字段就是在定义数据库时的相应字段，这一段必须严格填写，不然在API读写数据时就会出现读不到或者写不进去的问题</span></span><br><span class="line">Name <span class="keyword">string</span>  <span class="string">`orm:"column(Name)"`</span></span><br><span class="line">BirthDate <span class="keyword">string</span> <span class="string">`orm:"column(Birthdate)"`</span></span><br><span class="line">Gender <span class="keyword">bool</span> <span class="string">`orm:"column(Gender)"`</span></span><br><span class="line">Score <span class="keyword">int</span> <span class="string">`orm:"column(Score)"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//该函数获得数据库中所有student的信息，返回值是一个结构体数组指针</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetAllStudents</span><span class="params">()</span> []*<span class="title">Student</span></span> &#123;</span><br><span class="line">o := orm.NewOrm() <span class="comment">//产生一个orm对象</span></span><br><span class="line">o.Using(<span class="string">"default"</span>) <span class="comment">//这句话的意思是使用定义的默认数据库，与main.go中的orm.RegisterDataBase()对应</span></span><br><span class="line"><span class="keyword">var</span> students []*Student <span class="comment">//定义指向结构体数组的指针</span></span><br><span class="line">q := o.QueryTable(<span class="string">"student"</span>)<span class="comment">//获得一个数据库表的请求</span></span><br><span class="line">q.All(&amp;students)<span class="comment">//取到这个表中的所有数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> students</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//该函数根据student中的Id，返回该学生的信息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetStudentById</span><span class="params">(id <span class="keyword">int</span>)</span> <span class="title">Student</span></span> &#123;</span><br><span class="line">u := Student&#123;Id:id&#125;<span class="comment">//根据所传入的Id得到对应student的对象</span></span><br><span class="line">o := orm.NewOrm()<span class="comment">//new 一个orm对象</span></span><br><span class="line">o.Using(<span class="string">"default"</span>)<span class="comment">//使用最开始定义的default数据库</span></span><br><span class="line">err := o.Read(&amp;u)<span class="comment">//读取Id=id的student的信息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err == orm.ErrNoRows &#123;</span><br><span class="line">fmt.Println(<span class="string">"查询不到"</span>)<span class="comment">//对应操作，不一定是print</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> err == orm.ErrMissPK &#123;</span><br><span class="line">fmt.Println(<span class="string">"没有主键"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> u</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//添加一个学生的信息到数据库中，参数是指向student结构题的指针</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AddStudent</span><span class="params">(student *Student)</span> <span class="title">Student</span></span> &#123;</span><br><span class="line">o := orm.NewOrm()</span><br><span class="line">o.Using(<span class="string">"default"</span>)</span><br><span class="line">o.Insert(student)<span class="comment">//插入数据库</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> *student</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">UpdateStudent</span><span class="params">(student *Student)</span></span> &#123;</span><br><span class="line">o := orm.NewOrm()</span><br><span class="line">o.Using(<span class="string">"default"</span>)</span><br><span class="line">o.Update(student)<span class="comment">//更新该student的信息</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DeleteStudent</span><span class="params">(id <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">o := orm.NewOrm()</span><br><span class="line">o.Using(<span class="string">"default"</span>)</span><br><span class="line">o.Delete(&amp;Student&#123;Id:id&#125;)<span class="comment">//删除对应id的student的信息</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span>  &#123;</span><br><span class="line">orm.RegisterModel(<span class="built_in">new</span>(Student))<span class="comment">//将数据库注册到orm</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>model这一层主要是定义struct，并为上层编写读写数据库。处理数据的代码。</li></ul><h3 id="controller层实现"><a href="#controller层实现" class="headerlink" title="controller层实现"></a>controller层实现</h3><p>基于 beego 的 Controller 设计，只需要匿名组合 <code>beego.Controller</code> 就可以了，如下所示：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> xxxController <span class="keyword">struct</span> &#123;</span><br><span class="line">    beego.Controller</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>beego.Controller</code> 实现了接口 <code>beego.ControllerInterface</code>，<code>beego.ControllerInterface</code> 定义了如下函数：</p><ul><li><p>Init(ct *context.Context, childName string, app interface{})</p><p>这个函数主要初始化了 Context、相应的 Controller 名称，模板名，初始化模板参数的容器 Data，app 即为当前执行的 Controller 的 reflecttype，这个 app 可以用来执行子类的方法。</p></li><li><p>Prepare()</p><p>这个函数主要是为了用户扩展用的，这个函数会在下面定义的这些 Method 方法之前执行，用户可以重写这个函数实现类似用户验证之类。</p></li><li><p>Get()</p><p>如果用户请求的 HTTP Method 是 GET，那么就执行该函数，默认是 405，用户继承的子 struct 中可以实现了该方法以处理 Get 请求。</p></li><li><p>Post()</p><p>如果用户请求的 HTTP Method 是 POST，那么就执行该函数，默认是 405，用户继承的子 struct 中可以实现了该方法以处理 Post 请求。</p></li><li><p>Delete()</p><p>如果用户请求的 HTTP Method 是 DELETE，那么就执行该函数，默认是 405，用户继承的子 struct 中可以实现了该方法以处理 Delete 请求。</p></li><li><p>Put()</p><p>如果用户请求的 HTTP Method 是 PUT，那么就执行该函数，默认是 405，用户继承的子 struct 中可以实现了该方法以处理 Put 请求.</p></li><li><p>Head()</p><p>如果用户请求的 HTTP Method 是 HEAD，那么就执行该函数，默认是 405，用户继承的子 struct 中可以实现了该方法以处理 Head 请求。</p></li><li><p>Patch()</p><p>如果用户请求的 HTTP Method 是 PATCH，那么就执行该函数，默认是 405，用户继承的子 struct 中可以实现了该方法以处理 Patch 请求.</p></li><li><p>Options()</p><p>如果用户请求的HTTP Method是OPTIONS，那么就执行该函数，默认是 405，用户继承的子 struct 中可以实现了该方法以处理 Options 请求。</p></li><li><p>Finish()</p><p>这个函数是在执行完相应的 HTTP Method 方法之后执行的，默认是空，用户可以在子 struct 中重写这个函数，执行例如数据库关闭，清理数据之类的工作。</p></li><li><p>Render() error</p><p>这个函数主要用来实现渲染模板，如果 beego.AutoRender 为 true 的情况下才会执行。</p></li></ul><p>所以通过子 struct 的方法重写，用户就可以实现自己的逻辑。</p><h3 id="routers层实现"><a href="#routers层实现" class="headerlink" title="routers层实现"></a>routers层实现</h3><p>什么是路由设置呢？前面介绍的 MVC 结构执行时，介绍过 beego 存在三种方式的路由:固定路由、正则路由、自动路由，与RESTFul API相关的就是固定路由和正则路由。</p><p>下面就是固定路由的例子</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">beego.Router(<span class="string">"/"</span>, &amp;controllers.MainController&#123;&#125;)</span><br><span class="line">beego.Router(<span class="string">"/admin"</span>, &amp;admin.UserController&#123;&#125;)</span><br><span class="line">beego.Router(<span class="string">"/admin/index"</span>, &amp;admin.ArticleController&#123;&#125;)</span><br><span class="line">beego.Router(<span class="string">"/admin/addpkg"</span>, &amp;admin.AddController&#123;&#125;)</span><br></pre></td></tr></table></figure><p>下面是正则路由的例子：</p><ul><li><p>beego.Router(“/api/?:id”, &amp;controllers.RController{})</p><p>默认匹配 //例如对于URL”/api/123”可以匹配成功，此时变量”:id”值为”123”</p></li><li><p>beego.Router(“/api/:id”, &amp;controllers.RController{})</p><p>默认匹配 //例如对于URL”/api/123”可以匹配成功，此时变量”:id”值为”123”，但URL”/api/“匹配失败</p></li><li><p>beego.Router(“/api/:id([0-9]+)“, &amp;controllers.RController{})</p><p>自定义正则匹配 //例如对于URL”/api/123”可以匹配成功，此时变量”:id”值为”123”</p></li><li><p>beego.Router(“/user/:username([\w]+)“, &amp;controllers.RController{})</p><p>正则字符串匹配 //例如对于URL”/user/astaxie”可以匹配成功，此时变量”:username”值为”astaxie”</p></li><li><p>beego.Router(“/download/<em>.</em>”, &amp;controllers.RController{})</p><p>*匹配方式 //例如对于URL”/download/file/api.xml”可以匹配成功，此时变量”:path”值为”file/api”， “:ext”值为”xml”</p></li><li><p>beego.Router(“/download/ceshi/*“, &amp;controllers.RController{})</p><p>*全匹配方式 //例如对于URL”/download/ceshi/file/api.json”可以匹配成功，此时变量”:splat”值为”file/api.json”</p></li><li><p>beego.Router(“/:id:int”, &amp;controllers.RController{})</p><p>int 类型设置方式，匹配 :id为int 类型，框架帮你实现了正则 ([0-9]+)</p></li><li><p>beego.Router(“/:hi:string”, &amp;controllers.RController{})</p><p>string 类型设置方式，匹配 :hi 为 string 类型。框架帮你实现了正则 ([\w]+)</p></li><li><p>beego.Router(“/cms_:id([0-9]+).html”, &amp;controllers.CmsController{})</p><p>带有前缀的自定义正则 //匹配 :id 为正则类型。匹配 cms_123.html 这样的 url :id = 123</p></li></ul><p>个人觉得，最方便的还是类似于Python框架flask的注解路由，也是在这个项目中使用的：</p><ul><li><p>在routers/routers.go里面添加你所希望的API</p></li><li><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> routers</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"firstAPI/controllers"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/astaxie/beego"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">ns := beego.NewNamespace(<span class="string">"/v1"</span>,</span><br><span class="line">beego.NSNamespace(<span class="string">"/object"</span>,</span><br><span class="line">beego.NSInclude(</span><br><span class="line">&amp;controllers.ObjectController&#123;&#125;,</span><br><span class="line">),</span><br><span class="line">),</span><br><span class="line">beego.NSNamespace(<span class="string">"/user"</span>,</span><br><span class="line">beego.NSInclude(</span><br><span class="line">&amp;controllers.UserController&#123;&#125;,</span><br><span class="line">),</span><br><span class="line">),</span><br><span class="line">beego.NSNamespace(<span class="string">"/student"</span>,</span><br><span class="line">beego.NSInclude(</span><br><span class="line">&amp;controllers.StudentController&#123;&#125;,</span><br><span class="line">),</span><br><span class="line">),</span><br><span class="line">)</span><br><span class="line">beego.AddNamespace(ns)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>以上代码实现了如下的API：</p><p>/v1/object</p><p>/v1/user</p><p>/v1/student</p><p>非常清晰明了。</p><h3 id="main-go的数据库配置"><a href="#main-go的数据库配置" class="headerlink" title="main.go的数据库配置"></a>main.go的数据库配置</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">_ <span class="string">"firstAPI/routers"</span></span><br><span class="line"><span class="string">"github.com/astaxie/beego"</span></span><br><span class="line"><span class="string">"github.com/astaxie/beego/orm"</span></span><br><span class="line">_ <span class="string">"github.com/go-sql-driver/mysql"</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">orm.RegisterDriver(<span class="string">"mysql"</span>, orm.DRMySQL)<span class="comment">//注册MySQL的driver</span></span><br><span class="line">orm.RegisterDataBase(<span class="string">"default"</span>, <span class="string">"mysql"</span>, <span class="string">"root:test@tcp(127.0.0.1:3306)/restapi_test?charset=utf8"</span>)<span class="comment">//本地数据库的账号。密码等</span></span><br><span class="line">orm.RunSyncdb(<span class="string">"default"</span>, <span class="literal">false</span>, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> beego.BConfig.RunMode == <span class="string">"dev"</span> &#123;</span><br><span class="line">beego.BConfig.WebConfig.DirectoryIndex = <span class="literal">true</span></span><br><span class="line">beego.BConfig.WebConfig.StaticDir[<span class="string">"/swagger"</span>] = <span class="string">"swagger"</span><span class="comment">//静态文档</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">beego.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关键点都在代码中以注释的形式展现。</p><h3 id="postman测试"><a href="#postman测试" class="headerlink" title="postman测试"></a>postman测试</h3><p>bee run 运行代码后，我们使用postman测试一下我们所构建的API效果如何。</p><p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fw7w1tcnesj31kw0y90y6.jpg" alt=""></p><p>这里节省篇幅，只测试一个接口。</p><p>到此为止，我们基于beego就实现了简单API接口的构建，是不是既清晰又简单呢？赶快自己动手试试吧！</p><p>本期技术周刊结束，代码已上传到<a href="https://github.com/hantmac/beego_api_demo" target="_blank" rel="noopener">GitHub</a>，可以查阅，我们下期再会！</p><hr>]]></content>
    
    <summary type="html">
    
      本文介绍通过使用golang web开发框架beego搭建RESTFUL风格的API
    
    </summary>
    
      <category term="技术周刊" scheme="https://cloudsjhan.github.io/categories/%E6%8A%80%E6%9C%AF%E5%91%A8%E5%88%8A/"/>
    
    
      <category term="golang beego" scheme="https://cloudsjhan.github.io/tags/golang-beego/"/>
    
  </entry>
  
  <entry>
    <title>总结版图解http</title>
    <link href="https://cloudsjhan.github.io/2018/10/12/%E6%80%BB%E7%BB%93%E7%89%88%E5%9B%BE%E8%A7%A3http/"/>
    <id>https://cloudsjhan.github.io/2018/10/12/总结版图解http/</id>
    <published>2018-10-12T02:20:37.000Z</published>
    <updated>2018-10-12T02:28:44.744Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><p><img src="https://" alt="" style="width:100%"></p><a id="more"></a><p><strong>该博客转载自公众号<a href="https://mp.weixin.qq.com/s/MvMyH1vTCsxBCdHfH7uv1w" target="_blank" rel="noopener">freeCodeCamp</a></strong></p><p>作为一个前端，如果对一个网页从发起请求到返回数据这期间具体发生了什么都不知道的话，那不是一个好前端。最近，读了图解http，以及有关http相关的文章，还有自己也下载了wireshark抓包工具，实际观察了一下这个过程，下面就此做些总结。</p><p><strong>一.从输入一个url到返回数据，中间到底发生了什么？</strong></p><p>假设，我们在浏览器输入<a href="http://www.baidu.com:80/index.html，假设解析出的ip地址是202.43.78.3" target="_blank" rel="noopener">http://www.baidu.com:80/index.html，假设解析出的ip地址是202.43.78.3</a></p><p><strong>1.浏览器解析出主机名</strong></p><p>解析出的主机名是<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></p><p><strong>2.浏览器查询这个主机名的ip地址（dns）</strong></p><p>dns解析的作用就是把域名解析成ip地址，这样才能在广域网路由器转发报文给目标ip，不然路由器不知道要把报文发给谁。下面就讲下大概的过程，不会涉及太多细节。（以chrome为例子）</p><p>（1）浏览器启动时，首先浏览器会去操作系统获取dns服务器地址，然后把这个地址缓存下来。同时浏览器还会去读取和解析hosts文件，同样放到缓存中。浏览器对解析过的域名和ip地址，都会保存着这两者的映射关系。（存到cache中）</p><p>（2）当解析域名的时候，首先浏览器会去cache中查找有没有缓存好的映射关系，如果没有的话，就去hosts文件中查找，如果也没有的话，浏览器就会发起请求去dns服务器缓存查询了，如果缓存里面也没有，那最后就是dns服务器去查询了。</p><p><strong>3.浏览器获取端口号</strong></p><p><strong>4.浏览器向目标ip地址发起一条到202.43.78.3:80的tcp连接</strong></p><p>为了传输的可靠性，tcp协议要有三次握手过程：</p><p>（1）首先浏览器会向服务器发起一个连接请求</p><p>（2）服务器会对连接请求做出响应，表示同意建立连接</p><p>（3）浏览器收到响应后，再告知对方，它知道服务器同意它建立连接了。</p><p><strong>5.数据包在ip层传输</strong></p><p>数据包在ip层传输，通过多台计算机和网络设备中转，在中转时，利用中转设备的mac地址搜索下一个中转目标（采用ARP协议，根据通信方的ip地址就可以反查出对应的mac地址），直到目标ip地址。</p><p><strong>6.数据链路层处理网络连接的硬件部分</strong></p><p>数据链路层处理网络连接的硬件部分，比如网卡，找到服务器的网卡</p><p><strong>7.浏览器向服务器发送一条http报文</strong></p><p>每一条http报文的组成：</p><p>起始行+首部+主体(可选)</p><p>起始行：http/1.0 200 ok (一般包括http版本，返回状态码，返回码原因)</p><p>首部：content-type:text/plain content-length:19</p><p>主体：name=jane</p><p><strong>8.服务器接受客户端请求，进行一些处理，返回响应报文</strong></p><p>web服务器接收到请求之后，实际上会做些什么呢？</p><p>（1）建立连接，如果接受一个客户端连接，就建立连接，如果不同意，就将其关闭。</p><p>（2）接收请求，读取http请求报文</p><p>（3）访问资源，访问报文中指定的资源</p><p>（4）构建响应，创建带有首部的http响应报文</p><p>（5）发送响应，将响应回送给客户端</p><p><strong>9.浏览器读取http响应报文</strong></p><p><strong>10.浏览器关闭连接</strong></p><p>看了上面的一个简单过程，大家会不会有这样一个问题，难道每次发起一个http请求，都要建立一次tcp连接吗，我们经常写的并发ajax请求，每条请求都是各自独立建立的tcp连接？一条tcp连接建立之后，是什么时候关闭的？带着这些问题，看看下面要讲的http的特性</p><p><strong>二.http的特性</strong></p><p><strong>1.http是不保存状态的协议</strong></p><p>http协议是一种无状态的协议，意思就是说它不会对每次的请求和响应之间的通信状态进行保存。你之前发过的任何请求的信息，没有任何记录。之所以这样设计，也是为了让http变得比较简单，可以处理大量事物。但是无状态的特性，也会导致一些问题，比如说一个用户登录一家网站之后，跳到另一个页面，应该还保持着登录状态，所以后面就出了cookie状态管理技术。相信大家应该都很熟悉了。</p><p><strong>2.请求只能从客户端开始，客户端不可以接收除响应以外的指令</strong></p><p>服务器必须等待客户端的请求，才能给客户端发送响应数据，所以说服务器是不能主动给客户端推送数据的。对于一些实时监控的功能，常常用websocket来代替</p><p><strong>3.没有用户认证，任何人都可以发起请求</strong></p><p>在http协议通信时，是不存在确认通信方的处理步骤的，任何人都可以发起请求。另外，服务器只要收到请求，无论是谁，都会返回一个响应。所以会存在伪装的隐患。后面出现的https就可以解决这个问题。</p><p><strong>4.通信使用的是明文</strong></p><p><strong>5.无法证明报文完整性</strong></p><p><strong>6.可任意选择数据压缩格式，非强制压缩发送</strong></p><p><strong>7.http持久连接和并行连接</strong></p><p>一开始，http请求是串行的，一个http请求，就会建立一条tcp连接，浏览器收到响应之后，就会断开连接。等上一个请求回来了，下一个请求才能继续请求。这样做的缺点是，比较耗时间和内存，后面就出现了下面一系列的优化连接性能的方法。</p><p>（1）并行连接</p><p>原理：通过多条tcp连接发起并发的http请求</p><p>并行连接可以同时发起多个http请求，每次发起一个http请求，就会建立一个tcp连接。每个http请求是独立的，不会相互等待，这样做，很可能会提高页面的加载速度，因为人们会看到页面上面，很多个东西会同时出现，所以感觉页面加载变快了。实际上有时候是真的变快了，因为它是并行工作的。但是有时候不是真的快了。比如说，客户端的网络带宽不足时，（浏览器是通过一个28kbps的modem连接到因特网上去的），如果并行加载多个请求，每个请求就会去竞争这个有限的带宽，每个请求就会以比较慢的速度加载。这样带来的性能提升就很小。</p><p>（2）持久连接</p><p>原理：重用tcp连接，以消除连接及关闭时延</p><p>从http1.1开始，就允许当http响应结束后，tcp连接可以保持在打开状态，以便给未来的http请求重用现在的连接。那么，这个tcp连接什么时候会关闭呢，一般情况下，40s内，如果没有新的请求，就会关闭。</p><p>（3）管道化连接</p><p>原理：通过共享的tcp连接发起并发的http请求</p><p>并行连接可以提高复合页面的传输速度，但是也有许多缺点，比如每次都会建立一次tcp连接，会耗费时间和带宽。持久连接的优势就是降低了时延和tcp的连接数量。但是持久连接可能会导致的一个问题是，可能会累积大量的空闲连接。耗费资源。</p><p>持久连接和并行连接配合使用才是最高效的方式。</p><p>一般浏览器会限制，同个域名下的并行连接的个数是4个，即打开少量的并行连接，其中每个都是持久连接。这也是现在用的最多的方式。</p><hr>]]></content>
    
    <summary type="html">
    
      对于《图解HTTP》一书进行言简意赅的总结
    
    </summary>
    
      <category term="网络" scheme="https://cloudsjhan.github.io/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="网络" scheme="https://cloudsjhan.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>python apscheduler - skipped: maximum number of running instances reached</title>
    <link href="https://cloudsjhan.github.io/2018/09/28/python-apscheduler-skipped-maximum-number-of-running-instances-reached/"/>
    <id>https://cloudsjhan.github.io/2018/09/28/python-apscheduler-skipped-maximum-number-of-running-instances-reached/</id>
    <published>2018-09-28T08:04:43.000Z</published>
    <updated>2018-09-28T08:14:25.410Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><p><img src="https://" alt="" style="width:100%"></p><a id="more"></a><h3 id="出现问题的代码"><a href="#出现问题的代码" class="headerlink" title="出现问题的代码"></a>出现问题的代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scheduler = BackgroundScheduler()</span><br><span class="line">scheduler.add_job(runsync, <span class="string">'interval'</span>, seconds=<span class="number">1</span>)</span><br><span class="line">scheduler.start()</span><br></pre></td></tr></table></figure><h3 id="问题出现的情况"><a href="#问题出现的情况" class="headerlink" title="问题出现的情况"></a>问题出现的情况</h3><ul><li>运行一段代码，时而报错时而不报错</li><li>报错是：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WARNING:apscheduler.scheduler:Execution of job &quot;runsync (trigger: interval[0:00:01], next run at: 2015-12-01 11:50:42 UTC)&quot; skipped: maximum number of running instances reached (1)</span><br></pre></td></tr></table></figure><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ul><li><p>apscheduler这个模块，在你的代码运行时间大于interval的时候，就会报错</p><p>也就是说，你的代码运行时间超出了你的定时任务的时间间隔。</p></li></ul><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><ul><li>增大时间间隔即可</li></ul><p>### </p><hr>]]></content>
    
    <summary type="html">
    
      python apscheduler - skipped: maximum number of running instances reached
    
    </summary>
    
      <category term="python" scheme="https://cloudsjhan.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://cloudsjhan.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python 的logging模块实现json格式的日志输出</title>
    <link href="https://cloudsjhan.github.io/2018/09/27/python-%E7%9A%84logging%E6%A8%A1%E5%9D%97%E5%AE%9E%E7%8E%B0json%E6%A0%BC%E5%BC%8F%E7%9A%84%E6%97%A5%E5%BF%97%E8%BE%93%E5%87%BA/"/>
    <id>https://cloudsjhan.github.io/2018/09/27/python-的logging模块实现json格式的日志输出/</id>
    <published>2018-09-27T08:28:21.000Z</published>
    <updated>2018-09-29T01:14:39.201Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><p><img src="https://" alt="" style="width:100%"></p><a id="more"></a><h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><ul><li>想要让开发过程或者是上线后的bug无处可藏，最好的方式便是在程序运行过程中，不断收集重要的日志，以供分析使用。Python中内置的log收集模块是logging，该模块使用起来比较方便，但是美中不足的地方就是日志的格式转成json比较麻烦。于是我结合logging和另一个模块<a href="https://github.com/madzak/python-json-logger" target="_blank" rel="noopener">python-json-logger</a>(pip install python-json-logger) ，实现json格式的日志输出。</li></ul><h3 id="源码：以下代码可以做成模块，直接导入使用"><a href="#源码：以下代码可以做成模块，直接导入使用" class="headerlink" title="源码：以下代码可以做成模块，直接导入使用"></a>源码：以下代码可以做成模块，直接导入使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging, logging.config, os</span><br><span class="line"><span class="keyword">import</span> structlog</span><br><span class="line"><span class="keyword">from</span> structlog <span class="keyword">import</span> configure, processors, stdlib, threadlocal</span><br><span class="line"><span class="keyword">from</span> pythonjsonlogger <span class="keyword">import</span> jsonlogger</span><br><span class="line">BASE_DIR = BASE_DIR = os.path.dirname(os.path.abspath(__file__))</span><br><span class="line">DEBUG = <span class="keyword">True</span>  <span class="comment"># 标记是否在开发环境</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 给过滤器使用的判断</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RequireDebugTrue</span><span class="params">(logging.Filter)</span>:</span></span><br><span class="line">    <span class="comment"># 实现filter方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">filter</span><span class="params">(self, record)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> DEBUG</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_logger</span><span class="params">()</span>:</span></span><br><span class="line">    LOGGING = &#123;</span><br><span class="line">    <span class="comment"># 基本设置</span></span><br><span class="line">        <span class="string">'version'</span>: <span class="number">1</span>,  <span class="comment"># 日志级别</span></span><br><span class="line">        <span class="string">'disable_existing_loggers'</span>: <span class="keyword">False</span>,  <span class="comment"># 是否禁用现有的记录器</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 日志格式集合</span></span><br><span class="line">        <span class="string">'formatters'</span>: &#123;</span><br><span class="line">        <span class="comment"># 标准输出格式</span></span><br><span class="line">            <span class="string">'json'</span>: &#123;</span><br><span class="line">            <span class="comment"># [具体时间][线程名:线程ID][日志名字:日志级别名称(日志级别ID)] [输出的模块:输出的函数]:日志内容</span></span><br><span class="line">                <span class="string">'format'</span>: <span class="string">'[%(asctime)s][%(threadName)s:%(thread)d][%(name)s:%(levelname)s(%(lineno)d)]\n[%(module)s:%(funcName)s]:%(message)s'</span>,</span><br><span class="line">                <span class="string">'class'</span>: <span class="string">'pythonjsonlogger.jsonlogger.JsonFormatter'</span>,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    <span class="comment"># 过滤器</span></span><br><span class="line">        <span class="string">'filters'</span>: &#123;</span><br><span class="line">            <span class="string">'require_debug_true'</span>: &#123;</span><br><span class="line">                <span class="string">'()'</span>: RequireDebugTrue,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    <span class="comment"># 处理器集合</span></span><br><span class="line">        <span class="string">'handlers'</span>: &#123;</span><br><span class="line">        <span class="comment"># 输出到控制台</span></span><br><span class="line">        <span class="comment"># 输出到文件</span></span><br><span class="line">            <span class="string">'TimeChecklog'</span>: &#123;</span><br><span class="line">                <span class="string">'level'</span>: <span class="string">'DEBUG'</span>,</span><br><span class="line">                <span class="string">'class'</span>: <span class="string">'logging.handlers.RotatingFileHandler'</span>,</span><br><span class="line">                <span class="string">'formatter'</span>: <span class="string">'json'</span>,</span><br><span class="line">                <span class="string">'filename'</span>: os.path.join(<span class="string">"./log/"</span>, <span class="string">'TimeoutCheck.log'</span>),  <span class="comment"># 输出位置</span></span><br><span class="line">                <span class="string">'maxBytes'</span>: <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">5</span>,  <span class="comment"># 文件大小 5M</span></span><br><span class="line">                <span class="string">'backupCount'</span>: <span class="number">5</span>,  <span class="comment"># 备份份数</span></span><br><span class="line">                <span class="string">'encoding'</span>: <span class="string">'utf8'</span>,  <span class="comment"># 文件编码</span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    <span class="comment"># 日志管理器集合</span></span><br><span class="line">        <span class="string">'loggers'</span>: &#123;</span><br><span class="line">        <span class="comment"># 管理器</span></span><br><span class="line">            <span class="string">'proxyCheck'</span>: &#123;</span><br><span class="line">                <span class="string">'handlers'</span>: [<span class="string">'TimeChecklog'</span>],</span><br><span class="line">                <span class="string">'level'</span>: <span class="string">'DEBUG'</span>,</span><br><span class="line">                <span class="string">'propagate'</span>: <span class="keyword">True</span>,  <span class="comment"># 是否传递给父记录器</span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    configure(</span><br><span class="line">        logger_factory=stdlib.LoggerFactory(),</span><br><span class="line">        processors=[</span><br><span class="line">            stdlib.render_to_log_kwargs]</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    logging.config.dictConfig(LOGGING)</span><br><span class="line">    logger = logging.getLogger(<span class="string">"proxyCheck"</span>)</span><br><span class="line">    <span class="keyword">return</span> logger</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试用例，你可以把get_logger()封装成一个模块，from xxx import get_logger()</span></span><br><span class="line">logger1 = get_logger()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        a = <span class="number">1</span> / <span class="number">0</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logger1.error(e)  <span class="comment"># 写入错误日志</span></span><br><span class="line">        <span class="comment">#如果需要添加额外的信息，使用extra关键字即可</span></span><br><span class="line">        logger1.error(e, extra=&#123;key1: value1, key2:value2&#125;)</span><br><span class="line">        <span class="comment"># 其他错误处理代码</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">test()</span><br></pre></td></tr></table></figure><h3 id="测试结果"><a href="#测试结果" class="headerlink" title="### 测试结果"></a>### 测试结果</h3><ul><li>测试的结果，可以在./log/xxx.log文件中看到输出的日志</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;asctime&quot;: &quot;2018-09-28 09:52:12,622&quot;, &quot;threadName&quot;: &quot;MainThread&quot;, &quot;thread&quot;: 4338656704, &quot;name&quot;: &quot;proxyCheck&quot;, &quot;levelname&quot;: &quot;ERROR&quot;, &quot;%(lineno&quot;: null, &quot;module&quot;: &quot;mylog&quot;, &quot;funcName&quot;: &quot;test&quot;, &quot;message&quot;: &quot;division by zero&quot;&#125;</span><br></pre></td></tr></table></figure><ul><li>可以看到日志是json格式，这样你就可以很方便的使用grafna和ES将日志做成看板来展示了。</li></ul><hr>]]></content>
    
    <summary type="html">
    
      使用Python的内置logging实现json格式的日志输出
    
    </summary>
    
      <category term="python" scheme="https://cloudsjhan.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://cloudsjhan.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python 发送各种格式的邮件</title>
    <link href="https://cloudsjhan.github.io/2018/09/17/python-%E5%8F%91%E9%80%81%E5%90%84%E7%A7%8D%E6%A0%BC%E5%BC%8F%E7%9A%84%E9%82%AE%E4%BB%B6/"/>
    <id>https://cloudsjhan.github.io/2018/09/17/python-发送各种格式的邮件/</id>
    <published>2018-09-17T02:55:56.000Z</published>
    <updated>2018-09-28T02:06:31.935Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><p><img src="https://" alt="" style="width:100%"></p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">from</span> email.mime.multipart <span class="keyword">import</span> MIMEMultipart</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">from</span> email.mime.application <span class="keyword">import</span> MIMEApplication</span><br><span class="line">_user = <span class="string">"sigeken@qq.com"</span></span><br><span class="line">_pwd  = <span class="string">"***"</span></span><br><span class="line">_to   = <span class="string">"402363522@qq.com"</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#如名字所示Multipart就是分多个部分</span></span><br><span class="line">msg = MIMEMultipart()</span><br><span class="line">msg[<span class="string">"Subject"</span>] = <span class="string">"don't panic"</span></span><br><span class="line">msg[<span class="string">"From"</span>]    = _user</span><br><span class="line">msg[<span class="string">"To"</span>]      = _to</span><br><span class="line"> </span><br><span class="line"><span class="comment">#---这是文字部分---</span></span><br><span class="line">part = MIMEText(<span class="string">"乔装打扮，不择手段"</span>)</span><br><span class="line">msg.attach(part)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#---这是附件部分---</span></span><br><span class="line"><span class="comment">#xlsx类型附件</span></span><br><span class="line">part = MIMEApplication(open(<span class="string">'foo.xlsx'</span>,<span class="string">'rb'</span>).read())</span><br><span class="line">part.add_header(<span class="string">'Content-Disposition'</span>, <span class="string">'attachment'</span>, filename=<span class="string">"foo.xlsx"</span>)</span><br><span class="line">msg.attach(part)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#jpg类型附件</span></span><br><span class="line">part = MIMEApplication(open(<span class="string">'foo.jpg'</span>,<span class="string">'rb'</span>).read())</span><br><span class="line">part.add_header(<span class="string">'Content-Disposition'</span>, <span class="string">'attachment'</span>, filename=<span class="string">"foo.jpg"</span>)</span><br><span class="line">msg.attach(part)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#pdf类型附件</span></span><br><span class="line">part = MIMEApplication(open(<span class="string">'foo.pdf'</span>,<span class="string">'rb'</span>).read())</span><br><span class="line">part.add_header(<span class="string">'Content-Disposition'</span>, <span class="string">'attachment'</span>, filename=<span class="string">"foo.pdf"</span>)</span><br><span class="line">msg.attach(part)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#mp3类型附件</span></span><br><span class="line">part = MIMEApplication(open(<span class="string">'foo.mp3'</span>,<span class="string">'rb'</span>).read())</span><br><span class="line">part.add_header(<span class="string">'Content-Disposition'</span>, <span class="string">'attachment'</span>, filename=<span class="string">"foo.mp3"</span>)</span><br><span class="line">msg.attach(part)</span><br><span class="line"> </span><br><span class="line">s = smtplib.SMTP(<span class="string">"smtp.qq.com"</span>, timeout=<span class="number">30</span>)<span class="comment">#连接smtp邮件服务器,端口默认是25</span></span><br><span class="line">s.login(_user, _pwd)<span class="comment">#登陆服务器</span></span><br><span class="line">s.sendmail(_user, _to, msg.as_string())<span class="comment">#发送邮件</span></span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      使用Python发送各种格式的邮件
    
    </summary>
    
      <category term="python" scheme="https://cloudsjhan.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://cloudsjhan.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>技术周刊之当你ping的时候，发生了什么？</title>
    <link href="https://cloudsjhan.github.io/2018/09/16/%E6%8A%80%E6%9C%AF%E5%91%A8%E5%88%8A%E4%B9%8B%E5%BD%93%E4%BD%A0ping%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88%EF%BC%9F/"/>
    <id>https://cloudsjhan.github.io/2018/09/16/技术周刊之当你ping的时候，发生了什么？/</id>
    <published>2018-09-16T13:40:02.000Z</published>
    <updated>2018-09-16T13:49:36.202Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><p><img src="https://" alt="" style="width:100%"></p><a id="more"></a><p>我们在遇到网络不通的情况，大家都知道去 ping 一下，看一下网络状况。那你知道「ping」命令后背的逻辑是什么吗？知道它是如何实现的吗？本周就让我们深入浅出ping的机制。</p><h2 id="ping的作用和原理"><a href="#ping的作用和原理" class="headerlink" title="ping的作用和原理"></a>ping的作用和原理</h2><p>简单来说，「ping」是用来探测本机与网络中另一主机之间是否可达的命令，如果两台主机之间ping不通，则表明这两台主机不能建立起连接。ping是定位网络通不通的一个重要手段。</p><p>ping 命令是基于 ICMP 协议来工作的，「 ICMP 」全称为 Internet 控制报文协议（ Internet Control Message Protocol）。ping 命令会发送一份ICMP回显请求报文给目标主机，并等待目标主机返回ICMP回显应答。因为ICMP协议会要求目标主机在收到消息之后，必须返回ICMP应答消息给源主机，如果源主机在一定时间内收到了目标主机的应答，则表明两台主机之间网络是可达的。</p><p>举一个例子来描述「ping」命令的工作过程：</p><ol><li>假设有两个主机，主机A（192.168.0.1）和主机B（192.168.0.2），现在我们要监测主机A和主机B之间网络是否可达，那么我们在主机A上输入命令：ping 192.168.0.2</li><li>此时，ping命令会在主机A上构建一个 ICMP的请求数据包（数据包里的内容后面再详述），然后 ICMP协议会将这个数据包以及目标IP（192.168.0.2）等信息一同交给IP层协议。</li><li>IP层协议得到这些信息后，将源地址（即本机IP）、目标地址（即目标IP：192.168.0.2）、再加上一些其它的控制信息，构建成一个IP数据包。</li><li>IP数据包构建完成后，还不够，还需要加上MAC地址，因此，还需要通过ARP映射表找出目标IP所对应的MAC地址。当拿到了目标主机的MAC地址和本机MAC后，一并交给数据链路层，组装成一个数据帧，依据以太网的介质访问规则，将它们传送出出去。</li><li>当主机B收到这个数据帧之后，会首先检查它的目标MAC地址是不是本机，如果是就接收下来处理，接收之后会检查这个数据帧，将数据帧中的IP数据包取出来，交给本机的IP层协议，然后IP层协议检查完之后，再将ICMP数据包取出来交给ICMP协议处理，当这一步也处理完成之后，就会构建一个ICMP应答数据包，回发给主机A</li><li>在一定的时间内，如果主机A收到了应答包，则说明它与主机B之间网络可达，如果没有收到，则说明网络不可达。除了监测是否可达以外，还可以利用应答时间和发起时间之间的差值，计算出数据包的延迟耗时。</li></ol><p>通过ping的流程可以发现，ICMP协议是这个过程的基础，是非常重要的，因此下面就把ICMP协议再详细解释一下。</p><h2 id="ICMP简介"><a href="#ICMP简介" class="headerlink" title="ICMP简介"></a>ICMP简介</h2><p>我们知道，ping命令是基于ICMP协议来实现的。那么我们再来看下图，就明白了ICMP协议又是通过IP协议来发送的，即ICMP报文是封装在IP包中。</p><p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fvbpqk4zgbj308b02it8q.jpg" alt=""></p><p>IP协议是一种无连接的，不可靠的数据包协议，它并不能保证数据一定被送达，那么我们要保证数据送到就需要通过其它模块来协助实现，这里就引入的是ICMP协议。</p><p>当传送的IP数据包发送异常的时候，ICMP就会将异常信息封装在包内，然后回传给源主机。</p><p>将上图再细拆一下可见：</p><p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fvbps2ezmoj30b1028jr6.jpg" alt=""></p><p>将ICMP部分拆开继续分析：</p><p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fvbptg9n1uj30ci047t8s.jpg" alt=""></p><p>由图可知，ICMP数据包由8bit的类型字段和8bit的代码字段以及16bit的校验字段再加上选项数据组成。</p><p>ICMP协议大致可分为两类：</p><ul><li>查询报文类型</li><li>差错报文类型</li></ul><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fvbpuk9vf2j30bo0bv747.jpg" alt=""></p><ol><li>查询报文类型：</li></ol><p>查询报文主要应用于：ping查询、子网掩码查询、时间戳查询等等。</p><p>上面讲到的ping命令的流程其实就对应ICMP协议查询报文类型的一种使用。在主机A构建ICMP请求数据包的时候，其ICMP的类型字段中使用的是 8 （回送请求），当主机B构建ICMP应答包的时候，其ICMP类型字段就使用的是 0 （回送应答），更多类型值参考上表。</p><p>对 查询报文类型 的理解可参考一下文章最开始讲的ping流程，这里就不做赘述。</p><ol start="2"><li>差错报文类型：</li></ol><p>差错报文主要产生于当数据传送发送错误的时候。</p><p>它包括：目标不可达（网络不可达、主机不可达、协议不可达、端口不可达、禁止分片等）、超时、参数问题、重定向（网络重定向、主机重定向等）等等。</p><p>差错报文通常包含了引起错误的IP数据包的第一个分片的IP首部，加上该分片数据部分的前8个字节。</p><p>当传送IP数据包发生错误的时候（例如 主机不可达），ICMP协议就会把错误信息封包，然后传送回源主机，那么源主机就知道该怎么处理了。</p><p>那是不是只有遇到错误的时候才能使用 差错报文类型 呢？也不一定。</p><p>Traceroute 就是一个例外，Traceroute是用来侦测源主机到目标主机之间所经过路由情况的常用工具。Traceroute 的原理就是利用ICMP的规则，制造一些错误的事件出来，然后根据错误的事件来评估网络路由情况。</p><p>具体做法就是：</p><p>Traceroute会设置特殊的TTL值，来追踪源主机和目标主机之间的路由数。首先它给目标主机发送一个 TTL=1 的UDP数据包，那么这个数据包一旦在路上遇到一个路由器，TTL就变成了0（TTL规则是每经过一个路由器都会减1），因为TTL=0了，所以路由器就会把这个数据包丢掉，然后产生一个错误类型（超时）的ICMP数据包回发给源主机，也就是差错包。这个时候源主机就拿到了第一个路由节点的IP和相关信息了。</p><p>接着，源主机再给目标主机发一个 TTL=2 的UDP数据包，依旧上述流程走一遍，就知道第二个路由节点的IP和耗时情况等信息了。</p><p>如此反复进行，Traceroute就可以拿到从主机A到主机B之间所有路由器的信息了。</p><p>但是有个问题是，如果数据包到达了目标主机的话，即使目标主机接收到TTL值为1的IP数据包，它也是不会丢弃该数据包的，也不会产生一份超时的ICMP回发数据包的，因为数据包已经达到了目的地嘛。那我们应该怎么认定数据包是否达到了目标主机呢？</p><p>Traceroute的方法是在源主机发送UDP数据包给目标主机的时候，会设置一个不可能达到的目标端口号（例如大于30000的端口号），那么当这个数据包真的到达目标主机的时候，目标主机发现没有对应的端口号，因此会产生一份“端口不可达”的错误ICMP报文返回给源主机。</p><p>traceroot的具体使用方法网上都有很多讲解，可以实际操作一下。</p><hr>]]></content>
    
    <summary type="html">
    
      我们在遇到网络不通的情况，大家都知道去 ping 一下，看一下网络状况。那你知道「ping」命令后背的逻辑是什么吗？知道它是如何实现的吗？
    
    </summary>
    
      <category term="技术周刊" scheme="https://cloudsjhan.github.io/categories/%E6%8A%80%E6%9C%AF%E5%91%A8%E5%88%8A/"/>
    
    
      <category term="网络" scheme="https://cloudsjhan.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7-安装docker-compose时由于pip10包管理导致的错误</title>
    <link href="https://cloudsjhan.github.io/2018/09/13/CentOS7-%E5%AE%89%E8%A3%85docker-compose%E6%97%B6%E7%94%B1%E4%BA%8Epip10%E5%8C%85%E7%AE%A1%E7%90%86%E5%AF%BC%E8%87%B4%E7%9A%84%E9%94%99%E8%AF%AF/"/>
    <id>https://cloudsjhan.github.io/2018/09/13/CentOS7-安装docker-compose时由于pip10包管理导致的错误/</id>
    <published>2018-09-13T02:11:49.000Z</published>
    <updated>2018-09-13T02:15:53.522Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><p><img src="https://" alt="" style="width:100%"></p><a id="more"></a><ul><li>今天在CentOS下安装docker-compose，遇到了Cannot uninstall ‘requests’. It is a distutils installed project and thus we cannot accurately determine which files belong to it which would lead to only a partial uninstall.<br>错误的原因是requests默认版本为2.6.0，但是docker-compose要2.9以上才支持，但是无法正常卸载2.9版本，是pip10对包的管理存在变化。</li><li>解决方案：<ul><li>pip install -l requests==2.9</li></ul></li></ul><hr>]]></content>
    
    <summary type="html">
    
      CentOS下安装Docker-compose时出现了 Cannot uninstall &#39;requests&#39;. It is a distutils installed project and thus we cannot accurately determine which files belong to it which would lead to only a partial uninstall.
    
    </summary>
    
      <category term="Docker" scheme="https://cloudsjhan.github.io/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://cloudsjhan.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>技术周刊之解析Python中的赋值、浅拷贝、深拷贝</title>
    <link href="https://cloudsjhan.github.io/2018/09/09/%E6%8A%80%E6%9C%AF%E5%91%A8%E5%88%8A%E4%B9%8B%E8%A7%A3%E6%9E%90Python%E4%B8%AD%E7%9A%84%E8%B5%8B%E5%80%BC%E3%80%81%E6%B5%85%E6%8B%B7%E8%B4%9D%E3%80%81%E6%B7%B1%E6%8B%B7%E8%B4%9D/"/>
    <id>https://cloudsjhan.github.io/2018/09/09/技术周刊之解析Python中的赋值、浅拷贝、深拷贝/</id>
    <published>2018-09-09T06:39:05.000Z</published>
    <updated>2018-09-09T08:03:48.727Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><p><img src="https://" alt="" style="width:100%"></p><a id="more"></a><h2 id="事情的起因"><a href="#事情的起因" class="headerlink" title="事情的起因"></a>事情的起因</h2><ul><li><p>本周我们分享的主题是Python中关于浅拷贝和深拷贝的特性，想要深入研究Python中的浅拷贝和深拷贝的起因在于，我想生成一个json字符串，该字符串未dumps之前是一个Python的数据结构，里面包含字典，以及List，在遍历生成dictionary时候，出现一个bug，就是每次遍历生成的dictionary都是上一次的值，现象可以看以下代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里我们定义一个函数get_data()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_data</span><span class="params">()</span>:</span></span><br><span class="line">   ...:     appid_dict = &#123;&#125;</span><br><span class="line">   ...:     appid_all_dict = &#123;&#125;</span><br><span class="line">   ...:     <span class="keyword">import</span> pdb;pdb.set_trace()</span><br><span class="line">   ...:     <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">   ...:         appid_dict[<span class="string">'a'</span>] = i</span><br><span class="line">   ...:         appid_all_dict[i] = appid_dict</span><br><span class="line"><span class="comment"># 我们的初衷是想要得到</span></span><br><span class="line"><span class="comment"># &#123;0: &#123;'a': 0&#125;, 1: &#123;'a': 1&#125;, 2: &#123;'a': 2&#125;, 3: &#123;'a': 3&#125;&#125;....这样的一个dict</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 但是在调试过程中，发现得到的结果是这样的：</span></span><br><span class="line"><span class="comment"># (Pdb) appid_all_dict</span></span><br><span class="line"><span class="comment"># &#123;0: &#123;'a': 2&#125;, 1: &#123;'a': 2&#125;, 2: &#123;'a': 2&#125;&#125;</span></span><br><span class="line"><span class="comment"># (Pdb) </span></span><br><span class="line"><span class="comment"># 即，后面的appid_dict都会把前面的覆盖掉，这是什么原因呢？</span></span><br><span class="line"><span class="comment"># 我们这里先把原因说一下：因为Python中对dict的操作默认是浅拷贝，即同样的字典，使用多次的话，每次使用都是指向同一片内存地址(引用)，所以在上面的程序中后面对appid_dict的赋值，都将前面的给覆盖掉了，导致每一个appid_dict指向同一片内存，读取的当然就是最后一次的appid_dict的值，即上面程序的执行结果：</span></span><br><span class="line">&#123;<span class="number">0</span>: &#123;<span class="string">'a'</span>: <span class="number">9</span>&#125;, <span class="number">1</span>: &#123;<span class="string">'a'</span>: <span class="number">9</span>&#125;, <span class="number">2</span>: &#123;<span class="string">'a'</span>: <span class="number">9</span>&#125;, <span class="number">3</span>: &#123;<span class="string">'a'</span>: <span class="number">9</span>&#125;, <span class="number">4</span>: &#123;<span class="string">'a'</span>: <span class="number">9</span>&#125;, <span class="number">5</span>: &#123;<span class="string">'a'</span>: <span class="number">9</span>&#125;, <span class="number">6</span>: &#123;<span class="string">'a'</span>: <span class="number">9</span>&#125;, <span class="number">7</span>: &#123;<span class="string">'a'</span>: <span class="number">9</span>&#125;, <span class="number">8</span>: &#123;<span class="string">'a'</span>: <span class="number">9</span>&#125;, <span class="number">9</span>: &#123;<span class="string">'a'</span>: <span class="number">9</span>&#125;&#125;</span><br></pre></td></tr></table></figure><ul><li><p>那么如何修改这个bug，让程序输出我们想要得到的结果：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;0: &#123;'a': 0&#125;, 1: &#123;'a': 1&#125;, 2: &#123;'a': 2&#125;, 3: &#123;'a': 3&#125;, 4: &#123;'a': 4&#125;, 5: &#123;'a': 5&#125;, 6: &#123;'a': 6&#125;, 7: &#123;'a': 7&#125;, 8: &#123;'a': 8&#125;, 9: &#123;'a': 9&#125;&#125;</span><br></pre></td></tr></table></figure></li><li><p>看完下面对于Python赋值、浅拷贝、深拷贝的解析，相信你就可以自己解决这个问题了</p></li></ul><h4 id="Python中的赋值操作"><a href="#Python中的赋值操作" class="headerlink" title="Python中的赋值操作"></a>Python中的赋值操作</h4><ul><li>赋值：就是对象的引用</li><li>举例： a = b: 赋值引用，a和b都指向同一个对象，如图所示<img src="https://ws4.sinaimg.cn/large/006tNbRwly1fv3bo527hfj30y80lwq7i.jpg" alt=""></li></ul><h2 id="Python中浅拷贝"><a href="#Python中浅拷贝" class="headerlink" title="Python中浅拷贝"></a>Python中浅拷贝</h2><ul><li>a = b.copy(): a 是b的浅拷贝，a和b是一个独立的对象，但是它们的子对象还是指向同一片引用。<img src="https://ws4.sinaimg.cn/large/006tNbRwly1fv3btp4y4ij30zs0neq9f.jpg" alt=""></li><li>Python中对字典的默认赋值操作就是浅拷贝，所以导致了文章开头所出现的情况。</li></ul><h2 id="Python中的深拷贝"><a href="#Python中的深拷贝" class="headerlink" title="Python中的深拷贝"></a>Python中的深拷贝</h2><ul><li>首先import copy,导入copy模块（Python中自带），b = copy.deepcopy(a), 我们就说b是a的深拷贝，b拷贝了a所有的资源对象，并新开辟了一块地址空间，两者互不干涉。<img src="https://ws1.sinaimg.cn/large/006tNbRwly1fv3bymsju4j311w0oi100.jpg" alt=""></li></ul><h2 id="实际的例子来进一步说明"><a href="#实际的例子来进一步说明" class="headerlink" title="实际的例子来进一步说明"></a>实际的例子来进一步说明</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">13</span>]: <span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line">In [<span class="number">14</span>]: <span class="function"><span class="keyword">def</span> <span class="title">temp</span><span class="params">()</span>:</span></span><br><span class="line">    ...:     a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>]]</span><br><span class="line">    ...:     b = a <span class="comment"># 赋值操作，直接传所有对象的引用</span></span><br><span class="line">    ...:     c = copy.copy(a) <span class="comment"># 浅拷贝，子对象指向同一引用</span></span><br><span class="line">    ...:     d = copy.deepcopy(a) <span class="comment"># 深拷贝，互不干涉</span></span><br><span class="line">    ...:     a.append(<span class="number">5</span>) <span class="comment"># 修改对象a</span></span><br><span class="line">    ...:     a[<span class="number">4</span>].append(<span class="string">'c'</span>) <span class="comment"># 修改a中的数组</span></span><br><span class="line">    ...:     print( <span class="string">'a = '</span>, a )</span><br><span class="line">    ...:     print( <span class="string">'b = '</span>, b )</span><br><span class="line">    ...:     print( <span class="string">'c = '</span>, c )</span><br><span class="line">    ...:     print( <span class="string">'d = '</span>, d ) </span><br><span class="line">    ...:     </span><br><span class="line"></span><br><span class="line">In [<span class="number">15</span>]: </span><br><span class="line"></span><br><span class="line">In [<span class="number">15</span>]: temp()</span><br><span class="line">a =  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>], <span class="number">5</span>]</span><br><span class="line">b =  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>], <span class="number">5</span>]</span><br><span class="line">c =  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]]</span><br><span class="line">d =  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>]]</span><br></pre></td></tr></table></figure></li></ul><h2 id="解决最初的问题"><a href="#解决最初的问题" class="headerlink" title="解决最初的问题"></a>解决最初的问题</h2><ul><li><p>看到这里，我们再回头看文章最初的那个问题，就可以很easy地解决了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_data</span><span class="params">()</span>:</span></span><br><span class="line">   ...:     appid_dict = &#123;&#125;</span><br><span class="line">   ...:     appid_all_dict = &#123;&#125;</span><br><span class="line">   ...:     <span class="keyword">import</span> pdb;pdb.set_trace()</span><br><span class="line">   ...:     <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        appid_dict = copy.deepcopy(appid_dict)<span class="comment"># 只需要加上这一行，使其成为深拷贝，问题解决！</span></span><br><span class="line">   ...:         appid_dict[<span class="string">'a'</span>] = i</span><br><span class="line">   ...:         appid_all_dict[i] = appid_dict</span><br></pre></td></tr></table></figure></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>要对Python的dictionary进行迭代分析，一定要注意其中的深拷贝问题，出现问题后，也要多往这方面考虑。</p><p>本期技术周刊到此结束。</p><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1536489838162&amp;di=52a5d7c56631ad266740914505a80a32&amp;imgtype=0&amp;src=http%3A%2F%2Ffile.elecfans.com%2Fweb1%2FM00%2F57%2FB6%2Fo4YBAFtMadCAL43RAAHzi5GNn9o475.png" alt=""></p><hr>]]></content>
    
    <summary type="html">
    
      这周让我们来看一下Python中关于赋值、浅拷贝、深拷贝的特性
    
    </summary>
    
      <category term="技术周刊" scheme="https://cloudsjhan.github.io/categories/%E6%8A%80%E6%9C%AF%E5%91%A8%E5%88%8A/"/>
    
    
      <category term="Python" scheme="https://cloudsjhan.github.io/tags/Python/"/>
    
      <category term="技术周刊" scheme="https://cloudsjhan.github.io/tags/%E6%8A%80%E6%9C%AF%E5%91%A8%E5%88%8A/"/>
    
  </entry>
  
  <entry>
    <title>golang 编译针对不同平台的可执行程序</title>
    <link href="https://cloudsjhan.github.io/2018/09/07/golang-%E7%BC%96%E8%AF%91%E9%92%88%E5%AF%B9%E4%B8%8D%E5%90%8C%E5%B9%B3%E5%8F%B0%E7%9A%84%E5%8F%AF%E6%89%A7%E8%A1%8C%E7%A8%8B%E5%BA%8F/"/>
    <id>https://cloudsjhan.github.io/2018/09/07/golang-编译针对不同平台的可执行程序/</id>
    <published>2018-09-07T07:46:32.000Z</published>
    <updated>2018-09-07T07:48:43.584Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><p><img src="https://" alt="" style="width:100%"></p><a id="more"></a><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">Golang 支持在一个平台下生成另一个平台可执行程序的交叉编译功能。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Mac下编译Linux, Windows平台的64位可执行程序：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build test.go</span><br><span class="line">CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build test.go</span><br><span class="line">Linux下编译Mac, Windows平台的64位可执行程序：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build test.go</span><br><span class="line">CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build test.go</span><br><span class="line">Windows下编译Mac, Linux平台的64位可执行程序：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SET CGO_ENABLED=0</span><br><span class="line">SET GOOS=darwin3</span><br><span class="line">SET GOARCH=amd64</span><br><span class="line">go build test.go</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SET CGO_ENABLED=0</span><br><span class="line">SET GOOS=linux</span><br><span class="line">SET GOARCH=amd64</span><br><span class="line">go build test.go</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">GOOS：目标可执行程序运行操作系统，支持 darwin，freebsd，linux，windows</span><br><span class="line">GOARCH：目标可执行程序操作系统构架，包括 386，amd64，arm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Golang version 1.5以前版本在首次交叉编译时还需要配置交叉编译环境：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CGO_ENABLED=0 GOOS=linux GOARCH=amd64 ./make.bash</span><br><span class="line">CGO_ENABLED=0 GOOS=windows GOARCH=amd64 ./make.bash</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      使用go build 编译同一套代码，在不同的平台运行
    
    </summary>
    
      <category term="golang" scheme="https://cloudsjhan.github.io/categories/golang/"/>
    
    
      <category term="golang" scheme="https://cloudsjhan.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>常用的Python小模块</title>
    <link href="https://cloudsjhan.github.io/2018/09/06/%E5%B8%B8%E7%94%A8%E7%9A%84Python%E5%B0%8F%E6%A8%A1%E5%9D%97/"/>
    <id>https://cloudsjhan.github.io/2018/09/06/常用的Python小模块/</id>
    <published>2018-09-06T08:24:41.000Z</published>
    <updated>2018-09-28T02:06:00.780Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><p><img src="https://" alt="" style="width:100%"></p><a id="more"></a><ul><li>工作或者生活中总会遇到一些常用的Python模块，为了避免重复的工作，将这些自己写过的Python模块记录下来，方便使用的时候查找。</li></ul><h3 id="Python写CSV文件，并防止中文乱码"><a href="#Python写CSV文件，并防止中文乱码" class="headerlink" title="Python写CSV文件，并防止中文乱码"></a>Python写CSV文件，并防止中文乱码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_csv</span><span class="params">(a_list,b_list)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'vm_data.csv'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(codecs.BOM_UTF8.decode())</span><br><span class="line">        writer1 = csv.writer(f,  dialect=<span class="string">'excel'</span>)</span><br><span class="line">        <span class="comment">#写CVS的标题</span></span><br><span class="line">        writer1.writerow([<span class="string">'a'</span>, <span class="string">'b'</span>])</span><br><span class="line">        <span class="comment">#将数据写入CSV文件</span></span><br><span class="line">        writer1.writerows(zip(a_list, b_list))</span><br></pre></td></tr></table></figure><h3 id="Python将数据结构转为json-并优化json字符串的结构，处理中文乱码"><a href="#Python将数据结构转为json-并优化json字符串的结构，处理中文乱码" class="headerlink" title="Python将数据结构转为json,并优化json字符串的结构，处理中文乱码"></a>Python将数据结构转为json,并优化json字符串的结构，处理中文乱码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">"appid.json"</span>, <span class="string">'w'</span>, encoding=<span class="string">'utf8'</span>, ) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(json.dumps(final, sort_keys=<span class="keyword">True</span>, indent=<span class="number">2</span>, ensure_ascii=<span class="keyword">False</span>))</span><br><span class="line"><span class="comment"># sort_keys = True: 将字典的key按照字母排序</span></span><br><span class="line"><span class="comment"># ident = 2: 优化json字符串结构，看起来更美观</span></span><br><span class="line"><span class="comment"># ensure_ascii=False: 防止json字符串中的中文乱码</span></span><br></pre></td></tr></table></figure><h3 id="使用requests包进行网络请求（以post为例）"><a href="#使用requests包进行网络请求（以post为例）" class="headerlink" title="使用requests包进行网络请求（以post为例）"></a>使用requests包进行网络请求（以post为例）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def  get_data(url):</span><br><span class="line">    final = &#123;&#125;</span><br><span class="line">    url = &quot;http://xxxx.com&quot;</span><br><span class="line">    request_body = &#123;</span><br><span class="line">        &apos;access_token&apos;: access_token,</span><br><span class="line">        &apos;request_body&apos;: &#123;&quot;params1&quot;: param1, &apos;params2&apos;: param2&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    headers = &#123;</span><br><span class="line">        &apos;Content-type&apos;: &apos;application/json&apos;</span><br><span class="line">    &#125;</span><br><span class="line">    data = requests.post(url, headers=headers, data=json.dumps(request_body))</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      常用的Python模块，即查即用
    
    </summary>
    
      <category term="python" scheme="https://cloudsjhan.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://cloudsjhan.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Mysql无法连接[MySql Host is blocked because of many connection errors]</title>
    <link href="https://cloudsjhan.github.io/2018/09/01/Mysql%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5/"/>
    <id>https://cloudsjhan.github.io/2018/09/01/Mysql无法连接/</id>
    <published>2018-09-01T05:20:54.000Z</published>
    <updated>2018-09-01T05:38:58.657Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><a id="more"></a><ul><li><p>测试环境，发现数据库（MySQL数据库）无法登录，报错如下：</p><p>Host is blocked because of many connection errors; unblock with ‘mysqladmin flush-hosts’</p></li><li><p>解决方案：使用mysqladmin flush-hosts 命令清理一下hosts文件（不知道mysqladmin在哪个目录下可以使用命令查找：whereis mysqladmin）；</p></li><li><p>登录到MySQL数据库中，mysql -uroot -h host -p</p></li><li><p>执行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqladmin <span class="keyword">flush</span>-<span class="keyword">hosts</span></span><br></pre></td></tr></table></figure><p>问题解决。</p></li></ul><hr>]]></content>
    
    <summary type="html">
    
      mysql 出现[MySql Host is blocked because of many connection errors]的错误
    
    </summary>
    
      <category term="MySQL" scheme="https://cloudsjhan.github.io/categories/MySQL/"/>
    
    
      <category term="mysql" scheme="https://cloudsjhan.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>mysql 开启远程连接</title>
    <link href="https://cloudsjhan.github.io/2018/08/29/mysql-%E5%BC%80%E5%90%AF%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/"/>
    <id>https://cloudsjhan.github.io/2018/08/29/mysql-开启远程连接/</id>
    <published>2018-08-29T03:17:20.000Z</published>
    <updated>2018-09-01T05:35:43.913Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><a id="more"></a><ul><li>背景： 建站的时候会出现数据库和网站是不同的ip，就需要开启MySQL的远程连接服务，但是MySQL由于安全原因，默认设置是不允许远程只能本地连接，要开启远程连接就需要修改某些配置文件。</li></ul><h3 id="按照下面的步骤，开启MySQL的远程连接"><a href="#按照下面的步骤，开启MySQL的远程连接" class="headerlink" title="按照下面的步骤，开启MySQL的远程连接"></a>按照下面的步骤，开启MySQL的远程连接</h3><ul><li><p>进入数据库cmd</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -h host -p</span><br><span class="line">Enter password:***</span><br></pre></td></tr></table></figure></li><li><p>连接到默认mysql数据库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">show databases;</span><br><span class="line"></span><br><span class="line">use mysql;</span><br></pre></td></tr></table></figure></li><li><p>配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Grant all privileges on *.* to 'root'@'host' identified by 'password' with grant option;</span><br></pre></td></tr></table></figure><p>host表示你远程连接数据库设备的ip地址（如果你想让所有机器都能远程连接，host改为‘%’，<strong>不推荐这样使用</strong>），password表示MySQL的root用户密码</p></li><li><p>刷新or重启MySQL</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> flush privileges;</span></span><br></pre></td></tr></table></figure></li><li><p>最后非常重要的一点</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/vim /etc/mysql/my.cnf</span><br><span class="line">屏蔽bing-server 127.0.0.0</span><br><span class="line"><span class="meta">#</span><span class="bash">bing-server 127.0.0.0</span></span><br></pre></td></tr></table></figure></li><li><p>完成，可以远程连接你的数据库了</p></li></ul><hr>]]></content>
    
    <summary type="html">
    
      不管是在测试还是开发中，MySQL经常需要开启远程连接功能
    
    </summary>
    
      <category term="MySQL" scheme="https://cloudsjhan.github.io/categories/MySQL/"/>
    
    
      <category term="mysql" scheme="https://cloudsjhan.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>golang factory design 引发的一系列思考</title>
    <link href="https://cloudsjhan.github.io/2018/08/29/golang-factory-design-%E5%BC%95%E5%8F%91%E7%9A%84%E4%B8%80%E7%B3%BB%E5%88%97%E6%80%9D%E8%80%83/"/>
    <id>https://cloudsjhan.github.io/2018/08/29/golang-factory-design-引发的一系列思考/</id>
    <published>2018-08-29T02:21:56.000Z</published>
    <updated>2018-09-01T07:18:05.039Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><a id="more"></a><ul><li>写在前面，突然萌生一个念头，做一个技术周刊系列，将每周工作或者生活当中遇到的比较有趣的问题记录下来，一来时总结一下，二来是为了以后退役了，可以回顾自己的技术生涯。</li><li>没有什么意外的话，我会每周六晚更新。</li><li>最近在整合三家公有云（AWS，ali, ucloud）的接口，考虑到代码复用的问题，于是开始考虑使用一种设计模式，这种场景下，最合适的便是工厂模式，将三家厂商的公有接口放入工厂方法中，然后对每一家new一个实例即可，以后再有新的厂商加入，改动的代码也不会太多。但是设计模式这种东西天然适合于java，对于golang这种比较新的语言来说，实现起来相对没有那么容易，对于刚接触golang的我来说，对一些golang的特性上并不是很熟悉，所以在此期间遇到一些不解的问题，写出来分享一下。</li></ul><h3 id="首先，什么是工厂模式"><a href="#首先，什么是工厂模式" class="headerlink" title="首先，什么是工厂模式"></a>首先，什么是工厂模式</h3><ul><li>简单工厂模式就是通过传递不同的参数，生成不同的实例，工厂方法为每一个product提供一个工程类，通过不同的工厂创建不同的实例。</li></ul><h3 id="典型工厂模式的实现方式（即典型oop实现方式）"><a href="#典型工厂模式的实现方式（即典型oop实现方式）" class="headerlink" title="典型工厂模式的实现方式（即典型oop实现方式）"></a>典型工厂模式的实现方式（即典型oop实现方式）</h3><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProviderModel</span>&#123;</span></span><br><span class="line">    provider <span class="built_in">string</span></span><br><span class="line">        <span class="function">func <span class="title">factory</span><span class="params">(providerName <span class="built_in">string</span>, test <span class="built_in">string</span>)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> providerName == <span class="string">"AWS"</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> AWS(test)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> providerName == <span class="string">"Ali"</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Ali(test)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class AWS extends ProviderModel &#123;</span><br><span class="line">    func construct(test <span class="built_in">string</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.test = test</span><br><span class="line">    &#125;</span><br><span class="line">    func doRequest()&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">awsmodel := ProviderModel::factory(<span class="string">"AWS"</span>)</span><br><span class="line">awsmodel.doRequest()</span><br><span class="line"></span><br><span class="line">alimodel := ProviderModel ::factory(<span class="string">"Ali"</span>)  </span><br><span class="line">alimodel.doRequest()</span><br></pre></td></tr></table></figure></li></ul><h3 id="golang实现工厂模式存在的问题"><a href="#golang实现工厂模式存在的问题" class="headerlink" title="golang实现工厂模式存在的问题"></a>golang实现工厂模式存在的问题</h3><ul><li><p>golang的特性中并没有像java一样的继承和重载，所以我们要利用golang存在的特性，透过工厂模式的表面透析其本质。</p></li><li><p>我们看一下工厂模式就知道，所谓工厂其实就是定义了一些需要去实现的方法，golang的interface正是可以做到。于是先到Google上搜了一段golang实现的工厂模式的代码。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Operater <span class="keyword">interface</span> &#123;</span><br><span class="line">    Operate(<span class="keyword">int</span>, <span class="keyword">int</span>) <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> AddOperate <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *AddOperate)</span> <span class="title">Operate</span><span class="params">(rhs <span class="keyword">int</span>, lhs <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> rhs + lhs</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MultipleOperate <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MultipleOperate)</span> <span class="title">Operate</span><span class="params">(rhs <span class="keyword">int</span>, lhs <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> rhs * lhs</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> OperateFactory <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewOperateFactory</span><span class="params">()</span> *<span class="title">OperateFactory</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;OperateFactory&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *OperateFactory)</span> <span class="title">CreateOperate</span><span class="params">(operatename <span class="keyword">string</span>)</span> <span class="title">Operater</span></span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> operatename &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"+"</span>:</span><br><span class="line">        <span class="keyword">return</span> &amp;AddOperate&#123;&#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"*"</span>:</span><br><span class="line">        <span class="keyword">return</span> &amp;MultipleOperate&#123;&#125;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">panic</span>(<span class="string">"无效运算符号"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    Operator := NewOperateFactory().CreateOperate(<span class="string">"+"</span>)</span><br><span class="line">    fmt.Printf(<span class="string">"add result is %d\n"</span>, Operator.Operate(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码看起来没什么问题，后来又看到一种实现方式，<a href="https://www.jianshu.com/p/9de2cd9bf8f0" target="_blank" rel="noopener">来自这篇博客</a>，代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> site <span class="keyword">interface</span> &#123;</span><br><span class="line">    fetch()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> siteModel <span class="keyword">struct</span> &#123;</span><br><span class="line">    URL <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> site1 <span class="keyword">struct</span> &#123;</span><br><span class="line">    siteModel</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s site1)</span> <span class="title">fetch</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"site1 fetch data"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">factory</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">site</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> s == <span class="string">"site"</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> site1&#123;</span><br><span class="line">            siteModel&#123;URL: <span class="string">"http://www.xxxx.com"</span>&#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    s := factory(<span class="string">"site"</span>)</span><br><span class="line">    s.fetch()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码初看上去跟第一个实现没什么不一样，但是当我详细阅读代码时，下面的这句代码着实把我弄晕了</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">factory</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">site</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> s == <span class="string">"site"</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> site1&#123;</span><br><span class="line">            siteModel&#123;URL: <span class="string">"http://www.xxxx.com"</span>&#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>factory函数的返回值定义明明是一个interface, 但是在return的时候，却返回一个struct，查阅很多资料后，<a href="http://legendtkl.com/2017/06/12/understanding-golang-interface/" target="_blank" rel="noopener">这篇博客</a>帮了我的大忙，其中对interface的解释有这么一句话：<strong>在 Golang 中，interface 是一组 method 的集合，是 duck-type programming 的一种体现。不关心属性（数据），只关心行为（方法）。具体使用中你可以自定义自己的 struct，并提供特定的 interface 里面的 method 就可以把它当成 interface 来使用。</strong>之后又详细看了几遍这篇博文，犹如醍醐灌顶，对golanginterface的理解更深了一层。读完这篇后再去实现工厂模式，或者再去写golang的代码，对interface的使用就会更自如一些。</p></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><p>本期技术周刊主要由golang工厂模式的讨论引起，之后又涉及到golang interface特性的讨论，对以后使用golang编写更加复杂的代码很有帮助。</p></li><li><p>本期结束，欲知后事如何，且看下周分解。</p><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1535796309427&amp;di=a9db53cf71b492f4dd06a57b5ec65229&amp;imgtype=jpg&amp;src=http%3A%2F%2Fimg4.imgtn.bdimg.com%2Fit%2Fu%3D2705270329%2C1518266531%26fm%3D214%26gp%3D0.jpg" alt=""></p></li></ul><hr>]]></content>
    
    <summary type="html">
    
      工作需要，看了一下golang如何实现工厂模式，遇到一些难以理解的知识点，查资料，写demo验证后，记录下来以供参考
    
    </summary>
    
      <category term="技术周刊" scheme="https://cloudsjhan.github.io/categories/%E6%8A%80%E6%9C%AF%E5%91%A8%E5%88%8A/"/>
    
    
      <category term="golang design pattern go-interface" scheme="https://cloudsjhan.github.io/tags/golang-design-pattern-go-interface/"/>
    
  </entry>
  
  <entry>
    <title>golang中的工厂模式</title>
    <link href="https://cloudsjhan.github.io/2018/08/27/golang%E4%B8%AD%E7%9A%84%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F-md/"/>
    <id>https://cloudsjhan.github.io/2018/08/27/golang中的工厂模式-md/</id>
    <published>2018-08-27T10:53:24.000Z</published>
    <updated>2018-08-27T11:18:09.576Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><p><img src="https://" alt="" style="width:100%"></p><a id="more"></a><ul><li>研究go的设计模式，必须了解go的struct和interface，若不熟悉，先阅读以下内容</li><li><a href="http://blog.csdn.net/wangshubo1989/article/details/70040022" target="_blank" rel="noopener">go语言的struct</a></li><li><a href="http://blog.csdn.net/wangshubo1989/article/details/70053086" target="_blank" rel="noopener">go语言的interface</a></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">* 简单工厂模式</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Operater <span class="keyword">interface</span> &#123;</span><br><span class="line">    Operate(<span class="keyword">int</span>, <span class="keyword">int</span>) <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> AddOperate <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *AddOperate)</span> <span class="title">Operate</span><span class="params">(rhs <span class="keyword">int</span>, lhs <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> rhs + lhs</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MultipleOperate <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MultipleOperate)</span> <span class="title">Operate</span><span class="params">(rhs <span class="keyword">int</span>, lhs <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> rhs * lhs</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> OperateFactory <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewOperateFactory</span><span class="params">()</span> *<span class="title">OperateFactory</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;OperateFactory&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *OperateFactory)</span> <span class="title">CreateOperate</span><span class="params">(operatename <span class="keyword">string</span>)</span> <span class="title">Operater</span></span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> operatename &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"+"</span>:</span><br><span class="line">        <span class="keyword">return</span> &amp;AddOperate&#123;&#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"*"</span>:</span><br><span class="line">        <span class="keyword">return</span> &amp;MultipleOperate&#123;&#125;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">panic</span>(<span class="string">"无效运算符号"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    Operator := NewOperateFactory().CreateOperate(<span class="string">"+"</span>)</span><br><span class="line">    fmt.Printf(<span class="string">"add result is %d\n"</span>, Operator.Operate(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">* 工厂方法</span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Operation <span class="keyword">struct</span> &#123;</span><br><span class="line">    a <span class="keyword">float64</span></span><br><span class="line">    b <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> OperationI <span class="keyword">interface</span> &#123;</span><br><span class="line">    GetResult() <span class="keyword">float64</span></span><br><span class="line">    SetA(<span class="keyword">float64</span>)</span><br><span class="line">    SetB(<span class="keyword">float64</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(op *Operation)</span> <span class="title">SetA</span><span class="params">(a <span class="keyword">float64</span>)</span></span> &#123;</span><br><span class="line">    op.a = a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(op *Operation)</span> <span class="title">SetB</span><span class="params">(b <span class="keyword">float64</span>)</span></span> &#123;</span><br><span class="line">    op.b = b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> AddOperation <span class="keyword">struct</span> &#123;</span><br><span class="line">    Operation</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *AddOperation)</span> <span class="title">GetResult</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> this.a + this.b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> SubOperation <span class="keyword">struct</span> &#123;</span><br><span class="line">    Operation</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *SubOperation)</span> <span class="title">GetResult</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> this.a - this.b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MulOperation <span class="keyword">struct</span> &#123;</span><br><span class="line">    Operation</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MulOperation)</span> <span class="title">GetResult</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> this.a * this.b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> DivOperation <span class="keyword">struct</span> &#123;</span><br><span class="line">    Operation</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *DivOperation)</span> <span class="title">GetResult</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> this.a / this.b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> IFactory <span class="keyword">interface</span> &#123;</span><br><span class="line">    CreateOperation() Operation</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> AddFactory <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *AddFactory)</span> <span class="title">CreateOperation</span><span class="params">()</span> <span class="title">OperationI</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;(AddOperation&#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> SubFactory <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *SubFactory)</span> <span class="title">CreateOperation</span><span class="params">()</span> <span class="title">OperationI</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;(SubOperation&#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MulFactory <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MulFactory)</span> <span class="title">CreateOperation</span><span class="params">()</span> <span class="title">OperationI</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;(MulOperation&#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> DivFactory <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *DivFactory)</span> <span class="title">CreateOperation</span><span class="params">()</span> <span class="title">OperationI</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;(DivOperation&#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fac := &amp;(AddFactory&#123;&#125;)</span><br><span class="line">    oper := fac.CreateOperation()</span><br><span class="line">    oper.SetA(<span class="number">1</span>)</span><br><span class="line">    oper.SetB(<span class="number">2</span>)</span><br><span class="line">    fmt.Println(oper.GetResult())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">* 抽象工厂方法</span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> GirlFriend <span class="keyword">struct</span> &#123;</span><br><span class="line">    nationality <span class="keyword">string</span></span><br><span class="line">    eyesColor   <span class="keyword">string</span></span><br><span class="line">    language    <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> AbstractFactory <span class="keyword">interface</span> &#123;</span><br><span class="line">    CreateMyLove() GirlFriend</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> IndianGirlFriendFactory <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> KoreanGirlFriendFactory <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a IndianGirlFriendFactory)</span> <span class="title">CreateMyLove</span><span class="params">()</span> <span class="title">GirlFriend</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> GirlFriend&#123;<span class="string">"Indian"</span>, <span class="string">"Black"</span>, <span class="string">"Hindi"</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a KoreanGirlFriendFactory)</span> <span class="title">CreateMyLove</span><span class="params">()</span> <span class="title">GirlFriend</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> GirlFriend&#123;<span class="string">"Korean"</span>, <span class="string">"Brown"</span>, <span class="string">"Korean"</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getGirlFriend</span><span class="params">(typeGf <span class="keyword">string</span>)</span> <span class="title">GirlFriend</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> gffact AbstractFactory</span><br><span class="line">    <span class="keyword">switch</span> typeGf &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"Indian"</span>:</span><br><span class="line">        gffact = IndianGirlFriendFactory&#123;&#125;</span><br><span class="line">        <span class="keyword">return</span> gffact.CreateMyLove()</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"Korean"</span>:</span><br><span class="line">        gffact = KoreanGirlFriendFactory&#123;&#125;</span><br><span class="line">        <span class="keyword">return</span> gffact.CreateMyLove()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> GirlFriend&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    a := getGirlFriend(<span class="string">"Indian"</span>)</span><br><span class="line"></span><br><span class="line">    fmt.Println(a.eyesColor)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://&quot; alt=&quot;&quot; style=&quot;width:100%&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="golang" scheme="https://cloudsjhan.github.io/categories/golang/"/>
    
    
      <category term="golang" scheme="https://cloudsjhan.github.io/tags/golang/"/>
    
      <category term="设计模式" scheme="https://cloudsjhan.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Mac os 环境配置ruby on rails 及其Hello world</title>
    <link href="https://cloudsjhan.github.io/2018/08/26/Mac-os-%E9%85%8D%E7%BD%AE-ruby-on-rails-md/"/>
    <id>https://cloudsjhan.github.io/2018/08/26/Mac-os-配置-ruby-on-rails-md/</id>
    <published>2018-08-26T15:20:33.000Z</published>
    <updated>2018-08-27T15:39:24.975Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><a id="more"></a><p>今天在Mac OS环境中倒腾ruby on rails，遇到一些坑并排坑后总结一个搭建过程，供大家参考。</p><h3 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h3><ul><li><p>本着IT届能用最新的就不用前面的版本的宗旨，在进行之前必须将你的Mac升级到最新的macOS High Sierra</p></li><li><p>安装 XCode Command Line Tools</p></li><li><p>配置Git</p></li><li><p>安装Homebrew</p></li><li><p>安装GPG</p></li><li><p>安装RVM</p></li><li><p>安装ruby</p></li><li><p>升级RubyGems</p></li><li><p>安装rails</p></li><li><p>基本MVC探究之Hello world</p><h3 id="Ruby-On-rails-for-mac-os-High-Sierra"><a href="#Ruby-On-rails-for-mac-os-High-Sierra" class="headerlink" title="Ruby On rails for mac os High Sierra"></a>Ruby On rails for mac os High Sierra</h3><ul><li><p>Mac OS是自带ruby的，但是这些ruby的版本都不是最新的，我们也不要用这些过时的版本</p></li><li><p>首先，升级你的Mac OS到10.13</p></li><li><p>查看是否安装xcode command line tool：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span>:xcode-select -p</span><br><span class="line">如果你看到：</span><br><span class="line">xcode-select: error: unable to get active developer directory...</span><br><span class="line">说明你没有安装xcode command line tool,需要按照下面的步骤安装。</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">如果你看到：</span><br><span class="line"><span class="meta">$</span>:/Applications/Xcode.app/Contents/Developer 或者/Library/Developer/CommandLineTools</span><br><span class="line">恭喜你，xcode command line tool你已经安装好了</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">But，如果你很不幸运地看到了这句话：</span><br><span class="line">$: /Applications/Apple Dev Tools/Xcode.app/Contents/Developer</span><br><span class="line">那么你就要卸掉xcode重新安装了，具体原因看</span><br></pre></td></tr></table></figure><p><a href="http://rvm.io/support/faq#can-i-use-a-path-with-spaces" target="_blank" rel="noopener">这里</a></p></li><li><p>安装xcode</p></li><li><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcode-select --install</span><br></pre></td></tr></table></figure></li><li><p>一路确认之后，就可以安好xcode，但是如果你的网速不好，等待时间过长，你可以从<a href="https://developer.apple.com/downloads/more" target="_blank" rel="noopener">这里</a>输入你的APPID下载。</p></li><li><p>确认一下是否安好</p></li><li><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> xcode-select -p</span><br><span class="line">/Library/Developer/CommandLineTools</span><br></pre></td></tr></table></figure></li></ul><h3 id="配置Git"><a href="#配置Git" class="headerlink" title="配置Git"></a>配置Git</h3><ul><li><p>在安装ruby on rails 之前，你应该配置你的Git。Git在Mac OS上使自动安装的软件</p></li><li><p>检查Git版本并确认已经安装让你放心</p></li><li><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git version</span><br><span class="line">git version 2.4.9 (Apple Git-60)</span><br></pre></td></tr></table></figure></li><li><p>配置Git之前，你应该到<a href="https://help.github.com/articles/signing-up-for-a-new-github-account/" target="_blank" rel="noopener">GitHub</a>上注册你的账号并记住密码和邮箱。并使用下面的命令配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git config -l --global</span><br><span class="line">fatal: unable to read config file '/Users/.../.gitconfig': No such file or directory</span><br><span class="line"><span class="meta">$</span> git config --global user.name "Your Real Name"</span><br><span class="line"><span class="meta">$</span> git config --global user.email me@example.com</span><br><span class="line"><span class="meta">$</span> git config -l --global</span><br><span class="line">user.name=Your Real Name</span><br><span class="line">user.email=me@example.com</span><br></pre></td></tr></table></figure></li><li><p>Git配置完成，在你想用Git的时候，它就会蹦出来了。</p></li></ul><h3 id="安装Homebrow"><a href="#安装Homebrow" class="headerlink" title="安装Homebrow"></a>安装Homebrow</h3><ul><li><p>检查homebrow是否已经安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> brew</span><br><span class="line">-bash: brew: command not found</span><br></pre></td></tr></table></figure><p>RVM需要<a href="http://brew.sh/" target="_blank" rel="noopener">Homebrow</a>,其实一个Mac OS额安装包管理工具，用来下载一些软件，类似于Ubuntu的apt-get和centos的yum install.为避免安装RM出现问题，我们必须安装homebrow：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"</span><br></pre></td></tr></table></figure><p>安装过程中可能会出现一些warning并让你输入密码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">WARNING: Improper use of the sudo command could lead to data loss...</span><br><span class="line">To proceed, enter your password...</span><br><span class="line">Password:</span><br></pre></td></tr></table></figure><p>尽管输入密码，忽略warning。</p><p>我们这里是使用了Mac OS内置的ruby来安装homebrow。</p></li></ul><h3 id="安装GPG"><a href="#安装GPG" class="headerlink" title="安装GPG"></a>安装GPG</h3><ul><li><p><a href="https://en.wikipedia.org/wiki/GNU_Privacy_Guard" target="_blank" rel="noopener">gpg</a>是一个用来检查RVM下载包的安全性的程序，我们使用homebrew来安装gpg:</p></li><li><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> brew install gpg</span><br></pre></td></tr></table></figure></li><li><p>gpg安装之后，为RVM安装key:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> command curl -sSL https://rvm.io/mpapis.asc | gpg --import -</span><br></pre></td></tr></table></figure></li></ul><h3 id="安装RVM"><a href="#安装RVM" class="headerlink" title="安装RVM"></a>安装RVM</h3><ul><li><p><a href="https://rvm.io/" target="_blank" rel="noopener">RVM</a>，是Ruby version manager的简写，用来安装ruby或者管理rails版本。<a href="https://rvm.io/rvm/install/" target="_blank" rel="noopener">这个网站</a>详细说明了安装ruby的方式，但是我们有一种最简便的方式：</p></li><li><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> \curl -L https://get.rvm.io | bash -s stable</span><br></pre></td></tr></table></figure><p>“curl”前面的“\”用来避免ruby版本的冲突，不要漏掉。</p></li><li><p>安装过程中你可能会看到</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir: /etc/openssl: Permission denied</span><br><span class="line">mkdir -p "/etc/openssl" failed, retrying with sudo</span><br><span class="line">your password required for 'mkdir -p /etc/openssl':</span><br></pre></td></tr></table></figure><p>请输入密码并继续。</p></li><li><p>如果你已经安装过RVM，使用下面的命令update：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> rvm get stable --autolibs=enable</span><br></pre></td></tr></table></figure></li><li><p>重启terminal窗口或者使用：使RVM生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> source ~/.rvm/scripts/rvm</span><br></pre></td></tr></table></figure></li></ul><h3 id="安装ruby"><a href="#安装ruby" class="headerlink" title="安装ruby"></a>安装ruby</h3><ul><li><p>在安装RVM之后，我们安装最新版本的ruby。ruby 2.5.1是写此博客时当前最新的ruby版本，还请查看ruby<a href="$ source ~/.rvm/scripts/rvm">官网</a>查看最新版本的ruby。必须指定ruby的版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> rvm install ruby-2.5.1</span><br></pre></td></tr></table></figure><p>安装后检查是否安装成功：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> ruby -v</span><br><span class="line">ruby 2.5.1...</span><br></pre></td></tr></table></figure></li></ul><h3 id="升级rubyGemset"><a href="#升级rubyGemset" class="headerlink" title="升级rubyGemset"></a>升级rubyGemset</h3><ul><li><p><a href="https://rubygems.org/gems/rubygems-update" target="_blank" rel="noopener">RubyGems</a>是一个ruby的包管理工具，用来安装ruby的工具或者额外功能的包。</p></li><li><p>查看gem版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> gem -v</span><br></pre></td></tr></table></figure><p>将gem升级到最新版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> gem update --system</span><br></pre></td></tr></table></figure></li><li><p>显示RVM gemsets的最初两个设置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> rvm gemset list</span><br><span class="line">gemsets for ruby-2.5.0</span><br><span class="line">=&gt; (default)</span><br><span class="line">   global</span><br></pre></td></tr></table></figure><p>一般使用global：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> rvm gemset use global</span><br></pre></td></tr></table></figure></li><li><p>安装bundle,<a href="https://rubygems.org/gems/bundler" target="_blank" rel="noopener">Bundle</a>是一个管理gem的必须的工具</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> gem install Bundler</span><br></pre></td></tr></table></figure></li><li><p>安装Nokogiri，<a href="http://nokogiri.org/" target="_blank" rel="noopener">Nokogiri</a>需要编译成指定的系统，在上面的配置下，号称最难安装的包，也将安装好</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gem install nokogiri</span><br></pre></td></tr></table></figure><p>如果你真的不幸运在安装时遇到问题，Stack <a href="http://stackoverflow.com/questions/tagged/nokogiri" target="_blank" rel="noopener">Overflow</a>能帮到你。</p></li></ul><h3 id="安装rails"><a href="#安装rails" class="headerlink" title="安装rails"></a>安装rails</h3><ul><li><p><a href="http://rubygems.org/gems/rails" target="_blank" rel="noopener">这里</a>是ruby On rail最新的版本，5.1是最新稳定版本，5.2是release版本，我们安装5.1.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> gem install rails --version=5.1</span><br></pre></td></tr></table></figure><p>如果你喜欢尝鲜，可以使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> gem install rails --pre</span><br></pre></td></tr></table></figure><p>安装release版本。</p><p>检查一下rails是否装好：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> rails -v</span><br><span class="line">Rails 5.2.0</span><br></pre></td></tr></table></figure></li><li><p>到此为止，ruby on rails 以及其环境配置都已妥当，可以开始你的ruby之旅了。</p></li></ul><h3 id="ruby-on-rails-的Hello-world"><a href="#ruby-on-rails-的Hello-world" class="headerlink" title="ruby on rails 的Hello world"></a>ruby on rails 的Hello world</h3><ul><li><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cd /</span><br><span class="line"><span class="meta">$</span> mkdir worlspace</span><br><span class="line"><span class="meta">$</span> cd workspace</span><br><span class="line"><span class="meta">$</span> rails _5.1.0_ new hello_app</span><br><span class="line"><span class="meta">$</span> cd hello_app</span><br><span class="line"><span class="meta">$</span> rails server</span><br></pre></td></tr></table></figure><p>将<a href="http://localhost:3000输入浏览器，就能看到ruby" target="_blank" rel="noopener">http://localhost:3000输入浏览器，就能看到ruby</a> on rails的欢迎界面。</p></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ruby" scheme="https://cloudsjhan.github.io/categories/ruby/"/>
    
    
      <category term="ruby on rails" scheme="https://cloudsjhan.github.io/tags/ruby-on-rails/"/>
    
      <category term="web" scheme="https://cloudsjhan.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>go实现UNIX command</title>
    <link href="https://cloudsjhan.github.io/2018/08/22/go-unix-cmd-md/"/>
    <id>https://cloudsjhan.github.io/2018/08/22/go-unix-cmd-md/</id>
    <published>2018-08-22T11:27:41.000Z</published>
    <updated>2018-09-01T05:38:25.962Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"bufio"</span></span><br><span class="line"><span class="string">"errors"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"><span class="string">"os/exec"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">reader := bufio.NewReader(os.Stdin)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">fmt.Print(<span class="string">"&gt; "</span>)</span><br><span class="line"><span class="comment">// 读取键盘的输入.</span></span><br><span class="line">input, err := reader.ReadString(<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Fprintln(os.Stderr, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行并解析command.</span></span><br><span class="line">err = execInput(input)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Fprintln(os.Stderr, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果cd命令没有路径的话，就报下面的错误</span></span><br><span class="line"><span class="keyword">var</span> ErrNoPath = errors.New(<span class="string">"path required"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">execInput</span><span class="params">(input <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// 移除换行符.</span></span><br><span class="line">input = strings.TrimSuffix(input, <span class="string">"\n"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将输入分割成参数.</span></span><br><span class="line">args := strings.Split(input, <span class="string">" "</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对cd命令的情况进行区分.</span></span><br><span class="line"><span class="keyword">switch</span> args[<span class="number">0</span>] &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"cd"</span>:</span><br><span class="line"><span class="comment">// 暂时不支持cd加空格进入home目录.</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(args) &lt; <span class="number">2</span> &#123;</span><br><span class="line"><span class="keyword">return</span> ErrNoPath</span><br><span class="line">&#125;</span><br><span class="line">err := os.Chdir(args[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Stop further processing.</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">"exit"</span>:</span><br><span class="line">os.Exit(<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Prepare the command to execute.</span></span><br><span class="line">cmd := exec.Command(args[<span class="number">0</span>], args[<span class="number">1</span>:]...)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set the correct output device.</span></span><br><span class="line">cmd.Stderr = os.Stderr</span><br><span class="line">cmd.Stdout = os.Stdout</span><br><span class="line"></span><br><span class="line"><span class="comment">// Execute the command and save it's output.</span></span><br><span class="line">err := cmd.Run()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//执行并测试</span><br><span class="line">go run main.go</span><br></pre></td></tr></table></figure><p>暂时不支持tab键自动补全命令，只是提供一种简单的思路。</p><hr>]]></content>
    
    <summary type="html">
    
      使用go实现UNIX环境下的命令行工具
    
    </summary>
    
      <category term="golang" scheme="https://cloudsjhan.github.io/categories/golang/"/>
    
    
      <category term="go" scheme="https://cloudsjhan.github.io/tags/go/"/>
    
      <category term="unix" scheme="https://cloudsjhan.github.io/tags/unix/"/>
    
  </entry>
  
  <entry>
    <title>iterm2 突然报很奇怪的错误-Error  No user exists for uid 501</title>
    <link href="https://cloudsjhan.github.io/2018/08/21/iterm2-strange-err-md-md/"/>
    <id>https://cloudsjhan.github.io/2018/08/21/iterm2-strange-err-md-md/</id>
    <published>2018-08-21T15:18:21.000Z</published>
    <updated>2018-08-21T15:33:12.206Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><p><img src="http://www.qqyou.com/view.php?pic=http://p1.qqyou.com/pic/UploadPic/2014-7/9/2014070910421928610.jpg" alt="" style="width:100%"></p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">No user exists <span class="keyword">for</span> uid <span class="number">501</span></span><br><span class="line">fatal: Could <span class="keyword">not</span> read <span class="keyword">from</span> remote repository.</span><br><span class="line">Please make sure you have the correct access rightsand the repository exists.</span><br></pre></td></tr></table></figure><ul><li>上午还好好的，刚刚连接GitHub报这个错误，排查后了解到是iterm2的神坑。</li><li>重启iterm终端就好 系统有更新的话 需要重启终端 更新。</li></ul><hr>]]></content>
    
    <summary type="html">
    
      iterm2 突然报很奇怪的错误-Error No user exists for uid 501
    
    </summary>
    
      <category term="生活中奇怪的坑" scheme="https://cloudsjhan.github.io/categories/%E7%94%9F%E6%B4%BB%E4%B8%AD%E5%A5%87%E6%80%AA%E7%9A%84%E5%9D%91/"/>
    
    
      <category term="日常的坑系列" scheme="https://cloudsjhan.github.io/tags/%E6%97%A5%E5%B8%B8%E7%9A%84%E5%9D%91%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>golang中interface的通用设计方法</title>
    <link href="https://cloudsjhan.github.io/2018/08/21/golang%E9%80%9A%E7%94%A8%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95/"/>
    <id>https://cloudsjhan.github.io/2018/08/21/golang通用接口设计方法/</id>
    <published>2018-08-21T14:18:58.000Z</published>
    <updated>2018-08-21T15:10:30.131Z</updated>
    
    <content type="html"><![CDATA[<p class="description">golang中接口设计的通用方法</p><a id="more"></a><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 接口定义</span><br><span class="line"><span class="keyword">type</span> XxxManager <span class="keyword">interface</span> &#123;</span><br><span class="line">    Create(args argsType) (*XxxStruct, error)</span><br><span class="line">    Get(args argsType) (**XxxStruct, error)</span><br><span class="line">    Update(args argsType) (*XxxStruct, error)</span><br><span class="line">    Delete(name <span class="keyword">string</span>, options *DeleleOptions) error</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">2.</span> 结构体定义 </span><br><span class="line"><span class="keyword">type</span> XxxManagerImpl <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="keyword">string</span></span><br><span class="line">    Namespace <span class="keyword">string</span></span><br><span class="line">    kubeCli *kubernetes.Clientset</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">3</span>，构造函数</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewXxxManagerImpl</span> <span class="params">(namespace, name <span class="keyword">string</span>, kubeCli *kubernetes.Clientset)</span> <span class="title">XxxManager</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;XxxManagerImpl&#123;</span><br><span class="line">        Name name,</span><br><span class="line">        Namespace namespace,</span><br><span class="line">        kubeCli: kubeCli,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">4.</span> 方法具体实现</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(xm *XxxManagerImpl)</span> <span class="title">Create</span><span class="params">(args argsType)</span> <span class="params">(*XxxStruct, error)</span></span> &#123;</span><br><span class="line">    <span class="comment">//具体的方法实现</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>golang通用接口设计</strong></p><p>根据以上设计cdosapi封装接口：</p>]]></content>
    
    <summary type="html">
    
      golang中interface的通用设计方法
    
    </summary>
    
      <category term="golang" scheme="https://cloudsjhan.github.io/categories/golang/"/>
    
    
      <category term="golang" scheme="https://cloudsjhan.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>python3中遇到&#39;TypeError Unicode-objects must be encoded before hashing&#39;</title>
    <link href="https://cloudsjhan.github.io/2018/08/20/python-md5-err-md/"/>
    <id>https://cloudsjhan.github.io/2018/08/20/python-md5-err-md/</id>
    <published>2018-08-20T14:18:58.000Z</published>
    <updated>2018-09-28T02:06:52.282Z</updated>
    
    <content type="html"><![CDATA[<p class="description">Python3中进行MD5加密，遇到编码问题</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlencode, quote_plus</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">verfy_ac</span><span class="params">(private_key)</span>:</span></span><br><span class="line"></span><br><span class="line">    item = &#123;</span><br><span class="line">     <span class="string">"Action"</span>     :  <span class="string">"CreateUHostInstance"</span>,</span><br><span class="line">     <span class="string">"CPU"</span>        :  <span class="number">2</span>,</span><br><span class="line">     <span class="string">"ChargeType"</span> :  <span class="string">"Month"</span>,</span><br><span class="line">     <span class="string">"DiskSpace"</span>  :  <span class="number">10</span>,</span><br><span class="line">     <span class="string">"ImageId"</span>    :  <span class="string">"f43736e1-65a5-4bea-ad2e-8a46e18883c2"</span>,</span><br><span class="line">     <span class="string">"LoginMode"</span>  :  <span class="string">"Password"</span>,</span><br><span class="line">     <span class="string">"Memory"</span>     :  <span class="number">2048</span>,</span><br><span class="line">     <span class="string">"Name"</span>       :  <span class="string">"Host01"</span>,</span><br><span class="line">     <span class="string">"Password"</span>   :  <span class="string">"VUNsb3VkLmNu"</span>,</span><br><span class="line">     <span class="string">"PublicKey"</span>  :  <span class="string">"ucloudsomeone%40example.com1296235120854146120"</span>,</span><br><span class="line">     <span class="string">"Quantity"</span>   :  <span class="number">1</span>,</span><br><span class="line">     <span class="string">"Region"</span>     :  <span class="string">"cn-bj2"</span>,</span><br><span class="line">     <span class="string">"Zone"</span>       :  <span class="string">"cn-bj2-04"</span></span><br><span class="line"> &#125;</span><br><span class="line">    <span class="comment"># 将参数串排序</span></span><br><span class="line"></span><br><span class="line">    params_data = <span class="string">""</span></span><br><span class="line">    <span class="keyword">import</span> pdb;pdb.set_trace()</span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> item.items():</span><br><span class="line">        params_data = params_data + str(key) + str(value)</span><br><span class="line">    params_data = params_data + private_key</span><br><span class="line">    params_data_en = quote_plus(params_data)</span><br><span class="line"></span><br><span class="line">    sign = hashlib.sha1()</span><br><span class="line">    sign.update(params_data_en.encode(<span class="string">'utf8'</span>))</span><br><span class="line">    signature = sign.hexdigest()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> signature</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(verfy_ac(<span class="string">"46f09bb9fab4f12dfc160dae12273d5332b5debe"</span>))</span><br></pre></td></tr></table></figure><p>这是<a href="https://docs.ucloud.cn/api/summary/signature" target="_blank" rel="noopener">ucloud官方的API教程</a>，想根据此教程生成签名，教程中的代码是基于Python2.7编写，我将其改成了Python3.但是在执行时报错：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TypeError: Unicode-objects must be encoded before hashing</span><br></pre></td></tr></table></figure><hr><p>排错后发现python3中字符对象是unicode对象，不能直接加密，需要编码后才能进行update。</p><p>就是改成如下即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sign.update(params_data_en.encode(<span class="string">'utf8'</span>))</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      Python中进行md5加密时遇到的编码问题
    
    </summary>
    
      <category term="python" scheme="https://cloudsjhan.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://cloudsjhan.github.io/tags/python/"/>
    
      <category term="md5编码" scheme="https://cloudsjhan.github.io/tags/md5%E7%BC%96%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://cloudsjhan.github.io/2018/08/18/hello-world/"/>
    <id>https://cloudsjhan.github.io/2018/08/18/hello-world/</id>
    <published>2018-08-18T14:05:08.383Z</published>
    <updated>2018-08-18T14:05:08.384Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
